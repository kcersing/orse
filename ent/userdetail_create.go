// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/user"
	"orse/ent/userdetail"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDetailCreate is the builder for creating a UserDetail entity.
type UserDetailCreate struct {
	config
	mutation *UserDetailMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (udc *UserDetailCreate) SetUserID(i int) *UserDetailCreate {
	udc.mutation.SetUserID(i)
	return udc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (udc *UserDetailCreate) SetNillableUserID(i *int) *UserDetailCreate {
	if i != nil {
		udc.SetUserID(*i)
	}
	return udc
}

// SetName sets the "name" field.
func (udc *UserDetailCreate) SetName(s string) *UserDetailCreate {
	udc.mutation.SetName(s)
	return udc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (udc *UserDetailCreate) SetNillableName(s *string) *UserDetailCreate {
	if s != nil {
		udc.SetName(*s)
	}
	return udc
}

// SetAge sets the "age" field.
func (udc *UserDetailCreate) SetAge(i int) *UserDetailCreate {
	udc.mutation.SetAge(i)
	return udc
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (udc *UserDetailCreate) SetNillableAge(i *int) *UserDetailCreate {
	if i != nil {
		udc.SetAge(*i)
	}
	return udc
}

// SetRank sets the "rank" field.
func (udc *UserDetailCreate) SetRank(f float64) *UserDetailCreate {
	udc.mutation.SetRank(f)
	return udc
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (udc *UserDetailCreate) SetNillableRank(f *float64) *UserDetailCreate {
	if f != nil {
		udc.SetRank(*f)
	}
	return udc
}

// SetPic sets the "pic" field.
func (udc *UserDetailCreate) SetPic(s string) *UserDetailCreate {
	udc.mutation.SetPic(s)
	return udc
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (udc *UserDetailCreate) SetNillablePic(s *string) *UserDetailCreate {
	if s != nil {
		udc.SetPic(*s)
	}
	return udc
}

// SetUser sets the "user" edge to the User entity.
func (udc *UserDetailCreate) SetUser(u *User) *UserDetailCreate {
	return udc.SetUserID(u.ID)
}

// Mutation returns the UserDetailMutation object of the builder.
func (udc *UserDetailCreate) Mutation() *UserDetailMutation {
	return udc.mutation
}

// Save creates the UserDetail in the database.
func (udc *UserDetailCreate) Save(ctx context.Context) (*UserDetail, error) {
	var (
		err  error
		node *UserDetail
	)
	if len(udc.hooks) == 0 {
		if err = udc.check(); err != nil {
			return nil, err
		}
		node, err = udc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = udc.check(); err != nil {
				return nil, err
			}
			udc.mutation = mutation
			if node, err = udc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(udc.hooks) - 1; i >= 0; i-- {
			if udc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = udc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, udc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UserDetailCreate) SaveX(ctx context.Context) *UserDetail {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udc *UserDetailCreate) Exec(ctx context.Context) error {
	_, err := udc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udc *UserDetailCreate) ExecX(ctx context.Context) {
	if err := udc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udc *UserDetailCreate) check() error {
	if v, ok := udc.mutation.Age(); ok {
		if err := userdetail.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "age": %w`, err)}
		}
	}
	return nil
}

func (udc *UserDetailCreate) sqlSave(ctx context.Context) (*UserDetail, error) {
	_node, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (udc *UserDetailCreate) createSpec() (*UserDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &UserDetail{config: udc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userdetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userdetail.FieldID,
			},
		}
	)
	if value, ok := udc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldName,
		})
		_node.Name = value
	}
	if value, ok := udc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldAge,
		})
		_node.Age = value
	}
	if value, ok := udc.mutation.Rank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdetail.FieldRank,
		})
		_node.Rank = value
	}
	if value, ok := udc.mutation.Pic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldPic,
		})
		_node.Pic = value
	}
	if nodes := udc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdetail.UserTable,
			Columns: []string{userdetail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserDetailCreateBulk is the builder for creating many UserDetail entities in bulk.
type UserDetailCreateBulk struct {
	config
	builders []*UserDetailCreate
}

// Save creates the UserDetail entities in the database.
func (udcb *UserDetailCreateBulk) Save(ctx context.Context) ([]*UserDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(udcb.builders))
	nodes := make([]*UserDetail, len(udcb.builders))
	mutators := make([]Mutator, len(udcb.builders))
	for i := range udcb.builders {
		func(i int, root context.Context) {
			builder := udcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udcb *UserDetailCreateBulk) SaveX(ctx context.Context) []*UserDetail {
	v, err := udcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udcb *UserDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := udcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udcb *UserDetailCreateBulk) ExecX(ctx context.Context) {
	if err := udcb.Exec(ctx); err != nil {
		panic(err)
	}
}
