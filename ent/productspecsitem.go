// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/productspecs"
	"orse/ent/productspecsitem"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProductSpecsItem is the model entity for the ProductSpecsItem schema.
type ProductSpecsItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ProductSpecsID holds the value of the "product_specs_id" field.
	ProductSpecsID int `json:"product_specs_id,omitempty"`
	// ValueID holds the value of the "value_id" field.
	ValueID int `json:"value_id,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort int `json:"sort,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductSpecsItemQuery when eager-loading is set.
	Edges ProductSpecsItemEdges `json:"edges"`
}

// ProductSpecsItemEdges holds the relations/edges for other nodes in the graph.
type ProductSpecsItemEdges struct {
	// Specs holds the value of the specs edge.
	Specs *ProductSpecs `json:"specs,omitempty"`
	// Values holds the value of the values edge.
	Values []*ProductAttributeValue `json:"values,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SpecsOrErr returns the Specs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductSpecsItemEdges) SpecsOrErr() (*ProductSpecs, error) {
	if e.loadedTypes[0] {
		if e.Specs == nil {
			// The edge specs was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productspecs.Label}
		}
		return e.Specs, nil
	}
	return nil, &NotLoadedError{edge: "specs"}
}

// ValuesOrErr returns the Values value or an error if the edge
// was not loaded in eager-loading.
func (e ProductSpecsItemEdges) ValuesOrErr() ([]*ProductAttributeValue, error) {
	if e.loadedTypes[1] {
		return e.Values, nil
	}
	return nil, &NotLoadedError{edge: "values"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductSpecsItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productspecsitem.FieldID, productspecsitem.FieldProductSpecsID, productspecsitem.FieldValueID, productspecsitem.FieldSort:
			values[i] = new(sql.NullInt64)
		case productspecsitem.FieldCreatedAt, productspecsitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductSpecsItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductSpecsItem fields.
func (psi *ProductSpecsItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productspecsitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			psi.ID = int(value.Int64)
		case productspecsitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				psi.CreatedAt = value.Time
			}
		case productspecsitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				psi.UpdatedAt = value.Time
			}
		case productspecsitem.FieldProductSpecsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_specs_id", values[i])
			} else if value.Valid {
				psi.ProductSpecsID = int(value.Int64)
			}
		case productspecsitem.FieldValueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value_id", values[i])
			} else if value.Valid {
				psi.ValueID = int(value.Int64)
			}
		case productspecsitem.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				psi.Sort = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySpecs queries the "specs" edge of the ProductSpecsItem entity.
func (psi *ProductSpecsItem) QuerySpecs() *ProductSpecsQuery {
	return (&ProductSpecsItemClient{config: psi.config}).QuerySpecs(psi)
}

// QueryValues queries the "values" edge of the ProductSpecsItem entity.
func (psi *ProductSpecsItem) QueryValues() *ProductAttributeValueQuery {
	return (&ProductSpecsItemClient{config: psi.config}).QueryValues(psi)
}

// Update returns a builder for updating this ProductSpecsItem.
// Note that you need to call ProductSpecsItem.Unwrap() before calling this method if this ProductSpecsItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (psi *ProductSpecsItem) Update() *ProductSpecsItemUpdateOne {
	return (&ProductSpecsItemClient{config: psi.config}).UpdateOne(psi)
}

// Unwrap unwraps the ProductSpecsItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (psi *ProductSpecsItem) Unwrap() *ProductSpecsItem {
	tx, ok := psi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductSpecsItem is not a transactional entity")
	}
	psi.config.driver = tx.drv
	return psi
}

// String implements the fmt.Stringer.
func (psi *ProductSpecsItem) String() string {
	var builder strings.Builder
	builder.WriteString("ProductSpecsItem(")
	builder.WriteString(fmt.Sprintf("id=%v", psi.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(psi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(psi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", product_specs_id=")
	builder.WriteString(fmt.Sprintf("%v", psi.ProductSpecsID))
	builder.WriteString(", value_id=")
	builder.WriteString(fmt.Sprintf("%v", psi.ValueID))
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", psi.Sort))
	builder.WriteByte(')')
	return builder.String()
}

// ProductSpecsItems is a parsable slice of ProductSpecsItem.
type ProductSpecsItems []*ProductSpecsItem

func (psi ProductSpecsItems) config(cfg config) {
	for _i := range psi {
		psi[_i].config = cfg
	}
}
