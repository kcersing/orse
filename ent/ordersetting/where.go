// Code generated by entc, DO NOT EDIT.

package ordersetting

import (
	"orse/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// OrderOvertime applies equality check predicate on the "order_overtime" field. It's identical to OrderOvertimeEQ.
func OrderOvertime(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderOvertime), v))
	})
}

// ConfirmOvertime applies equality check predicate on the "confirm_overtime" field. It's identical to ConfirmOvertimeEQ.
func ConfirmOvertime(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfirmOvertime), v))
	})
}

// FinishOvertime applies equality check predicate on the "finish_overtime" field. It's identical to FinishOvertimeEQ.
func FinishOvertime(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishOvertime), v))
	})
}

// CommentOvertime applies equality check predicate on the "comment_overtime" field. It's identical to CommentOvertimeEQ.
func CommentOvertime(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommentOvertime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// OrderOvertimeEQ applies the EQ predicate on the "order_overtime" field.
func OrderOvertimeEQ(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderOvertime), v))
	})
}

// OrderOvertimeNEQ applies the NEQ predicate on the "order_overtime" field.
func OrderOvertimeNEQ(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderOvertime), v))
	})
}

// OrderOvertimeIn applies the In predicate on the "order_overtime" field.
func OrderOvertimeIn(vs ...int) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderOvertime), v...))
	})
}

// OrderOvertimeNotIn applies the NotIn predicate on the "order_overtime" field.
func OrderOvertimeNotIn(vs ...int) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderOvertime), v...))
	})
}

// OrderOvertimeGT applies the GT predicate on the "order_overtime" field.
func OrderOvertimeGT(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderOvertime), v))
	})
}

// OrderOvertimeGTE applies the GTE predicate on the "order_overtime" field.
func OrderOvertimeGTE(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderOvertime), v))
	})
}

// OrderOvertimeLT applies the LT predicate on the "order_overtime" field.
func OrderOvertimeLT(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderOvertime), v))
	})
}

// OrderOvertimeLTE applies the LTE predicate on the "order_overtime" field.
func OrderOvertimeLTE(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderOvertime), v))
	})
}

// OrderOvertimeIsNil applies the IsNil predicate on the "order_overtime" field.
func OrderOvertimeIsNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderOvertime)))
	})
}

// OrderOvertimeNotNil applies the NotNil predicate on the "order_overtime" field.
func OrderOvertimeNotNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderOvertime)))
	})
}

// ConfirmOvertimeEQ applies the EQ predicate on the "confirm_overtime" field.
func ConfirmOvertimeEQ(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfirmOvertime), v))
	})
}

// ConfirmOvertimeNEQ applies the NEQ predicate on the "confirm_overtime" field.
func ConfirmOvertimeNEQ(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConfirmOvertime), v))
	})
}

// ConfirmOvertimeIn applies the In predicate on the "confirm_overtime" field.
func ConfirmOvertimeIn(vs ...int) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConfirmOvertime), v...))
	})
}

// ConfirmOvertimeNotIn applies the NotIn predicate on the "confirm_overtime" field.
func ConfirmOvertimeNotIn(vs ...int) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConfirmOvertime), v...))
	})
}

// ConfirmOvertimeGT applies the GT predicate on the "confirm_overtime" field.
func ConfirmOvertimeGT(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConfirmOvertime), v))
	})
}

// ConfirmOvertimeGTE applies the GTE predicate on the "confirm_overtime" field.
func ConfirmOvertimeGTE(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConfirmOvertime), v))
	})
}

// ConfirmOvertimeLT applies the LT predicate on the "confirm_overtime" field.
func ConfirmOvertimeLT(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConfirmOvertime), v))
	})
}

// ConfirmOvertimeLTE applies the LTE predicate on the "confirm_overtime" field.
func ConfirmOvertimeLTE(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConfirmOvertime), v))
	})
}

// ConfirmOvertimeIsNil applies the IsNil predicate on the "confirm_overtime" field.
func ConfirmOvertimeIsNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConfirmOvertime)))
	})
}

// ConfirmOvertimeNotNil applies the NotNil predicate on the "confirm_overtime" field.
func ConfirmOvertimeNotNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConfirmOvertime)))
	})
}

// FinishOvertimeEQ applies the EQ predicate on the "finish_overtime" field.
func FinishOvertimeEQ(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishOvertime), v))
	})
}

// FinishOvertimeNEQ applies the NEQ predicate on the "finish_overtime" field.
func FinishOvertimeNEQ(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinishOvertime), v))
	})
}

// FinishOvertimeIn applies the In predicate on the "finish_overtime" field.
func FinishOvertimeIn(vs ...int) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinishOvertime), v...))
	})
}

// FinishOvertimeNotIn applies the NotIn predicate on the "finish_overtime" field.
func FinishOvertimeNotIn(vs ...int) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinishOvertime), v...))
	})
}

// FinishOvertimeGT applies the GT predicate on the "finish_overtime" field.
func FinishOvertimeGT(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinishOvertime), v))
	})
}

// FinishOvertimeGTE applies the GTE predicate on the "finish_overtime" field.
func FinishOvertimeGTE(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinishOvertime), v))
	})
}

// FinishOvertimeLT applies the LT predicate on the "finish_overtime" field.
func FinishOvertimeLT(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinishOvertime), v))
	})
}

// FinishOvertimeLTE applies the LTE predicate on the "finish_overtime" field.
func FinishOvertimeLTE(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinishOvertime), v))
	})
}

// FinishOvertimeIsNil applies the IsNil predicate on the "finish_overtime" field.
func FinishOvertimeIsNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFinishOvertime)))
	})
}

// FinishOvertimeNotNil applies the NotNil predicate on the "finish_overtime" field.
func FinishOvertimeNotNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFinishOvertime)))
	})
}

// CommentOvertimeEQ applies the EQ predicate on the "comment_overtime" field.
func CommentOvertimeEQ(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommentOvertime), v))
	})
}

// CommentOvertimeNEQ applies the NEQ predicate on the "comment_overtime" field.
func CommentOvertimeNEQ(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommentOvertime), v))
	})
}

// CommentOvertimeIn applies the In predicate on the "comment_overtime" field.
func CommentOvertimeIn(vs ...int) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCommentOvertime), v...))
	})
}

// CommentOvertimeNotIn applies the NotIn predicate on the "comment_overtime" field.
func CommentOvertimeNotIn(vs ...int) predicate.OrderSetting {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderSetting(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCommentOvertime), v...))
	})
}

// CommentOvertimeGT applies the GT predicate on the "comment_overtime" field.
func CommentOvertimeGT(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommentOvertime), v))
	})
}

// CommentOvertimeGTE applies the GTE predicate on the "comment_overtime" field.
func CommentOvertimeGTE(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommentOvertime), v))
	})
}

// CommentOvertimeLT applies the LT predicate on the "comment_overtime" field.
func CommentOvertimeLT(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommentOvertime), v))
	})
}

// CommentOvertimeLTE applies the LTE predicate on the "comment_overtime" field.
func CommentOvertimeLTE(v int) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommentOvertime), v))
	})
}

// CommentOvertimeIsNil applies the IsNil predicate on the "comment_overtime" field.
func CommentOvertimeIsNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommentOvertime)))
	})
}

// CommentOvertimeNotNil applies the NotNil predicate on the "comment_overtime" field.
func CommentOvertimeNotNil() predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommentOvertime)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderSetting) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderSetting) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderSetting) predicate.OrderSetting {
	return predicate.OrderSetting(func(s *sql.Selector) {
		p(s.Not())
	})
}
