// Code generated by entc, DO NOT EDIT.

package orderamounts

import (
	"orse/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalAmount), v))
	})
}

// PayAmount applies equality check predicate on the "pay_amount" field. It's identical to PayAmountEQ.
func PayAmount(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayAmount), v))
	})
}

// FreightAmount applies equality check predicate on the "freight_amount" field. It's identical to FreightAmountEQ.
func FreightAmount(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreightAmount), v))
	})
}

// PromotionAmount applies equality check predicate on the "promotion_amount" field. It's identical to PromotionAmountEQ.
func PromotionAmount(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPromotionAmount), v))
	})
}

// IntegrationAmount applies equality check predicate on the "integration_amount" field. It's identical to IntegrationAmountEQ.
func IntegrationAmount(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntegrationAmount), v))
	})
}

// CouponID applies equality check predicate on the "coupon_id" field. It's identical to CouponIDEQ.
func CouponID(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponID), v))
	})
}

// CouponAmount applies equality check predicate on the "coupon_amount" field. It's identical to CouponAmountEQ.
func CouponAmount(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponAmount), v))
	})
}

// DiscountAmount applies equality check predicate on the "discount_amount" field. It's identical to DiscountAmountEQ.
func DiscountAmount(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountAmount), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderID)))
	})
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderID)))
	})
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalAmount), v))
	})
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalAmount), v))
	})
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalAmount), v...))
	})
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalAmount), v...))
	})
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalAmount), v))
	})
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalAmount), v))
	})
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalAmount), v))
	})
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalAmount), v))
	})
}

// PayAmountEQ applies the EQ predicate on the "pay_amount" field.
func PayAmountEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayAmount), v))
	})
}

// PayAmountNEQ applies the NEQ predicate on the "pay_amount" field.
func PayAmountNEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayAmount), v))
	})
}

// PayAmountIn applies the In predicate on the "pay_amount" field.
func PayAmountIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayAmount), v...))
	})
}

// PayAmountNotIn applies the NotIn predicate on the "pay_amount" field.
func PayAmountNotIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayAmount), v...))
	})
}

// PayAmountGT applies the GT predicate on the "pay_amount" field.
func PayAmountGT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayAmount), v))
	})
}

// PayAmountGTE applies the GTE predicate on the "pay_amount" field.
func PayAmountGTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayAmount), v))
	})
}

// PayAmountLT applies the LT predicate on the "pay_amount" field.
func PayAmountLT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayAmount), v))
	})
}

// PayAmountLTE applies the LTE predicate on the "pay_amount" field.
func PayAmountLTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayAmount), v))
	})
}

// FreightAmountEQ applies the EQ predicate on the "freight_amount" field.
func FreightAmountEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreightAmount), v))
	})
}

// FreightAmountNEQ applies the NEQ predicate on the "freight_amount" field.
func FreightAmountNEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFreightAmount), v))
	})
}

// FreightAmountIn applies the In predicate on the "freight_amount" field.
func FreightAmountIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFreightAmount), v...))
	})
}

// FreightAmountNotIn applies the NotIn predicate on the "freight_amount" field.
func FreightAmountNotIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFreightAmount), v...))
	})
}

// FreightAmountGT applies the GT predicate on the "freight_amount" field.
func FreightAmountGT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFreightAmount), v))
	})
}

// FreightAmountGTE applies the GTE predicate on the "freight_amount" field.
func FreightAmountGTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFreightAmount), v))
	})
}

// FreightAmountLT applies the LT predicate on the "freight_amount" field.
func FreightAmountLT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFreightAmount), v))
	})
}

// FreightAmountLTE applies the LTE predicate on the "freight_amount" field.
func FreightAmountLTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFreightAmount), v))
	})
}

// PromotionAmountEQ applies the EQ predicate on the "promotion_amount" field.
func PromotionAmountEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPromotionAmount), v))
	})
}

// PromotionAmountNEQ applies the NEQ predicate on the "promotion_amount" field.
func PromotionAmountNEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPromotionAmount), v))
	})
}

// PromotionAmountIn applies the In predicate on the "promotion_amount" field.
func PromotionAmountIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPromotionAmount), v...))
	})
}

// PromotionAmountNotIn applies the NotIn predicate on the "promotion_amount" field.
func PromotionAmountNotIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPromotionAmount), v...))
	})
}

// PromotionAmountGT applies the GT predicate on the "promotion_amount" field.
func PromotionAmountGT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPromotionAmount), v))
	})
}

// PromotionAmountGTE applies the GTE predicate on the "promotion_amount" field.
func PromotionAmountGTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPromotionAmount), v))
	})
}

// PromotionAmountLT applies the LT predicate on the "promotion_amount" field.
func PromotionAmountLT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPromotionAmount), v))
	})
}

// PromotionAmountLTE applies the LTE predicate on the "promotion_amount" field.
func PromotionAmountLTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPromotionAmount), v))
	})
}

// IntegrationAmountEQ applies the EQ predicate on the "integration_amount" field.
func IntegrationAmountEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntegrationAmount), v))
	})
}

// IntegrationAmountNEQ applies the NEQ predicate on the "integration_amount" field.
func IntegrationAmountNEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIntegrationAmount), v))
	})
}

// IntegrationAmountIn applies the In predicate on the "integration_amount" field.
func IntegrationAmountIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIntegrationAmount), v...))
	})
}

// IntegrationAmountNotIn applies the NotIn predicate on the "integration_amount" field.
func IntegrationAmountNotIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIntegrationAmount), v...))
	})
}

// IntegrationAmountGT applies the GT predicate on the "integration_amount" field.
func IntegrationAmountGT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIntegrationAmount), v))
	})
}

// IntegrationAmountGTE applies the GTE predicate on the "integration_amount" field.
func IntegrationAmountGTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIntegrationAmount), v))
	})
}

// IntegrationAmountLT applies the LT predicate on the "integration_amount" field.
func IntegrationAmountLT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIntegrationAmount), v))
	})
}

// IntegrationAmountLTE applies the LTE predicate on the "integration_amount" field.
func IntegrationAmountLTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIntegrationAmount), v))
	})
}

// CouponIDEQ applies the EQ predicate on the "coupon_id" field.
func CouponIDEQ(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponID), v))
	})
}

// CouponIDNEQ applies the NEQ predicate on the "coupon_id" field.
func CouponIDNEQ(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCouponID), v))
	})
}

// CouponIDIn applies the In predicate on the "coupon_id" field.
func CouponIDIn(vs ...int) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCouponID), v...))
	})
}

// CouponIDNotIn applies the NotIn predicate on the "coupon_id" field.
func CouponIDNotIn(vs ...int) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCouponID), v...))
	})
}

// CouponIDGT applies the GT predicate on the "coupon_id" field.
func CouponIDGT(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCouponID), v))
	})
}

// CouponIDGTE applies the GTE predicate on the "coupon_id" field.
func CouponIDGTE(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCouponID), v))
	})
}

// CouponIDLT applies the LT predicate on the "coupon_id" field.
func CouponIDLT(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCouponID), v))
	})
}

// CouponIDLTE applies the LTE predicate on the "coupon_id" field.
func CouponIDLTE(v int) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCouponID), v))
	})
}

// CouponIDIsNil applies the IsNil predicate on the "coupon_id" field.
func CouponIDIsNil() predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCouponID)))
	})
}

// CouponIDNotNil applies the NotNil predicate on the "coupon_id" field.
func CouponIDNotNil() predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCouponID)))
	})
}

// CouponAmountEQ applies the EQ predicate on the "coupon_amount" field.
func CouponAmountEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponAmount), v))
	})
}

// CouponAmountNEQ applies the NEQ predicate on the "coupon_amount" field.
func CouponAmountNEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCouponAmount), v))
	})
}

// CouponAmountIn applies the In predicate on the "coupon_amount" field.
func CouponAmountIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCouponAmount), v...))
	})
}

// CouponAmountNotIn applies the NotIn predicate on the "coupon_amount" field.
func CouponAmountNotIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCouponAmount), v...))
	})
}

// CouponAmountGT applies the GT predicate on the "coupon_amount" field.
func CouponAmountGT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCouponAmount), v))
	})
}

// CouponAmountGTE applies the GTE predicate on the "coupon_amount" field.
func CouponAmountGTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCouponAmount), v))
	})
}

// CouponAmountLT applies the LT predicate on the "coupon_amount" field.
func CouponAmountLT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCouponAmount), v))
	})
}

// CouponAmountLTE applies the LTE predicate on the "coupon_amount" field.
func CouponAmountLTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCouponAmount), v))
	})
}

// DiscountAmountEQ applies the EQ predicate on the "discount_amount" field.
func DiscountAmountEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountAmount), v))
	})
}

// DiscountAmountNEQ applies the NEQ predicate on the "discount_amount" field.
func DiscountAmountNEQ(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscountAmount), v))
	})
}

// DiscountAmountIn applies the In predicate on the "discount_amount" field.
func DiscountAmountIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscountAmount), v...))
	})
}

// DiscountAmountNotIn applies the NotIn predicate on the "discount_amount" field.
func DiscountAmountNotIn(vs ...float64) predicate.OrderAmounts {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderAmounts(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscountAmount), v...))
	})
}

// DiscountAmountGT applies the GT predicate on the "discount_amount" field.
func DiscountAmountGT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscountAmount), v))
	})
}

// DiscountAmountGTE applies the GTE predicate on the "discount_amount" field.
func DiscountAmountGTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscountAmount), v))
	})
}

// DiscountAmountLT applies the LT predicate on the "discount_amount" field.
func DiscountAmountLT(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscountAmount), v))
	})
}

// DiscountAmountLTE applies the LTE predicate on the "discount_amount" field.
func DiscountAmountLTE(v float64) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscountAmount), v))
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderAmounts) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderAmounts) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderAmounts) predicate.OrderAmounts {
	return predicate.OrderAmounts(func(s *sql.Selector) {
		p(s.Not())
	})
}
