// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/order"
	"orse/ent/orderitem"
	"orse/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderItemUpdate is the builder for updating OrderItem entities.
type OrderItemUpdate struct {
	config
	hooks    []Hook
	mutation *OrderItemMutation
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (oiu *OrderItemUpdate) Where(ps ...predicate.OrderItem) *OrderItemUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetCreatedAt sets the "created_at" field.
func (oiu *OrderItemUpdate) SetCreatedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetCreatedAt(t)
	return oiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCreatedAt(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetCreatedAt(*t)
	}
	return oiu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (oiu *OrderItemUpdate) ClearCreatedAt() *OrderItemUpdate {
	oiu.mutation.ClearCreatedAt()
	return oiu
}

// SetUpdatedAt sets the "updated_at" field.
func (oiu *OrderItemUpdate) SetUpdatedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetUpdatedAt(t)
	return oiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oiu *OrderItemUpdate) ClearUpdatedAt() *OrderItemUpdate {
	oiu.mutation.ClearUpdatedAt()
	return oiu
}

// SetOrderID sets the "order_id" field.
func (oiu *OrderItemUpdate) SetOrderID(i int) *OrderItemUpdate {
	oiu.mutation.SetOrderID(i)
	return oiu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableOrderID(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetOrderID(*i)
	}
	return oiu
}

// ClearOrderID clears the value of the "order_id" field.
func (oiu *OrderItemUpdate) ClearOrderID() *OrderItemUpdate {
	oiu.mutation.ClearOrderID()
	return oiu
}

// SetSn sets the "sn" field.
func (oiu *OrderItemUpdate) SetSn(s string) *OrderItemUpdate {
	oiu.mutation.SetSn(s)
	return oiu
}

// SetProductCateID sets the "product_cate_id" field.
func (oiu *OrderItemUpdate) SetProductCateID(i int) *OrderItemUpdate {
	oiu.mutation.ResetProductCateID()
	oiu.mutation.SetProductCateID(i)
	return oiu
}

// AddProductCateID adds i to the "product_cate_id" field.
func (oiu *OrderItemUpdate) AddProductCateID(i int) *OrderItemUpdate {
	oiu.mutation.AddProductCateID(i)
	return oiu
}

// SetProductID sets the "product_id" field.
func (oiu *OrderItemUpdate) SetProductID(i int) *OrderItemUpdate {
	oiu.mutation.ResetProductID()
	oiu.mutation.SetProductID(i)
	return oiu
}

// AddProductID adds i to the "product_id" field.
func (oiu *OrderItemUpdate) AddProductID(i int) *OrderItemUpdate {
	oiu.mutation.AddProductID(i)
	return oiu
}

// SetProductPic sets the "product_pic" field.
func (oiu *OrderItemUpdate) SetProductPic(s string) *OrderItemUpdate {
	oiu.mutation.SetProductPic(s)
	return oiu
}

// SetProductName sets the "product_name" field.
func (oiu *OrderItemUpdate) SetProductName(s string) *OrderItemUpdate {
	oiu.mutation.SetProductName(s)
	return oiu
}

// SetProductSn sets the "product_sn" field.
func (oiu *OrderItemUpdate) SetProductSn(i int) *OrderItemUpdate {
	oiu.mutation.ResetProductSn()
	oiu.mutation.SetProductSn(i)
	return oiu
}

// AddProductSn adds i to the "product_sn" field.
func (oiu *OrderItemUpdate) AddProductSn(i int) *OrderItemUpdate {
	oiu.mutation.AddProductSn(i)
	return oiu
}

// SetProductPrice sets the "product_price" field.
func (oiu *OrderItemUpdate) SetProductPrice(f float64) *OrderItemUpdate {
	oiu.mutation.ResetProductPrice()
	oiu.mutation.SetProductPrice(f)
	return oiu
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProductPrice(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetProductPrice(*f)
	}
	return oiu
}

// AddProductPrice adds f to the "product_price" field.
func (oiu *OrderItemUpdate) AddProductPrice(f float64) *OrderItemUpdate {
	oiu.mutation.AddProductPrice(f)
	return oiu
}

// SetQuantity sets the "quantity" field.
func (oiu *OrderItemUpdate) SetQuantity(i int) *OrderItemUpdate {
	oiu.mutation.ResetQuantity()
	oiu.mutation.SetQuantity(i)
	return oiu
}

// AddQuantity adds i to the "quantity" field.
func (oiu *OrderItemUpdate) AddQuantity(i int) *OrderItemUpdate {
	oiu.mutation.AddQuantity(i)
	return oiu
}

// SetProductSpecsID sets the "product_specs_id" field.
func (oiu *OrderItemUpdate) SetProductSpecsID(i int) *OrderItemUpdate {
	oiu.mutation.ResetProductSpecsID()
	oiu.mutation.SetProductSpecsID(i)
	return oiu
}

// AddProductSpecsID adds i to the "product_specs_id" field.
func (oiu *OrderItemUpdate) AddProductSpecsID(i int) *OrderItemUpdate {
	oiu.mutation.AddProductSpecsID(i)
	return oiu
}

// SetProductSpecsSn sets the "product_specs_sn" field.
func (oiu *OrderItemUpdate) SetProductSpecsSn(s string) *OrderItemUpdate {
	oiu.mutation.SetProductSpecsSn(s)
	return oiu
}

// SetProductSpecsAttr sets the "product_specs_attr" field.
func (oiu *OrderItemUpdate) SetProductSpecsAttr(s string) *OrderItemUpdate {
	oiu.mutation.SetProductSpecsAttr(s)
	return oiu
}

// SetOrder sets the "order" edge to the Order entity.
func (oiu *OrderItemUpdate) SetOrder(o *Order) *OrderItemUpdate {
	return oiu.SetOrderID(o.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiu *OrderItemUpdate) Mutation() *OrderItemMutation {
	return oiu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oiu *OrderItemUpdate) ClearOrder() *OrderItemUpdate {
	oiu.mutation.ClearOrder()
	return oiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oiu.defaults()
	if len(oiu.hooks) == 0 {
		affected, err = oiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oiu.mutation = mutation
			affected, err = oiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oiu.hooks) - 1; i >= 0; i-- {
			if oiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderItemUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderItemUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiu *OrderItemUpdate) defaults() {
	if _, ok := oiu.mutation.UpdatedAt(); !ok && !oiu.mutation.UpdatedAtCleared() {
		v := orderitem.UpdateDefaultUpdatedAt()
		oiu.mutation.SetUpdatedAt(v)
	}
}

func (oiu *OrderItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitem.FieldID,
			},
		},
	}
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldCreatedAt,
		})
	}
	if oiu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldCreatedAt,
		})
	}
	if value, ok := oiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldUpdatedAt,
		})
	}
	if oiu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldUpdatedAt,
		})
	}
	if value, ok := oiu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldSn,
		})
	}
	if value, ok := oiu.mutation.ProductCateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductCateID,
		})
	}
	if value, ok := oiu.mutation.AddedProductCateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductCateID,
		})
	}
	if value, ok := oiu.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductID,
		})
	}
	if value, ok := oiu.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductID,
		})
	}
	if value, ok := oiu.mutation.ProductPic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldProductPic,
		})
	}
	if value, ok := oiu.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldProductName,
		})
	}
	if value, ok := oiu.mutation.ProductSn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductSn,
		})
	}
	if value, ok := oiu.mutation.AddedProductSn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductSn,
		})
	}
	if value, ok := oiu.mutation.ProductPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldProductPrice,
		})
	}
	if value, ok := oiu.mutation.AddedProductPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldProductPrice,
		})
	}
	if value, ok := oiu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuantity,
		})
	}
	if value, ok := oiu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuantity,
		})
	}
	if value, ok := oiu.mutation.ProductSpecsID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductSpecsID,
		})
	}
	if value, ok := oiu.mutation.AddedProductSpecsID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductSpecsID,
		})
	}
	if value, ok := oiu.mutation.ProductSpecsSn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldProductSpecsSn,
		})
	}
	if value, ok := oiu.mutation.ProductSpecsAttr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldProductSpecsAttr,
		})
	}
	if oiu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderItemUpdateOne is the builder for updating a single OrderItem entity.
type OrderItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderItemMutation
}

// SetCreatedAt sets the "created_at" field.
func (oiuo *OrderItemUpdateOne) SetCreatedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetCreatedAt(t)
	return oiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetCreatedAt(*t)
	}
	return oiuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (oiuo *OrderItemUpdateOne) ClearCreatedAt() *OrderItemUpdateOne {
	oiuo.mutation.ClearCreatedAt()
	return oiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (oiuo *OrderItemUpdateOne) SetUpdatedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetUpdatedAt(t)
	return oiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oiuo *OrderItemUpdateOne) ClearUpdatedAt() *OrderItemUpdateOne {
	oiuo.mutation.ClearUpdatedAt()
	return oiuo
}

// SetOrderID sets the "order_id" field.
func (oiuo *OrderItemUpdateOne) SetOrderID(i int) *OrderItemUpdateOne {
	oiuo.mutation.SetOrderID(i)
	return oiuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableOrderID(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetOrderID(*i)
	}
	return oiuo
}

// ClearOrderID clears the value of the "order_id" field.
func (oiuo *OrderItemUpdateOne) ClearOrderID() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrderID()
	return oiuo
}

// SetSn sets the "sn" field.
func (oiuo *OrderItemUpdateOne) SetSn(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetSn(s)
	return oiuo
}

// SetProductCateID sets the "product_cate_id" field.
func (oiuo *OrderItemUpdateOne) SetProductCateID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetProductCateID()
	oiuo.mutation.SetProductCateID(i)
	return oiuo
}

// AddProductCateID adds i to the "product_cate_id" field.
func (oiuo *OrderItemUpdateOne) AddProductCateID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddProductCateID(i)
	return oiuo
}

// SetProductID sets the "product_id" field.
func (oiuo *OrderItemUpdateOne) SetProductID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetProductID()
	oiuo.mutation.SetProductID(i)
	return oiuo
}

// AddProductID adds i to the "product_id" field.
func (oiuo *OrderItemUpdateOne) AddProductID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddProductID(i)
	return oiuo
}

// SetProductPic sets the "product_pic" field.
func (oiuo *OrderItemUpdateOne) SetProductPic(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetProductPic(s)
	return oiuo
}

// SetProductName sets the "product_name" field.
func (oiuo *OrderItemUpdateOne) SetProductName(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetProductName(s)
	return oiuo
}

// SetProductSn sets the "product_sn" field.
func (oiuo *OrderItemUpdateOne) SetProductSn(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetProductSn()
	oiuo.mutation.SetProductSn(i)
	return oiuo
}

// AddProductSn adds i to the "product_sn" field.
func (oiuo *OrderItemUpdateOne) AddProductSn(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddProductSn(i)
	return oiuo
}

// SetProductPrice sets the "product_price" field.
func (oiuo *OrderItemUpdateOne) SetProductPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetProductPrice()
	oiuo.mutation.SetProductPrice(f)
	return oiuo
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProductPrice(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetProductPrice(*f)
	}
	return oiuo
}

// AddProductPrice adds f to the "product_price" field.
func (oiuo *OrderItemUpdateOne) AddProductPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddProductPrice(f)
	return oiuo
}

// SetQuantity sets the "quantity" field.
func (oiuo *OrderItemUpdateOne) SetQuantity(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetQuantity()
	oiuo.mutation.SetQuantity(i)
	return oiuo
}

// AddQuantity adds i to the "quantity" field.
func (oiuo *OrderItemUpdateOne) AddQuantity(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddQuantity(i)
	return oiuo
}

// SetProductSpecsID sets the "product_specs_id" field.
func (oiuo *OrderItemUpdateOne) SetProductSpecsID(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetProductSpecsID()
	oiuo.mutation.SetProductSpecsID(i)
	return oiuo
}

// AddProductSpecsID adds i to the "product_specs_id" field.
func (oiuo *OrderItemUpdateOne) AddProductSpecsID(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddProductSpecsID(i)
	return oiuo
}

// SetProductSpecsSn sets the "product_specs_sn" field.
func (oiuo *OrderItemUpdateOne) SetProductSpecsSn(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetProductSpecsSn(s)
	return oiuo
}

// SetProductSpecsAttr sets the "product_specs_attr" field.
func (oiuo *OrderItemUpdateOne) SetProductSpecsAttr(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetProductSpecsAttr(s)
	return oiuo
}

// SetOrder sets the "order" edge to the Order entity.
func (oiuo *OrderItemUpdateOne) SetOrder(o *Order) *OrderItemUpdateOne {
	return oiuo.SetOrderID(o.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiuo *OrderItemUpdateOne) Mutation() *OrderItemMutation {
	return oiuo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oiuo *OrderItemUpdateOne) ClearOrder() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrder()
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderItemUpdateOne) Select(field string, fields ...string) *OrderItemUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderItem entity.
func (oiuo *OrderItemUpdateOne) Save(ctx context.Context) (*OrderItem, error) {
	var (
		err  error
		node *OrderItem
	)
	oiuo.defaults()
	if len(oiuo.hooks) == 0 {
		node, err = oiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oiuo.mutation = mutation
			node, err = oiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oiuo.hooks) - 1; i >= 0; i-- {
			if oiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) SaveX(ctx context.Context) *OrderItem {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiuo *OrderItemUpdateOne) defaults() {
	if _, ok := oiuo.mutation.UpdatedAt(); !ok && !oiuo.mutation.UpdatedAtCleared() {
		v := orderitem.UpdateDefaultUpdatedAt()
		oiuo.mutation.SetUpdatedAt(v)
	}
}

func (oiuo *OrderItemUpdateOne) sqlSave(ctx context.Context) (_node *OrderItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderitem.Table,
			Columns: orderitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderitem.FieldID,
			},
		},
	}
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitem.FieldID)
		for _, f := range fields {
			if !orderitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldCreatedAt,
		})
	}
	if oiuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldCreatedAt,
		})
	}
	if value, ok := oiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderitem.FieldUpdatedAt,
		})
	}
	if oiuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderitem.FieldUpdatedAt,
		})
	}
	if value, ok := oiuo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldSn,
		})
	}
	if value, ok := oiuo.mutation.ProductCateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductCateID,
		})
	}
	if value, ok := oiuo.mutation.AddedProductCateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductCateID,
		})
	}
	if value, ok := oiuo.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductID,
		})
	}
	if value, ok := oiuo.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductID,
		})
	}
	if value, ok := oiuo.mutation.ProductPic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldProductPic,
		})
	}
	if value, ok := oiuo.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldProductName,
		})
	}
	if value, ok := oiuo.mutation.ProductSn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductSn,
		})
	}
	if value, ok := oiuo.mutation.AddedProductSn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductSn,
		})
	}
	if value, ok := oiuo.mutation.ProductPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldProductPrice,
		})
	}
	if value, ok := oiuo.mutation.AddedProductPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderitem.FieldProductPrice,
		})
	}
	if value, ok := oiuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuantity,
		})
	}
	if value, ok := oiuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldQuantity,
		})
	}
	if value, ok := oiuo.mutation.ProductSpecsID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductSpecsID,
		})
	}
	if value, ok := oiuo.mutation.AddedProductSpecsID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderitem.FieldProductSpecsID,
		})
	}
	if value, ok := oiuo.mutation.ProductSpecsSn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldProductSpecsSn,
		})
	}
	if value, ok := oiuo.mutation.ProductSpecsAttr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderitem.FieldProductSpecsAttr,
		})
	}
	if oiuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderItem{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
