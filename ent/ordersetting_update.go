// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/ordersetting"
	"orse/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderSettingUpdate is the builder for updating OrderSetting entities.
type OrderSettingUpdate struct {
	config
	hooks    []Hook
	mutation *OrderSettingMutation
}

// Where appends a list predicates to the OrderSettingUpdate builder.
func (osu *OrderSettingUpdate) Where(ps ...predicate.OrderSetting) *OrderSettingUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetCreatedAt sets the "created_at" field.
func (osu *OrderSettingUpdate) SetCreatedAt(t time.Time) *OrderSettingUpdate {
	osu.mutation.SetCreatedAt(t)
	return osu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osu *OrderSettingUpdate) SetNillableCreatedAt(t *time.Time) *OrderSettingUpdate {
	if t != nil {
		osu.SetCreatedAt(*t)
	}
	return osu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (osu *OrderSettingUpdate) ClearCreatedAt() *OrderSettingUpdate {
	osu.mutation.ClearCreatedAt()
	return osu
}

// SetUpdatedAt sets the "updated_at" field.
func (osu *OrderSettingUpdate) SetUpdatedAt(t time.Time) *OrderSettingUpdate {
	osu.mutation.SetUpdatedAt(t)
	return osu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (osu *OrderSettingUpdate) ClearUpdatedAt() *OrderSettingUpdate {
	osu.mutation.ClearUpdatedAt()
	return osu
}

// SetOrderOvertime sets the "order_overtime" field.
func (osu *OrderSettingUpdate) SetOrderOvertime(i int) *OrderSettingUpdate {
	osu.mutation.ResetOrderOvertime()
	osu.mutation.SetOrderOvertime(i)
	return osu
}

// SetNillableOrderOvertime sets the "order_overtime" field if the given value is not nil.
func (osu *OrderSettingUpdate) SetNillableOrderOvertime(i *int) *OrderSettingUpdate {
	if i != nil {
		osu.SetOrderOvertime(*i)
	}
	return osu
}

// AddOrderOvertime adds i to the "order_overtime" field.
func (osu *OrderSettingUpdate) AddOrderOvertime(i int) *OrderSettingUpdate {
	osu.mutation.AddOrderOvertime(i)
	return osu
}

// ClearOrderOvertime clears the value of the "order_overtime" field.
func (osu *OrderSettingUpdate) ClearOrderOvertime() *OrderSettingUpdate {
	osu.mutation.ClearOrderOvertime()
	return osu
}

// SetConfirmOvertime sets the "confirm_overtime" field.
func (osu *OrderSettingUpdate) SetConfirmOvertime(i int) *OrderSettingUpdate {
	osu.mutation.ResetConfirmOvertime()
	osu.mutation.SetConfirmOvertime(i)
	return osu
}

// SetNillableConfirmOvertime sets the "confirm_overtime" field if the given value is not nil.
func (osu *OrderSettingUpdate) SetNillableConfirmOvertime(i *int) *OrderSettingUpdate {
	if i != nil {
		osu.SetConfirmOvertime(*i)
	}
	return osu
}

// AddConfirmOvertime adds i to the "confirm_overtime" field.
func (osu *OrderSettingUpdate) AddConfirmOvertime(i int) *OrderSettingUpdate {
	osu.mutation.AddConfirmOvertime(i)
	return osu
}

// ClearConfirmOvertime clears the value of the "confirm_overtime" field.
func (osu *OrderSettingUpdate) ClearConfirmOvertime() *OrderSettingUpdate {
	osu.mutation.ClearConfirmOvertime()
	return osu
}

// SetFinishOvertime sets the "finish_overtime" field.
func (osu *OrderSettingUpdate) SetFinishOvertime(i int) *OrderSettingUpdate {
	osu.mutation.ResetFinishOvertime()
	osu.mutation.SetFinishOvertime(i)
	return osu
}

// SetNillableFinishOvertime sets the "finish_overtime" field if the given value is not nil.
func (osu *OrderSettingUpdate) SetNillableFinishOvertime(i *int) *OrderSettingUpdate {
	if i != nil {
		osu.SetFinishOvertime(*i)
	}
	return osu
}

// AddFinishOvertime adds i to the "finish_overtime" field.
func (osu *OrderSettingUpdate) AddFinishOvertime(i int) *OrderSettingUpdate {
	osu.mutation.AddFinishOvertime(i)
	return osu
}

// ClearFinishOvertime clears the value of the "finish_overtime" field.
func (osu *OrderSettingUpdate) ClearFinishOvertime() *OrderSettingUpdate {
	osu.mutation.ClearFinishOvertime()
	return osu
}

// SetCommentOvertime sets the "comment_overtime" field.
func (osu *OrderSettingUpdate) SetCommentOvertime(i int) *OrderSettingUpdate {
	osu.mutation.ResetCommentOvertime()
	osu.mutation.SetCommentOvertime(i)
	return osu
}

// SetNillableCommentOvertime sets the "comment_overtime" field if the given value is not nil.
func (osu *OrderSettingUpdate) SetNillableCommentOvertime(i *int) *OrderSettingUpdate {
	if i != nil {
		osu.SetCommentOvertime(*i)
	}
	return osu
}

// AddCommentOvertime adds i to the "comment_overtime" field.
func (osu *OrderSettingUpdate) AddCommentOvertime(i int) *OrderSettingUpdate {
	osu.mutation.AddCommentOvertime(i)
	return osu
}

// ClearCommentOvertime clears the value of the "comment_overtime" field.
func (osu *OrderSettingUpdate) ClearCommentOvertime() *OrderSettingUpdate {
	osu.mutation.ClearCommentOvertime()
	return osu
}

// Mutation returns the OrderSettingMutation object of the builder.
func (osu *OrderSettingUpdate) Mutation() *OrderSettingMutation {
	return osu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrderSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	osu.defaults()
	if len(osu.hooks) == 0 {
		affected, err = osu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			osu.mutation = mutation
			affected, err = osu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(osu.hooks) - 1; i >= 0; i-- {
			if osu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = osu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrderSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrderSettingUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrderSettingUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osu *OrderSettingUpdate) defaults() {
	if _, ok := osu.mutation.UpdatedAt(); !ok && !osu.mutation.UpdatedAtCleared() {
		v := ordersetting.UpdateDefaultUpdatedAt()
		osu.mutation.SetUpdatedAt(v)
	}
}

func (osu *OrderSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordersetting.Table,
			Columns: ordersetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ordersetting.FieldID,
			},
		},
	}
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordersetting.FieldCreatedAt,
		})
	}
	if osu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ordersetting.FieldCreatedAt,
		})
	}
	if value, ok := osu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordersetting.FieldUpdatedAt,
		})
	}
	if osu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ordersetting.FieldUpdatedAt,
		})
	}
	if value, ok := osu.mutation.OrderOvertime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldOrderOvertime,
		})
	}
	if value, ok := osu.mutation.AddedOrderOvertime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldOrderOvertime,
		})
	}
	if osu.mutation.OrderOvertimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ordersetting.FieldOrderOvertime,
		})
	}
	if value, ok := osu.mutation.ConfirmOvertime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldConfirmOvertime,
		})
	}
	if value, ok := osu.mutation.AddedConfirmOvertime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldConfirmOvertime,
		})
	}
	if osu.mutation.ConfirmOvertimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ordersetting.FieldConfirmOvertime,
		})
	}
	if value, ok := osu.mutation.FinishOvertime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldFinishOvertime,
		})
	}
	if value, ok := osu.mutation.AddedFinishOvertime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldFinishOvertime,
		})
	}
	if osu.mutation.FinishOvertimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ordersetting.FieldFinishOvertime,
		})
	}
	if value, ok := osu.mutation.CommentOvertime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldCommentOvertime,
		})
	}
	if value, ok := osu.mutation.AddedCommentOvertime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldCommentOvertime,
		})
	}
	if osu.mutation.CommentOvertimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ordersetting.FieldCommentOvertime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderSettingUpdateOne is the builder for updating a single OrderSetting entity.
type OrderSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderSettingMutation
}

// SetCreatedAt sets the "created_at" field.
func (osuo *OrderSettingUpdateOne) SetCreatedAt(t time.Time) *OrderSettingUpdateOne {
	osuo.mutation.SetCreatedAt(t)
	return osuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osuo *OrderSettingUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderSettingUpdateOne {
	if t != nil {
		osuo.SetCreatedAt(*t)
	}
	return osuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (osuo *OrderSettingUpdateOne) ClearCreatedAt() *OrderSettingUpdateOne {
	osuo.mutation.ClearCreatedAt()
	return osuo
}

// SetUpdatedAt sets the "updated_at" field.
func (osuo *OrderSettingUpdateOne) SetUpdatedAt(t time.Time) *OrderSettingUpdateOne {
	osuo.mutation.SetUpdatedAt(t)
	return osuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (osuo *OrderSettingUpdateOne) ClearUpdatedAt() *OrderSettingUpdateOne {
	osuo.mutation.ClearUpdatedAt()
	return osuo
}

// SetOrderOvertime sets the "order_overtime" field.
func (osuo *OrderSettingUpdateOne) SetOrderOvertime(i int) *OrderSettingUpdateOne {
	osuo.mutation.ResetOrderOvertime()
	osuo.mutation.SetOrderOvertime(i)
	return osuo
}

// SetNillableOrderOvertime sets the "order_overtime" field if the given value is not nil.
func (osuo *OrderSettingUpdateOne) SetNillableOrderOvertime(i *int) *OrderSettingUpdateOne {
	if i != nil {
		osuo.SetOrderOvertime(*i)
	}
	return osuo
}

// AddOrderOvertime adds i to the "order_overtime" field.
func (osuo *OrderSettingUpdateOne) AddOrderOvertime(i int) *OrderSettingUpdateOne {
	osuo.mutation.AddOrderOvertime(i)
	return osuo
}

// ClearOrderOvertime clears the value of the "order_overtime" field.
func (osuo *OrderSettingUpdateOne) ClearOrderOvertime() *OrderSettingUpdateOne {
	osuo.mutation.ClearOrderOvertime()
	return osuo
}

// SetConfirmOvertime sets the "confirm_overtime" field.
func (osuo *OrderSettingUpdateOne) SetConfirmOvertime(i int) *OrderSettingUpdateOne {
	osuo.mutation.ResetConfirmOvertime()
	osuo.mutation.SetConfirmOvertime(i)
	return osuo
}

// SetNillableConfirmOvertime sets the "confirm_overtime" field if the given value is not nil.
func (osuo *OrderSettingUpdateOne) SetNillableConfirmOvertime(i *int) *OrderSettingUpdateOne {
	if i != nil {
		osuo.SetConfirmOvertime(*i)
	}
	return osuo
}

// AddConfirmOvertime adds i to the "confirm_overtime" field.
func (osuo *OrderSettingUpdateOne) AddConfirmOvertime(i int) *OrderSettingUpdateOne {
	osuo.mutation.AddConfirmOvertime(i)
	return osuo
}

// ClearConfirmOvertime clears the value of the "confirm_overtime" field.
func (osuo *OrderSettingUpdateOne) ClearConfirmOvertime() *OrderSettingUpdateOne {
	osuo.mutation.ClearConfirmOvertime()
	return osuo
}

// SetFinishOvertime sets the "finish_overtime" field.
func (osuo *OrderSettingUpdateOne) SetFinishOvertime(i int) *OrderSettingUpdateOne {
	osuo.mutation.ResetFinishOvertime()
	osuo.mutation.SetFinishOvertime(i)
	return osuo
}

// SetNillableFinishOvertime sets the "finish_overtime" field if the given value is not nil.
func (osuo *OrderSettingUpdateOne) SetNillableFinishOvertime(i *int) *OrderSettingUpdateOne {
	if i != nil {
		osuo.SetFinishOvertime(*i)
	}
	return osuo
}

// AddFinishOvertime adds i to the "finish_overtime" field.
func (osuo *OrderSettingUpdateOne) AddFinishOvertime(i int) *OrderSettingUpdateOne {
	osuo.mutation.AddFinishOvertime(i)
	return osuo
}

// ClearFinishOvertime clears the value of the "finish_overtime" field.
func (osuo *OrderSettingUpdateOne) ClearFinishOvertime() *OrderSettingUpdateOne {
	osuo.mutation.ClearFinishOvertime()
	return osuo
}

// SetCommentOvertime sets the "comment_overtime" field.
func (osuo *OrderSettingUpdateOne) SetCommentOvertime(i int) *OrderSettingUpdateOne {
	osuo.mutation.ResetCommentOvertime()
	osuo.mutation.SetCommentOvertime(i)
	return osuo
}

// SetNillableCommentOvertime sets the "comment_overtime" field if the given value is not nil.
func (osuo *OrderSettingUpdateOne) SetNillableCommentOvertime(i *int) *OrderSettingUpdateOne {
	if i != nil {
		osuo.SetCommentOvertime(*i)
	}
	return osuo
}

// AddCommentOvertime adds i to the "comment_overtime" field.
func (osuo *OrderSettingUpdateOne) AddCommentOvertime(i int) *OrderSettingUpdateOne {
	osuo.mutation.AddCommentOvertime(i)
	return osuo
}

// ClearCommentOvertime clears the value of the "comment_overtime" field.
func (osuo *OrderSettingUpdateOne) ClearCommentOvertime() *OrderSettingUpdateOne {
	osuo.mutation.ClearCommentOvertime()
	return osuo
}

// Mutation returns the OrderSettingMutation object of the builder.
func (osuo *OrderSettingUpdateOne) Mutation() *OrderSettingMutation {
	return osuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrderSettingUpdateOne) Select(field string, fields ...string) *OrderSettingUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrderSetting entity.
func (osuo *OrderSettingUpdateOne) Save(ctx context.Context) (*OrderSetting, error) {
	var (
		err  error
		node *OrderSetting
	)
	osuo.defaults()
	if len(osuo.hooks) == 0 {
		node, err = osuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			osuo.mutation = mutation
			node, err = osuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(osuo.hooks) - 1; i >= 0; i-- {
			if osuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = osuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrderSettingUpdateOne) SaveX(ctx context.Context) *OrderSetting {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrderSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrderSettingUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osuo *OrderSettingUpdateOne) defaults() {
	if _, ok := osuo.mutation.UpdatedAt(); !ok && !osuo.mutation.UpdatedAtCleared() {
		v := ordersetting.UpdateDefaultUpdatedAt()
		osuo.mutation.SetUpdatedAt(v)
	}
}

func (osuo *OrderSettingUpdateOne) sqlSave(ctx context.Context) (_node *OrderSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordersetting.Table,
			Columns: ordersetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ordersetting.FieldID,
			},
		},
	}
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderSetting.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordersetting.FieldID)
		for _, f := range fields {
			if !ordersetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordersetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordersetting.FieldCreatedAt,
		})
	}
	if osuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ordersetting.FieldCreatedAt,
		})
	}
	if value, ok := osuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordersetting.FieldUpdatedAt,
		})
	}
	if osuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ordersetting.FieldUpdatedAt,
		})
	}
	if value, ok := osuo.mutation.OrderOvertime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldOrderOvertime,
		})
	}
	if value, ok := osuo.mutation.AddedOrderOvertime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldOrderOvertime,
		})
	}
	if osuo.mutation.OrderOvertimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ordersetting.FieldOrderOvertime,
		})
	}
	if value, ok := osuo.mutation.ConfirmOvertime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldConfirmOvertime,
		})
	}
	if value, ok := osuo.mutation.AddedConfirmOvertime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldConfirmOvertime,
		})
	}
	if osuo.mutation.ConfirmOvertimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ordersetting.FieldConfirmOvertime,
		})
	}
	if value, ok := osuo.mutation.FinishOvertime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldFinishOvertime,
		})
	}
	if value, ok := osuo.mutation.AddedFinishOvertime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldFinishOvertime,
		})
	}
	if osuo.mutation.FinishOvertimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ordersetting.FieldFinishOvertime,
		})
	}
	if value, ok := osuo.mutation.CommentOvertime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldCommentOvertime,
		})
	}
	if value, ok := osuo.mutation.AddedCommentOvertime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldCommentOvertime,
		})
	}
	if osuo.mutation.CommentOvertimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ordersetting.FieldCommentOvertime,
		})
	}
	_node = &OrderSetting{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
