// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/order"
	"orse/ent/orderamounts"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// OrderAmounts is the model entity for the OrderAmounts schema.
type OrderAmounts struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// TotalAmount holds the value of the "total_amount" field.
	// 订单总金额
	TotalAmount float64 `json:"total_amount,omitempty"`
	// PayAmount holds the value of the "pay_amount" field.
	// 应付金额（实际支付金额）
	PayAmount float64 `json:"pay_amount,omitempty"`
	// FreightAmount holds the value of the "freight_amount" field.
	// 运费金额
	FreightAmount float64 `json:"freight_amount,omitempty"`
	// PromotionAmount holds the value of the "promotion_amount" field.
	// 促销金额
	PromotionAmount float64 `json:"promotion_amount,omitempty"`
	// IntegrationAmount holds the value of the "integration_amount" field.
	// 积分抵扣金额
	IntegrationAmount float64 `json:"integration_amount,omitempty"`
	// CouponID holds the value of the "coupon_id" field.
	// 优惠券id
	CouponID int `json:"coupon_id,omitempty"`
	// CouponAmount holds the value of the "coupon_amount" field.
	// 优惠券抵扣金额
	CouponAmount float64 `json:"coupon_amount,omitempty"`
	// DiscountAmount holds the value of the "discount_amount" field.
	// 操作人减免的订单金额
	DiscountAmount float64 `json:"discount_amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderAmountsQuery when eager-loading is set.
	Edges OrderAmountsEdges `json:"edges"`
}

// OrderAmountsEdges holds the relations/edges for other nodes in the graph.
type OrderAmountsEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderAmountsEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// The edge order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderAmounts) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderamounts.FieldTotalAmount, orderamounts.FieldPayAmount, orderamounts.FieldFreightAmount, orderamounts.FieldPromotionAmount, orderamounts.FieldIntegrationAmount, orderamounts.FieldCouponAmount, orderamounts.FieldDiscountAmount:
			values[i] = new(sql.NullFloat64)
		case orderamounts.FieldID, orderamounts.FieldOrderID, orderamounts.FieldCouponID:
			values[i] = new(sql.NullInt64)
		case orderamounts.FieldCreatedAt, orderamounts.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderAmounts", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderAmounts fields.
func (oa *OrderAmounts) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderamounts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oa.ID = int(value.Int64)
		case orderamounts.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oa.CreatedAt = value.Time
			}
		case orderamounts.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oa.UpdatedAt = value.Time
			}
		case orderamounts.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				oa.OrderID = int(value.Int64)
			}
		case orderamounts.FieldTotalAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[i])
			} else if value.Valid {
				oa.TotalAmount = value.Float64
			}
		case orderamounts.FieldPayAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_amount", values[i])
			} else if value.Valid {
				oa.PayAmount = value.Float64
			}
		case orderamounts.FieldFreightAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field freight_amount", values[i])
			} else if value.Valid {
				oa.FreightAmount = value.Float64
			}
		case orderamounts.FieldPromotionAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field promotion_amount", values[i])
			} else if value.Valid {
				oa.PromotionAmount = value.Float64
			}
		case orderamounts.FieldIntegrationAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field integration_amount", values[i])
			} else if value.Valid {
				oa.IntegrationAmount = value.Float64
			}
		case orderamounts.FieldCouponID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_id", values[i])
			} else if value.Valid {
				oa.CouponID = int(value.Int64)
			}
		case orderamounts.FieldCouponAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_amount", values[i])
			} else if value.Valid {
				oa.CouponAmount = value.Float64
			}
		case orderamounts.FieldDiscountAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_amount", values[i])
			} else if value.Valid {
				oa.DiscountAmount = value.Float64
			}
		}
	}
	return nil
}

// QueryOrder queries the "order" edge of the OrderAmounts entity.
func (oa *OrderAmounts) QueryOrder() *OrderQuery {
	return (&OrderAmountsClient{config: oa.config}).QueryOrder(oa)
}

// Update returns a builder for updating this OrderAmounts.
// Note that you need to call OrderAmounts.Unwrap() before calling this method if this OrderAmounts
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OrderAmounts) Update() *OrderAmountsUpdateOne {
	return (&OrderAmountsClient{config: oa.config}).UpdateOne(oa)
}

// Unwrap unwraps the OrderAmounts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OrderAmounts) Unwrap() *OrderAmounts {
	tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderAmounts is not a transactional entity")
	}
	oa.config.driver = tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OrderAmounts) String() string {
	var builder strings.Builder
	builder.WriteString("OrderAmounts(")
	builder.WriteString(fmt.Sprintf("id=%v", oa.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(oa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(oa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OrderID))
	builder.WriteString(", total_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.TotalAmount))
	builder.WriteString(", pay_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.PayAmount))
	builder.WriteString(", freight_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.FreightAmount))
	builder.WriteString(", promotion_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.PromotionAmount))
	builder.WriteString(", integration_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.IntegrationAmount))
	builder.WriteString(", coupon_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.CouponID))
	builder.WriteString(", coupon_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.CouponAmount))
	builder.WriteString(", discount_amount=")
	builder.WriteString(fmt.Sprintf("%v", oa.DiscountAmount))
	builder.WriteByte(')')
	return builder.String()
}

// OrderAmountsSlice is a parsable slice of OrderAmounts.
type OrderAmountsSlice []*OrderAmounts

func (oa OrderAmountsSlice) config(cfg config) {
	for _i := range oa {
		oa[_i].config = cfg
	}
}
