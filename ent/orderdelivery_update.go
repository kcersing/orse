// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/order"
	"orse/ent/orderdelivery"
	"orse/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderDeliveryUpdate is the builder for updating OrderDelivery entities.
type OrderDeliveryUpdate struct {
	config
	hooks    []Hook
	mutation *OrderDeliveryMutation
}

// Where appends a list predicates to the OrderDeliveryUpdate builder.
func (odu *OrderDeliveryUpdate) Where(ps ...predicate.OrderDelivery) *OrderDeliveryUpdate {
	odu.mutation.Where(ps...)
	return odu
}

// SetCreatedAt sets the "created_at" field.
func (odu *OrderDeliveryUpdate) SetCreatedAt(t time.Time) *OrderDeliveryUpdate {
	odu.mutation.SetCreatedAt(t)
	return odu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableCreatedAt(t *time.Time) *OrderDeliveryUpdate {
	if t != nil {
		odu.SetCreatedAt(*t)
	}
	return odu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (odu *OrderDeliveryUpdate) ClearCreatedAt() *OrderDeliveryUpdate {
	odu.mutation.ClearCreatedAt()
	return odu
}

// SetUpdatedAt sets the "updated_at" field.
func (odu *OrderDeliveryUpdate) SetUpdatedAt(t time.Time) *OrderDeliveryUpdate {
	odu.mutation.SetUpdatedAt(t)
	return odu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (odu *OrderDeliveryUpdate) ClearUpdatedAt() *OrderDeliveryUpdate {
	odu.mutation.ClearUpdatedAt()
	return odu
}

// SetOrderID sets the "order_id" field.
func (odu *OrderDeliveryUpdate) SetOrderID(i int) *OrderDeliveryUpdate {
	odu.mutation.SetOrderID(i)
	return odu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableOrderID(i *int) *OrderDeliveryUpdate {
	if i != nil {
		odu.SetOrderID(*i)
	}
	return odu
}

// ClearOrderID clears the value of the "order_id" field.
func (odu *OrderDeliveryUpdate) ClearOrderID() *OrderDeliveryUpdate {
	odu.mutation.ClearOrderID()
	return odu
}

// SetSn sets the "sn" field.
func (odu *OrderDeliveryUpdate) SetSn(s string) *OrderDeliveryUpdate {
	odu.mutation.SetSn(s)
	return odu
}

// SetDeliveryCompany sets the "delivery_company" field.
func (odu *OrderDeliveryUpdate) SetDeliveryCompany(s string) *OrderDeliveryUpdate {
	odu.mutation.SetDeliveryCompany(s)
	return odu
}

// SetNillableDeliveryCompany sets the "delivery_company" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableDeliveryCompany(s *string) *OrderDeliveryUpdate {
	if s != nil {
		odu.SetDeliveryCompany(*s)
	}
	return odu
}

// ClearDeliveryCompany clears the value of the "delivery_company" field.
func (odu *OrderDeliveryUpdate) ClearDeliveryCompany() *OrderDeliveryUpdate {
	odu.mutation.ClearDeliveryCompany()
	return odu
}

// SetDeliveryTime sets the "delivery_time" field.
func (odu *OrderDeliveryUpdate) SetDeliveryTime(t time.Time) *OrderDeliveryUpdate {
	odu.mutation.SetDeliveryTime(t)
	return odu
}

// SetNillableDeliveryTime sets the "delivery_time" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableDeliveryTime(t *time.Time) *OrderDeliveryUpdate {
	if t != nil {
		odu.SetDeliveryTime(*t)
	}
	return odu
}

// ClearDeliveryTime clears the value of the "delivery_time" field.
func (odu *OrderDeliveryUpdate) ClearDeliveryTime() *OrderDeliveryUpdate {
	odu.mutation.ClearDeliveryTime()
	return odu
}

// SetReceiverName sets the "receiver_name" field.
func (odu *OrderDeliveryUpdate) SetReceiverName(s string) *OrderDeliveryUpdate {
	odu.mutation.SetReceiverName(s)
	return odu
}

// SetNillableReceiverName sets the "receiver_name" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableReceiverName(s *string) *OrderDeliveryUpdate {
	if s != nil {
		odu.SetReceiverName(*s)
	}
	return odu
}

// ClearReceiverName clears the value of the "receiver_name" field.
func (odu *OrderDeliveryUpdate) ClearReceiverName() *OrderDeliveryUpdate {
	odu.mutation.ClearReceiverName()
	return odu
}

// SetReceiverPhone sets the "receiver_phone" field.
func (odu *OrderDeliveryUpdate) SetReceiverPhone(s string) *OrderDeliveryUpdate {
	odu.mutation.SetReceiverPhone(s)
	return odu
}

// SetNillableReceiverPhone sets the "receiver_phone" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableReceiverPhone(s *string) *OrderDeliveryUpdate {
	if s != nil {
		odu.SetReceiverPhone(*s)
	}
	return odu
}

// ClearReceiverPhone clears the value of the "receiver_phone" field.
func (odu *OrderDeliveryUpdate) ClearReceiverPhone() *OrderDeliveryUpdate {
	odu.mutation.ClearReceiverPhone()
	return odu
}

// SetReceiverPostCode sets the "receiver_post_code" field.
func (odu *OrderDeliveryUpdate) SetReceiverPostCode(s string) *OrderDeliveryUpdate {
	odu.mutation.SetReceiverPostCode(s)
	return odu
}

// SetNillableReceiverPostCode sets the "receiver_post_code" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableReceiverPostCode(s *string) *OrderDeliveryUpdate {
	if s != nil {
		odu.SetReceiverPostCode(*s)
	}
	return odu
}

// ClearReceiverPostCode clears the value of the "receiver_post_code" field.
func (odu *OrderDeliveryUpdate) ClearReceiverPostCode() *OrderDeliveryUpdate {
	odu.mutation.ClearReceiverPostCode()
	return odu
}

// SetReceiverProvince sets the "receiver_province" field.
func (odu *OrderDeliveryUpdate) SetReceiverProvince(s string) *OrderDeliveryUpdate {
	odu.mutation.SetReceiverProvince(s)
	return odu
}

// SetNillableReceiverProvince sets the "receiver_province" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableReceiverProvince(s *string) *OrderDeliveryUpdate {
	if s != nil {
		odu.SetReceiverProvince(*s)
	}
	return odu
}

// ClearReceiverProvince clears the value of the "receiver_province" field.
func (odu *OrderDeliveryUpdate) ClearReceiverProvince() *OrderDeliveryUpdate {
	odu.mutation.ClearReceiverProvince()
	return odu
}

// SetReceiverCity sets the "receiver_city" field.
func (odu *OrderDeliveryUpdate) SetReceiverCity(s string) *OrderDeliveryUpdate {
	odu.mutation.SetReceiverCity(s)
	return odu
}

// SetNillableReceiverCity sets the "receiver_city" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableReceiverCity(s *string) *OrderDeliveryUpdate {
	if s != nil {
		odu.SetReceiverCity(*s)
	}
	return odu
}

// ClearReceiverCity clears the value of the "receiver_city" field.
func (odu *OrderDeliveryUpdate) ClearReceiverCity() *OrderDeliveryUpdate {
	odu.mutation.ClearReceiverCity()
	return odu
}

// SetReceiverRegion sets the "receiver_region" field.
func (odu *OrderDeliveryUpdate) SetReceiverRegion(s string) *OrderDeliveryUpdate {
	odu.mutation.SetReceiverRegion(s)
	return odu
}

// SetNillableReceiverRegion sets the "receiver_region" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableReceiverRegion(s *string) *OrderDeliveryUpdate {
	if s != nil {
		odu.SetReceiverRegion(*s)
	}
	return odu
}

// ClearReceiverRegion clears the value of the "receiver_region" field.
func (odu *OrderDeliveryUpdate) ClearReceiverRegion() *OrderDeliveryUpdate {
	odu.mutation.ClearReceiverRegion()
	return odu
}

// SetReceiverDetailAddress sets the "receiver_detail_address" field.
func (odu *OrderDeliveryUpdate) SetReceiverDetailAddress(s string) *OrderDeliveryUpdate {
	odu.mutation.SetReceiverDetailAddress(s)
	return odu
}

// SetNillableReceiverDetailAddress sets the "receiver_detail_address" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableReceiverDetailAddress(s *string) *OrderDeliveryUpdate {
	if s != nil {
		odu.SetReceiverDetailAddress(*s)
	}
	return odu
}

// ClearReceiverDetailAddress clears the value of the "receiver_detail_address" field.
func (odu *OrderDeliveryUpdate) ClearReceiverDetailAddress() *OrderDeliveryUpdate {
	odu.mutation.ClearReceiverDetailAddress()
	return odu
}

// SetReceiveTime sets the "receive_time" field.
func (odu *OrderDeliveryUpdate) SetReceiveTime(t time.Time) *OrderDeliveryUpdate {
	odu.mutation.SetReceiveTime(t)
	return odu
}

// SetNillableReceiveTime sets the "receive_time" field if the given value is not nil.
func (odu *OrderDeliveryUpdate) SetNillableReceiveTime(t *time.Time) *OrderDeliveryUpdate {
	if t != nil {
		odu.SetReceiveTime(*t)
	}
	return odu
}

// ClearReceiveTime clears the value of the "receive_time" field.
func (odu *OrderDeliveryUpdate) ClearReceiveTime() *OrderDeliveryUpdate {
	odu.mutation.ClearReceiveTime()
	return odu
}

// SetOrder sets the "order" edge to the Order entity.
func (odu *OrderDeliveryUpdate) SetOrder(o *Order) *OrderDeliveryUpdate {
	return odu.SetOrderID(o.ID)
}

// Mutation returns the OrderDeliveryMutation object of the builder.
func (odu *OrderDeliveryUpdate) Mutation() *OrderDeliveryMutation {
	return odu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (odu *OrderDeliveryUpdate) ClearOrder() *OrderDeliveryUpdate {
	odu.mutation.ClearOrder()
	return odu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (odu *OrderDeliveryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	odu.defaults()
	if len(odu.hooks) == 0 {
		affected, err = odu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderDeliveryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			odu.mutation = mutation
			affected, err = odu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(odu.hooks) - 1; i >= 0; i-- {
			if odu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = odu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, odu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (odu *OrderDeliveryUpdate) SaveX(ctx context.Context) int {
	affected, err := odu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (odu *OrderDeliveryUpdate) Exec(ctx context.Context) error {
	_, err := odu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odu *OrderDeliveryUpdate) ExecX(ctx context.Context) {
	if err := odu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (odu *OrderDeliveryUpdate) defaults() {
	if _, ok := odu.mutation.UpdatedAt(); !ok && !odu.mutation.UpdatedAtCleared() {
		v := orderdelivery.UpdateDefaultUpdatedAt()
		odu.mutation.SetUpdatedAt(v)
	}
}

func (odu *OrderDeliveryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderdelivery.Table,
			Columns: orderdelivery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderdelivery.FieldID,
			},
		},
	}
	if ps := odu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := odu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldCreatedAt,
		})
	}
	if odu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderdelivery.FieldCreatedAt,
		})
	}
	if value, ok := odu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldUpdatedAt,
		})
	}
	if odu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderdelivery.FieldUpdatedAt,
		})
	}
	if value, ok := odu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldSn,
		})
	}
	if value, ok := odu.mutation.DeliveryCompany(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldDeliveryCompany,
		})
	}
	if odu.mutation.DeliveryCompanyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldDeliveryCompany,
		})
	}
	if value, ok := odu.mutation.DeliveryTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldDeliveryTime,
		})
	}
	if odu.mutation.DeliveryTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderdelivery.FieldDeliveryTime,
		})
	}
	if value, ok := odu.mutation.ReceiverName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverName,
		})
	}
	if odu.mutation.ReceiverNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverName,
		})
	}
	if value, ok := odu.mutation.ReceiverPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverPhone,
		})
	}
	if odu.mutation.ReceiverPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverPhone,
		})
	}
	if value, ok := odu.mutation.ReceiverPostCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverPostCode,
		})
	}
	if odu.mutation.ReceiverPostCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverPostCode,
		})
	}
	if value, ok := odu.mutation.ReceiverProvince(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverProvince,
		})
	}
	if odu.mutation.ReceiverProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverProvince,
		})
	}
	if value, ok := odu.mutation.ReceiverCity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverCity,
		})
	}
	if odu.mutation.ReceiverCityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverCity,
		})
	}
	if value, ok := odu.mutation.ReceiverRegion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverRegion,
		})
	}
	if odu.mutation.ReceiverRegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverRegion,
		})
	}
	if value, ok := odu.mutation.ReceiverDetailAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverDetailAddress,
		})
	}
	if odu.mutation.ReceiverDetailAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverDetailAddress,
		})
	}
	if value, ok := odu.mutation.ReceiveTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldReceiveTime,
		})
	}
	if odu.mutation.ReceiveTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderdelivery.FieldReceiveTime,
		})
	}
	if odu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdelivery.OrderTable,
			Columns: []string{orderdelivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := odu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdelivery.OrderTable,
			Columns: []string{orderdelivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, odu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderdelivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderDeliveryUpdateOne is the builder for updating a single OrderDelivery entity.
type OrderDeliveryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderDeliveryMutation
}

// SetCreatedAt sets the "created_at" field.
func (oduo *OrderDeliveryUpdateOne) SetCreatedAt(t time.Time) *OrderDeliveryUpdateOne {
	oduo.mutation.SetCreatedAt(t)
	return oduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderDeliveryUpdateOne {
	if t != nil {
		oduo.SetCreatedAt(*t)
	}
	return oduo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (oduo *OrderDeliveryUpdateOne) ClearCreatedAt() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearCreatedAt()
	return oduo
}

// SetUpdatedAt sets the "updated_at" field.
func (oduo *OrderDeliveryUpdateOne) SetUpdatedAt(t time.Time) *OrderDeliveryUpdateOne {
	oduo.mutation.SetUpdatedAt(t)
	return oduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oduo *OrderDeliveryUpdateOne) ClearUpdatedAt() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearUpdatedAt()
	return oduo
}

// SetOrderID sets the "order_id" field.
func (oduo *OrderDeliveryUpdateOne) SetOrderID(i int) *OrderDeliveryUpdateOne {
	oduo.mutation.SetOrderID(i)
	return oduo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableOrderID(i *int) *OrderDeliveryUpdateOne {
	if i != nil {
		oduo.SetOrderID(*i)
	}
	return oduo
}

// ClearOrderID clears the value of the "order_id" field.
func (oduo *OrderDeliveryUpdateOne) ClearOrderID() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearOrderID()
	return oduo
}

// SetSn sets the "sn" field.
func (oduo *OrderDeliveryUpdateOne) SetSn(s string) *OrderDeliveryUpdateOne {
	oduo.mutation.SetSn(s)
	return oduo
}

// SetDeliveryCompany sets the "delivery_company" field.
func (oduo *OrderDeliveryUpdateOne) SetDeliveryCompany(s string) *OrderDeliveryUpdateOne {
	oduo.mutation.SetDeliveryCompany(s)
	return oduo
}

// SetNillableDeliveryCompany sets the "delivery_company" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableDeliveryCompany(s *string) *OrderDeliveryUpdateOne {
	if s != nil {
		oduo.SetDeliveryCompany(*s)
	}
	return oduo
}

// ClearDeliveryCompany clears the value of the "delivery_company" field.
func (oduo *OrderDeliveryUpdateOne) ClearDeliveryCompany() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearDeliveryCompany()
	return oduo
}

// SetDeliveryTime sets the "delivery_time" field.
func (oduo *OrderDeliveryUpdateOne) SetDeliveryTime(t time.Time) *OrderDeliveryUpdateOne {
	oduo.mutation.SetDeliveryTime(t)
	return oduo
}

// SetNillableDeliveryTime sets the "delivery_time" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableDeliveryTime(t *time.Time) *OrderDeliveryUpdateOne {
	if t != nil {
		oduo.SetDeliveryTime(*t)
	}
	return oduo
}

// ClearDeliveryTime clears the value of the "delivery_time" field.
func (oduo *OrderDeliveryUpdateOne) ClearDeliveryTime() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearDeliveryTime()
	return oduo
}

// SetReceiverName sets the "receiver_name" field.
func (oduo *OrderDeliveryUpdateOne) SetReceiverName(s string) *OrderDeliveryUpdateOne {
	oduo.mutation.SetReceiverName(s)
	return oduo
}

// SetNillableReceiverName sets the "receiver_name" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableReceiverName(s *string) *OrderDeliveryUpdateOne {
	if s != nil {
		oduo.SetReceiverName(*s)
	}
	return oduo
}

// ClearReceiverName clears the value of the "receiver_name" field.
func (oduo *OrderDeliveryUpdateOne) ClearReceiverName() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearReceiverName()
	return oduo
}

// SetReceiverPhone sets the "receiver_phone" field.
func (oduo *OrderDeliveryUpdateOne) SetReceiverPhone(s string) *OrderDeliveryUpdateOne {
	oduo.mutation.SetReceiverPhone(s)
	return oduo
}

// SetNillableReceiverPhone sets the "receiver_phone" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableReceiverPhone(s *string) *OrderDeliveryUpdateOne {
	if s != nil {
		oduo.SetReceiverPhone(*s)
	}
	return oduo
}

// ClearReceiverPhone clears the value of the "receiver_phone" field.
func (oduo *OrderDeliveryUpdateOne) ClearReceiverPhone() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearReceiverPhone()
	return oduo
}

// SetReceiverPostCode sets the "receiver_post_code" field.
func (oduo *OrderDeliveryUpdateOne) SetReceiverPostCode(s string) *OrderDeliveryUpdateOne {
	oduo.mutation.SetReceiverPostCode(s)
	return oduo
}

// SetNillableReceiverPostCode sets the "receiver_post_code" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableReceiverPostCode(s *string) *OrderDeliveryUpdateOne {
	if s != nil {
		oduo.SetReceiverPostCode(*s)
	}
	return oduo
}

// ClearReceiverPostCode clears the value of the "receiver_post_code" field.
func (oduo *OrderDeliveryUpdateOne) ClearReceiverPostCode() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearReceiverPostCode()
	return oduo
}

// SetReceiverProvince sets the "receiver_province" field.
func (oduo *OrderDeliveryUpdateOne) SetReceiverProvince(s string) *OrderDeliveryUpdateOne {
	oduo.mutation.SetReceiverProvince(s)
	return oduo
}

// SetNillableReceiverProvince sets the "receiver_province" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableReceiverProvince(s *string) *OrderDeliveryUpdateOne {
	if s != nil {
		oduo.SetReceiverProvince(*s)
	}
	return oduo
}

// ClearReceiverProvince clears the value of the "receiver_province" field.
func (oduo *OrderDeliveryUpdateOne) ClearReceiverProvince() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearReceiverProvince()
	return oduo
}

// SetReceiverCity sets the "receiver_city" field.
func (oduo *OrderDeliveryUpdateOne) SetReceiverCity(s string) *OrderDeliveryUpdateOne {
	oduo.mutation.SetReceiverCity(s)
	return oduo
}

// SetNillableReceiverCity sets the "receiver_city" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableReceiverCity(s *string) *OrderDeliveryUpdateOne {
	if s != nil {
		oduo.SetReceiverCity(*s)
	}
	return oduo
}

// ClearReceiverCity clears the value of the "receiver_city" field.
func (oduo *OrderDeliveryUpdateOne) ClearReceiverCity() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearReceiverCity()
	return oduo
}

// SetReceiverRegion sets the "receiver_region" field.
func (oduo *OrderDeliveryUpdateOne) SetReceiverRegion(s string) *OrderDeliveryUpdateOne {
	oduo.mutation.SetReceiverRegion(s)
	return oduo
}

// SetNillableReceiverRegion sets the "receiver_region" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableReceiverRegion(s *string) *OrderDeliveryUpdateOne {
	if s != nil {
		oduo.SetReceiverRegion(*s)
	}
	return oduo
}

// ClearReceiverRegion clears the value of the "receiver_region" field.
func (oduo *OrderDeliveryUpdateOne) ClearReceiverRegion() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearReceiverRegion()
	return oduo
}

// SetReceiverDetailAddress sets the "receiver_detail_address" field.
func (oduo *OrderDeliveryUpdateOne) SetReceiverDetailAddress(s string) *OrderDeliveryUpdateOne {
	oduo.mutation.SetReceiverDetailAddress(s)
	return oduo
}

// SetNillableReceiverDetailAddress sets the "receiver_detail_address" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableReceiverDetailAddress(s *string) *OrderDeliveryUpdateOne {
	if s != nil {
		oduo.SetReceiverDetailAddress(*s)
	}
	return oduo
}

// ClearReceiverDetailAddress clears the value of the "receiver_detail_address" field.
func (oduo *OrderDeliveryUpdateOne) ClearReceiverDetailAddress() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearReceiverDetailAddress()
	return oduo
}

// SetReceiveTime sets the "receive_time" field.
func (oduo *OrderDeliveryUpdateOne) SetReceiveTime(t time.Time) *OrderDeliveryUpdateOne {
	oduo.mutation.SetReceiveTime(t)
	return oduo
}

// SetNillableReceiveTime sets the "receive_time" field if the given value is not nil.
func (oduo *OrderDeliveryUpdateOne) SetNillableReceiveTime(t *time.Time) *OrderDeliveryUpdateOne {
	if t != nil {
		oduo.SetReceiveTime(*t)
	}
	return oduo
}

// ClearReceiveTime clears the value of the "receive_time" field.
func (oduo *OrderDeliveryUpdateOne) ClearReceiveTime() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearReceiveTime()
	return oduo
}

// SetOrder sets the "order" edge to the Order entity.
func (oduo *OrderDeliveryUpdateOne) SetOrder(o *Order) *OrderDeliveryUpdateOne {
	return oduo.SetOrderID(o.ID)
}

// Mutation returns the OrderDeliveryMutation object of the builder.
func (oduo *OrderDeliveryUpdateOne) Mutation() *OrderDeliveryMutation {
	return oduo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oduo *OrderDeliveryUpdateOne) ClearOrder() *OrderDeliveryUpdateOne {
	oduo.mutation.ClearOrder()
	return oduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oduo *OrderDeliveryUpdateOne) Select(field string, fields ...string) *OrderDeliveryUpdateOne {
	oduo.fields = append([]string{field}, fields...)
	return oduo
}

// Save executes the query and returns the updated OrderDelivery entity.
func (oduo *OrderDeliveryUpdateOne) Save(ctx context.Context) (*OrderDelivery, error) {
	var (
		err  error
		node *OrderDelivery
	)
	oduo.defaults()
	if len(oduo.hooks) == 0 {
		node, err = oduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderDeliveryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oduo.mutation = mutation
			node, err = oduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oduo.hooks) - 1; i >= 0; i-- {
			if oduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oduo *OrderDeliveryUpdateOne) SaveX(ctx context.Context) *OrderDelivery {
	node, err := oduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oduo *OrderDeliveryUpdateOne) Exec(ctx context.Context) error {
	_, err := oduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oduo *OrderDeliveryUpdateOne) ExecX(ctx context.Context) {
	if err := oduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oduo *OrderDeliveryUpdateOne) defaults() {
	if _, ok := oduo.mutation.UpdatedAt(); !ok && !oduo.mutation.UpdatedAtCleared() {
		v := orderdelivery.UpdateDefaultUpdatedAt()
		oduo.mutation.SetUpdatedAt(v)
	}
}

func (oduo *OrderDeliveryUpdateOne) sqlSave(ctx context.Context) (_node *OrderDelivery, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderdelivery.Table,
			Columns: orderdelivery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderdelivery.FieldID,
			},
		},
	}
	id, ok := oduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderDelivery.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderdelivery.FieldID)
		for _, f := range fields {
			if !orderdelivery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderdelivery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldCreatedAt,
		})
	}
	if oduo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderdelivery.FieldCreatedAt,
		})
	}
	if value, ok := oduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldUpdatedAt,
		})
	}
	if oduo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderdelivery.FieldUpdatedAt,
		})
	}
	if value, ok := oduo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldSn,
		})
	}
	if value, ok := oduo.mutation.DeliveryCompany(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldDeliveryCompany,
		})
	}
	if oduo.mutation.DeliveryCompanyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldDeliveryCompany,
		})
	}
	if value, ok := oduo.mutation.DeliveryTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldDeliveryTime,
		})
	}
	if oduo.mutation.DeliveryTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderdelivery.FieldDeliveryTime,
		})
	}
	if value, ok := oduo.mutation.ReceiverName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverName,
		})
	}
	if oduo.mutation.ReceiverNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverName,
		})
	}
	if value, ok := oduo.mutation.ReceiverPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverPhone,
		})
	}
	if oduo.mutation.ReceiverPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverPhone,
		})
	}
	if value, ok := oduo.mutation.ReceiverPostCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverPostCode,
		})
	}
	if oduo.mutation.ReceiverPostCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverPostCode,
		})
	}
	if value, ok := oduo.mutation.ReceiverProvince(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverProvince,
		})
	}
	if oduo.mutation.ReceiverProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverProvince,
		})
	}
	if value, ok := oduo.mutation.ReceiverCity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverCity,
		})
	}
	if oduo.mutation.ReceiverCityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverCity,
		})
	}
	if value, ok := oduo.mutation.ReceiverRegion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverRegion,
		})
	}
	if oduo.mutation.ReceiverRegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverRegion,
		})
	}
	if value, ok := oduo.mutation.ReceiverDetailAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverDetailAddress,
		})
	}
	if oduo.mutation.ReceiverDetailAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderdelivery.FieldReceiverDetailAddress,
		})
	}
	if value, ok := oduo.mutation.ReceiveTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldReceiveTime,
		})
	}
	if oduo.mutation.ReceiveTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderdelivery.FieldReceiveTime,
		})
	}
	if oduo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdelivery.OrderTable,
			Columns: []string{orderdelivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oduo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdelivery.OrderTable,
			Columns: []string{orderdelivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderDelivery{config: oduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderdelivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
