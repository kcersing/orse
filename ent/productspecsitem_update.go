// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/predicate"
	"orse/ent/productattributevalue"
	"orse/ent/productspecs"
	"orse/ent/productspecsitem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductSpecsItemUpdate is the builder for updating ProductSpecsItem entities.
type ProductSpecsItemUpdate struct {
	config
	hooks    []Hook
	mutation *ProductSpecsItemMutation
}

// Where appends a list predicates to the ProductSpecsItemUpdate builder.
func (psiu *ProductSpecsItemUpdate) Where(ps ...predicate.ProductSpecsItem) *ProductSpecsItemUpdate {
	psiu.mutation.Where(ps...)
	return psiu
}

// SetCreatedAt sets the "created_at" field.
func (psiu *ProductSpecsItemUpdate) SetCreatedAt(t time.Time) *ProductSpecsItemUpdate {
	psiu.mutation.SetCreatedAt(t)
	return psiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psiu *ProductSpecsItemUpdate) SetNillableCreatedAt(t *time.Time) *ProductSpecsItemUpdate {
	if t != nil {
		psiu.SetCreatedAt(*t)
	}
	return psiu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (psiu *ProductSpecsItemUpdate) ClearCreatedAt() *ProductSpecsItemUpdate {
	psiu.mutation.ClearCreatedAt()
	return psiu
}

// SetUpdatedAt sets the "updated_at" field.
func (psiu *ProductSpecsItemUpdate) SetUpdatedAt(t time.Time) *ProductSpecsItemUpdate {
	psiu.mutation.SetUpdatedAt(t)
	return psiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (psiu *ProductSpecsItemUpdate) ClearUpdatedAt() *ProductSpecsItemUpdate {
	psiu.mutation.ClearUpdatedAt()
	return psiu
}

// SetProductSpecsID sets the "product_specs_id" field.
func (psiu *ProductSpecsItemUpdate) SetProductSpecsID(i int) *ProductSpecsItemUpdate {
	psiu.mutation.SetProductSpecsID(i)
	return psiu
}

// SetNillableProductSpecsID sets the "product_specs_id" field if the given value is not nil.
func (psiu *ProductSpecsItemUpdate) SetNillableProductSpecsID(i *int) *ProductSpecsItemUpdate {
	if i != nil {
		psiu.SetProductSpecsID(*i)
	}
	return psiu
}

// ClearProductSpecsID clears the value of the "product_specs_id" field.
func (psiu *ProductSpecsItemUpdate) ClearProductSpecsID() *ProductSpecsItemUpdate {
	psiu.mutation.ClearProductSpecsID()
	return psiu
}

// SetValueID sets the "value_id" field.
func (psiu *ProductSpecsItemUpdate) SetValueID(i int) *ProductSpecsItemUpdate {
	psiu.mutation.ResetValueID()
	psiu.mutation.SetValueID(i)
	return psiu
}

// SetNillableValueID sets the "value_id" field if the given value is not nil.
func (psiu *ProductSpecsItemUpdate) SetNillableValueID(i *int) *ProductSpecsItemUpdate {
	if i != nil {
		psiu.SetValueID(*i)
	}
	return psiu
}

// AddValueID adds i to the "value_id" field.
func (psiu *ProductSpecsItemUpdate) AddValueID(i int) *ProductSpecsItemUpdate {
	psiu.mutation.AddValueID(i)
	return psiu
}

// ClearValueID clears the value of the "value_id" field.
func (psiu *ProductSpecsItemUpdate) ClearValueID() *ProductSpecsItemUpdate {
	psiu.mutation.ClearValueID()
	return psiu
}

// SetSort sets the "sort" field.
func (psiu *ProductSpecsItemUpdate) SetSort(i int) *ProductSpecsItemUpdate {
	psiu.mutation.ResetSort()
	psiu.mutation.SetSort(i)
	return psiu
}

// AddSort adds i to the "sort" field.
func (psiu *ProductSpecsItemUpdate) AddSort(i int) *ProductSpecsItemUpdate {
	psiu.mutation.AddSort(i)
	return psiu
}

// SetSpecsID sets the "specs" edge to the ProductSpecs entity by ID.
func (psiu *ProductSpecsItemUpdate) SetSpecsID(id int) *ProductSpecsItemUpdate {
	psiu.mutation.SetSpecsID(id)
	return psiu
}

// SetNillableSpecsID sets the "specs" edge to the ProductSpecs entity by ID if the given value is not nil.
func (psiu *ProductSpecsItemUpdate) SetNillableSpecsID(id *int) *ProductSpecsItemUpdate {
	if id != nil {
		psiu = psiu.SetSpecsID(*id)
	}
	return psiu
}

// SetSpecs sets the "specs" edge to the ProductSpecs entity.
func (psiu *ProductSpecsItemUpdate) SetSpecs(p *ProductSpecs) *ProductSpecsItemUpdate {
	return psiu.SetSpecsID(p.ID)
}

// AddValueIDs adds the "values" edge to the ProductAttributeValue entity by IDs.
func (psiu *ProductSpecsItemUpdate) AddValueIDs(ids ...int) *ProductSpecsItemUpdate {
	psiu.mutation.AddValueIDs(ids...)
	return psiu
}

// AddValues adds the "values" edges to the ProductAttributeValue entity.
func (psiu *ProductSpecsItemUpdate) AddValues(p ...*ProductAttributeValue) *ProductSpecsItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psiu.AddValueIDs(ids...)
}

// Mutation returns the ProductSpecsItemMutation object of the builder.
func (psiu *ProductSpecsItemUpdate) Mutation() *ProductSpecsItemMutation {
	return psiu.mutation
}

// ClearSpecs clears the "specs" edge to the ProductSpecs entity.
func (psiu *ProductSpecsItemUpdate) ClearSpecs() *ProductSpecsItemUpdate {
	psiu.mutation.ClearSpecs()
	return psiu
}

// ClearValues clears all "values" edges to the ProductAttributeValue entity.
func (psiu *ProductSpecsItemUpdate) ClearValues() *ProductSpecsItemUpdate {
	psiu.mutation.ClearValues()
	return psiu
}

// RemoveValueIDs removes the "values" edge to ProductAttributeValue entities by IDs.
func (psiu *ProductSpecsItemUpdate) RemoveValueIDs(ids ...int) *ProductSpecsItemUpdate {
	psiu.mutation.RemoveValueIDs(ids...)
	return psiu
}

// RemoveValues removes "values" edges to ProductAttributeValue entities.
func (psiu *ProductSpecsItemUpdate) RemoveValues(p ...*ProductAttributeValue) *ProductSpecsItemUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psiu.RemoveValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psiu *ProductSpecsItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	psiu.defaults()
	if len(psiu.hooks) == 0 {
		affected, err = psiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSpecsItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psiu.mutation = mutation
			affected, err = psiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psiu.hooks) - 1; i >= 0; i-- {
			if psiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psiu *ProductSpecsItemUpdate) SaveX(ctx context.Context) int {
	affected, err := psiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psiu *ProductSpecsItemUpdate) Exec(ctx context.Context) error {
	_, err := psiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psiu *ProductSpecsItemUpdate) ExecX(ctx context.Context) {
	if err := psiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psiu *ProductSpecsItemUpdate) defaults() {
	if _, ok := psiu.mutation.UpdatedAt(); !ok && !psiu.mutation.UpdatedAtCleared() {
		v := productspecsitem.UpdateDefaultUpdatedAt()
		psiu.mutation.SetUpdatedAt(v)
	}
}

func (psiu *ProductSpecsItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productspecsitem.Table,
			Columns: productspecsitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productspecsitem.FieldID,
			},
		},
	}
	if ps := psiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspecsitem.FieldCreatedAt,
		})
	}
	if psiu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productspecsitem.FieldCreatedAt,
		})
	}
	if value, ok := psiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspecsitem.FieldUpdatedAt,
		})
	}
	if psiu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productspecsitem.FieldUpdatedAt,
		})
	}
	if value, ok := psiu.mutation.ValueID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecsitem.FieldValueID,
		})
	}
	if value, ok := psiu.mutation.AddedValueID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecsitem.FieldValueID,
		})
	}
	if psiu.mutation.ValueIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productspecsitem.FieldValueID,
		})
	}
	if value, ok := psiu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecsitem.FieldSort,
		})
	}
	if value, ok := psiu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecsitem.FieldSort,
		})
	}
	if psiu.mutation.SpecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productspecsitem.SpecsTable,
			Columns: []string{productspecsitem.SpecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productspecs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psiu.mutation.SpecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productspecsitem.SpecsTable,
			Columns: []string{productspecsitem.SpecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productspecs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psiu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productspecsitem.ValuesTable,
			Columns: productspecsitem.ValuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psiu.mutation.RemovedValuesIDs(); len(nodes) > 0 && !psiu.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productspecsitem.ValuesTable,
			Columns: productspecsitem.ValuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psiu.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productspecsitem.ValuesTable,
			Columns: productspecsitem.ValuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productspecsitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProductSpecsItemUpdateOne is the builder for updating a single ProductSpecsItem entity.
type ProductSpecsItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductSpecsItemMutation
}

// SetCreatedAt sets the "created_at" field.
func (psiuo *ProductSpecsItemUpdateOne) SetCreatedAt(t time.Time) *ProductSpecsItemUpdateOne {
	psiuo.mutation.SetCreatedAt(t)
	return psiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psiuo *ProductSpecsItemUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductSpecsItemUpdateOne {
	if t != nil {
		psiuo.SetCreatedAt(*t)
	}
	return psiuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (psiuo *ProductSpecsItemUpdateOne) ClearCreatedAt() *ProductSpecsItemUpdateOne {
	psiuo.mutation.ClearCreatedAt()
	return psiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (psiuo *ProductSpecsItemUpdateOne) SetUpdatedAt(t time.Time) *ProductSpecsItemUpdateOne {
	psiuo.mutation.SetUpdatedAt(t)
	return psiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (psiuo *ProductSpecsItemUpdateOne) ClearUpdatedAt() *ProductSpecsItemUpdateOne {
	psiuo.mutation.ClearUpdatedAt()
	return psiuo
}

// SetProductSpecsID sets the "product_specs_id" field.
func (psiuo *ProductSpecsItemUpdateOne) SetProductSpecsID(i int) *ProductSpecsItemUpdateOne {
	psiuo.mutation.SetProductSpecsID(i)
	return psiuo
}

// SetNillableProductSpecsID sets the "product_specs_id" field if the given value is not nil.
func (psiuo *ProductSpecsItemUpdateOne) SetNillableProductSpecsID(i *int) *ProductSpecsItemUpdateOne {
	if i != nil {
		psiuo.SetProductSpecsID(*i)
	}
	return psiuo
}

// ClearProductSpecsID clears the value of the "product_specs_id" field.
func (psiuo *ProductSpecsItemUpdateOne) ClearProductSpecsID() *ProductSpecsItemUpdateOne {
	psiuo.mutation.ClearProductSpecsID()
	return psiuo
}

// SetValueID sets the "value_id" field.
func (psiuo *ProductSpecsItemUpdateOne) SetValueID(i int) *ProductSpecsItemUpdateOne {
	psiuo.mutation.ResetValueID()
	psiuo.mutation.SetValueID(i)
	return psiuo
}

// SetNillableValueID sets the "value_id" field if the given value is not nil.
func (psiuo *ProductSpecsItemUpdateOne) SetNillableValueID(i *int) *ProductSpecsItemUpdateOne {
	if i != nil {
		psiuo.SetValueID(*i)
	}
	return psiuo
}

// AddValueID adds i to the "value_id" field.
func (psiuo *ProductSpecsItemUpdateOne) AddValueID(i int) *ProductSpecsItemUpdateOne {
	psiuo.mutation.AddValueID(i)
	return psiuo
}

// ClearValueID clears the value of the "value_id" field.
func (psiuo *ProductSpecsItemUpdateOne) ClearValueID() *ProductSpecsItemUpdateOne {
	psiuo.mutation.ClearValueID()
	return psiuo
}

// SetSort sets the "sort" field.
func (psiuo *ProductSpecsItemUpdateOne) SetSort(i int) *ProductSpecsItemUpdateOne {
	psiuo.mutation.ResetSort()
	psiuo.mutation.SetSort(i)
	return psiuo
}

// AddSort adds i to the "sort" field.
func (psiuo *ProductSpecsItemUpdateOne) AddSort(i int) *ProductSpecsItemUpdateOne {
	psiuo.mutation.AddSort(i)
	return psiuo
}

// SetSpecsID sets the "specs" edge to the ProductSpecs entity by ID.
func (psiuo *ProductSpecsItemUpdateOne) SetSpecsID(id int) *ProductSpecsItemUpdateOne {
	psiuo.mutation.SetSpecsID(id)
	return psiuo
}

// SetNillableSpecsID sets the "specs" edge to the ProductSpecs entity by ID if the given value is not nil.
func (psiuo *ProductSpecsItemUpdateOne) SetNillableSpecsID(id *int) *ProductSpecsItemUpdateOne {
	if id != nil {
		psiuo = psiuo.SetSpecsID(*id)
	}
	return psiuo
}

// SetSpecs sets the "specs" edge to the ProductSpecs entity.
func (psiuo *ProductSpecsItemUpdateOne) SetSpecs(p *ProductSpecs) *ProductSpecsItemUpdateOne {
	return psiuo.SetSpecsID(p.ID)
}

// AddValueIDs adds the "values" edge to the ProductAttributeValue entity by IDs.
func (psiuo *ProductSpecsItemUpdateOne) AddValueIDs(ids ...int) *ProductSpecsItemUpdateOne {
	psiuo.mutation.AddValueIDs(ids...)
	return psiuo
}

// AddValues adds the "values" edges to the ProductAttributeValue entity.
func (psiuo *ProductSpecsItemUpdateOne) AddValues(p ...*ProductAttributeValue) *ProductSpecsItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psiuo.AddValueIDs(ids...)
}

// Mutation returns the ProductSpecsItemMutation object of the builder.
func (psiuo *ProductSpecsItemUpdateOne) Mutation() *ProductSpecsItemMutation {
	return psiuo.mutation
}

// ClearSpecs clears the "specs" edge to the ProductSpecs entity.
func (psiuo *ProductSpecsItemUpdateOne) ClearSpecs() *ProductSpecsItemUpdateOne {
	psiuo.mutation.ClearSpecs()
	return psiuo
}

// ClearValues clears all "values" edges to the ProductAttributeValue entity.
func (psiuo *ProductSpecsItemUpdateOne) ClearValues() *ProductSpecsItemUpdateOne {
	psiuo.mutation.ClearValues()
	return psiuo
}

// RemoveValueIDs removes the "values" edge to ProductAttributeValue entities by IDs.
func (psiuo *ProductSpecsItemUpdateOne) RemoveValueIDs(ids ...int) *ProductSpecsItemUpdateOne {
	psiuo.mutation.RemoveValueIDs(ids...)
	return psiuo
}

// RemoveValues removes "values" edges to ProductAttributeValue entities.
func (psiuo *ProductSpecsItemUpdateOne) RemoveValues(p ...*ProductAttributeValue) *ProductSpecsItemUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psiuo.RemoveValueIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psiuo *ProductSpecsItemUpdateOne) Select(field string, fields ...string) *ProductSpecsItemUpdateOne {
	psiuo.fields = append([]string{field}, fields...)
	return psiuo
}

// Save executes the query and returns the updated ProductSpecsItem entity.
func (psiuo *ProductSpecsItemUpdateOne) Save(ctx context.Context) (*ProductSpecsItem, error) {
	var (
		err  error
		node *ProductSpecsItem
	)
	psiuo.defaults()
	if len(psiuo.hooks) == 0 {
		node, err = psiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSpecsItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psiuo.mutation = mutation
			node, err = psiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psiuo.hooks) - 1; i >= 0; i-- {
			if psiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psiuo *ProductSpecsItemUpdateOne) SaveX(ctx context.Context) *ProductSpecsItem {
	node, err := psiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psiuo *ProductSpecsItemUpdateOne) Exec(ctx context.Context) error {
	_, err := psiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psiuo *ProductSpecsItemUpdateOne) ExecX(ctx context.Context) {
	if err := psiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psiuo *ProductSpecsItemUpdateOne) defaults() {
	if _, ok := psiuo.mutation.UpdatedAt(); !ok && !psiuo.mutation.UpdatedAtCleared() {
		v := productspecsitem.UpdateDefaultUpdatedAt()
		psiuo.mutation.SetUpdatedAt(v)
	}
}

func (psiuo *ProductSpecsItemUpdateOne) sqlSave(ctx context.Context) (_node *ProductSpecsItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productspecsitem.Table,
			Columns: productspecsitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productspecsitem.FieldID,
			},
		},
	}
	id, ok := psiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductSpecsItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := psiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productspecsitem.FieldID)
		for _, f := range fields {
			if !productspecsitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productspecsitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspecsitem.FieldCreatedAt,
		})
	}
	if psiuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productspecsitem.FieldCreatedAt,
		})
	}
	if value, ok := psiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspecsitem.FieldUpdatedAt,
		})
	}
	if psiuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productspecsitem.FieldUpdatedAt,
		})
	}
	if value, ok := psiuo.mutation.ValueID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecsitem.FieldValueID,
		})
	}
	if value, ok := psiuo.mutation.AddedValueID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecsitem.FieldValueID,
		})
	}
	if psiuo.mutation.ValueIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productspecsitem.FieldValueID,
		})
	}
	if value, ok := psiuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecsitem.FieldSort,
		})
	}
	if value, ok := psiuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecsitem.FieldSort,
		})
	}
	if psiuo.mutation.SpecsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productspecsitem.SpecsTable,
			Columns: []string{productspecsitem.SpecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productspecs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psiuo.mutation.SpecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productspecsitem.SpecsTable,
			Columns: []string{productspecsitem.SpecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productspecs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psiuo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productspecsitem.ValuesTable,
			Columns: productspecsitem.ValuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psiuo.mutation.RemovedValuesIDs(); len(nodes) > 0 && !psiuo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productspecsitem.ValuesTable,
			Columns: productspecsitem.ValuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psiuo.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productspecsitem.ValuesTable,
			Columns: productspecsitem.ValuesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductSpecsItem{config: psiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productspecsitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
