// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/predicate"
	"orse/ent/product"
	"orse/ent/productcate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCateUpdate is the builder for updating ProductCate entities.
type ProductCateUpdate struct {
	config
	hooks    []Hook
	mutation *ProductCateMutation
}

// Where appends a list predicates to the ProductCateUpdate builder.
func (pcu *ProductCateUpdate) Where(ps ...predicate.ProductCate) *ProductCateUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetCreatedAt sets the "created_at" field.
func (pcu *ProductCateUpdate) SetCreatedAt(t time.Time) *ProductCateUpdate {
	pcu.mutation.SetCreatedAt(t)
	return pcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcu *ProductCateUpdate) SetNillableCreatedAt(t *time.Time) *ProductCateUpdate {
	if t != nil {
		pcu.SetCreatedAt(*t)
	}
	return pcu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (pcu *ProductCateUpdate) ClearCreatedAt() *ProductCateUpdate {
	pcu.mutation.ClearCreatedAt()
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *ProductCateUpdate) SetUpdatedAt(t time.Time) *ProductCateUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pcu *ProductCateUpdate) ClearUpdatedAt() *ProductCateUpdate {
	pcu.mutation.ClearUpdatedAt()
	return pcu
}

// SetName sets the "name" field.
func (pcu *ProductCateUpdate) SetName(s string) *ProductCateUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetSort sets the "sort" field.
func (pcu *ProductCateUpdate) SetSort(i int) *ProductCateUpdate {
	pcu.mutation.ResetSort()
	pcu.mutation.SetSort(i)
	return pcu
}

// AddSort adds i to the "sort" field.
func (pcu *ProductCateUpdate) AddSort(i int) *ProductCateUpdate {
	pcu.mutation.AddSort(i)
	return pcu
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (pcu *ProductCateUpdate) AddProductIDs(ids ...int) *ProductCateUpdate {
	pcu.mutation.AddProductIDs(ids...)
	return pcu
}

// AddProducts adds the "products" edges to the Product entity.
func (pcu *ProductCateUpdate) AddProducts(p ...*Product) *ProductCateUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddProductIDs(ids...)
}

// Mutation returns the ProductCateMutation object of the builder.
func (pcu *ProductCateUpdate) Mutation() *ProductCateMutation {
	return pcu.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (pcu *ProductCateUpdate) ClearProducts() *ProductCateUpdate {
	pcu.mutation.ClearProducts()
	return pcu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (pcu *ProductCateUpdate) RemoveProductIDs(ids ...int) *ProductCateUpdate {
	pcu.mutation.RemoveProductIDs(ids...)
	return pcu
}

// RemoveProducts removes "products" edges to Product entities.
func (pcu *ProductCateUpdate) RemoveProducts(p ...*Product) *ProductCateUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProductCateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pcu.defaults()
	if len(pcu.hooks) == 0 {
		affected, err = pcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pcu.mutation = mutation
			affected, err = pcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcu.hooks) - 1; i >= 0; i-- {
			if pcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProductCateUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProductCateUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProductCateUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *ProductCateUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok && !pcu.mutation.UpdatedAtCleared() {
		v := productcate.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

func (pcu *ProductCateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcate.Table,
			Columns: productcate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcate.FieldID,
			},
		},
	}
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcate.FieldCreatedAt,
		})
	}
	if pcu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productcate.FieldCreatedAt,
		})
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcate.FieldUpdatedAt,
		})
	}
	if pcu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productcate.FieldUpdatedAt,
		})
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcate.FieldName,
		})
	}
	if value, ok := pcu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productcate.FieldSort,
		})
	}
	if value, ok := pcu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productcate.FieldSort,
		})
	}
	if pcu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcate.ProductsTable,
			Columns: []string{productcate.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !pcu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcate.ProductsTable,
			Columns: []string{productcate.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcate.ProductsTable,
			Columns: []string{productcate.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProductCateUpdateOne is the builder for updating a single ProductCate entity.
type ProductCateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductCateMutation
}

// SetCreatedAt sets the "created_at" field.
func (pcuo *ProductCateUpdateOne) SetCreatedAt(t time.Time) *ProductCateUpdateOne {
	pcuo.mutation.SetCreatedAt(t)
	return pcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcuo *ProductCateUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductCateUpdateOne {
	if t != nil {
		pcuo.SetCreatedAt(*t)
	}
	return pcuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (pcuo *ProductCateUpdateOne) ClearCreatedAt() *ProductCateUpdateOne {
	pcuo.mutation.ClearCreatedAt()
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *ProductCateUpdateOne) SetUpdatedAt(t time.Time) *ProductCateUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pcuo *ProductCateUpdateOne) ClearUpdatedAt() *ProductCateUpdateOne {
	pcuo.mutation.ClearUpdatedAt()
	return pcuo
}

// SetName sets the "name" field.
func (pcuo *ProductCateUpdateOne) SetName(s string) *ProductCateUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetSort sets the "sort" field.
func (pcuo *ProductCateUpdateOne) SetSort(i int) *ProductCateUpdateOne {
	pcuo.mutation.ResetSort()
	pcuo.mutation.SetSort(i)
	return pcuo
}

// AddSort adds i to the "sort" field.
func (pcuo *ProductCateUpdateOne) AddSort(i int) *ProductCateUpdateOne {
	pcuo.mutation.AddSort(i)
	return pcuo
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (pcuo *ProductCateUpdateOne) AddProductIDs(ids ...int) *ProductCateUpdateOne {
	pcuo.mutation.AddProductIDs(ids...)
	return pcuo
}

// AddProducts adds the "products" edges to the Product entity.
func (pcuo *ProductCateUpdateOne) AddProducts(p ...*Product) *ProductCateUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddProductIDs(ids...)
}

// Mutation returns the ProductCateMutation object of the builder.
func (pcuo *ProductCateUpdateOne) Mutation() *ProductCateMutation {
	return pcuo.mutation
}

// ClearProducts clears all "products" edges to the Product entity.
func (pcuo *ProductCateUpdateOne) ClearProducts() *ProductCateUpdateOne {
	pcuo.mutation.ClearProducts()
	return pcuo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (pcuo *ProductCateUpdateOne) RemoveProductIDs(ids ...int) *ProductCateUpdateOne {
	pcuo.mutation.RemoveProductIDs(ids...)
	return pcuo
}

// RemoveProducts removes "products" edges to Product entities.
func (pcuo *ProductCateUpdateOne) RemoveProducts(p ...*Product) *ProductCateUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemoveProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProductCateUpdateOne) Select(field string, fields ...string) *ProductCateUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProductCate entity.
func (pcuo *ProductCateUpdateOne) Save(ctx context.Context) (*ProductCate, error) {
	var (
		err  error
		node *ProductCate
	)
	pcuo.defaults()
	if len(pcuo.hooks) == 0 {
		node, err = pcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pcuo.mutation = mutation
			node, err = pcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcuo.hooks) - 1; i >= 0; i-- {
			if pcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProductCateUpdateOne) SaveX(ctx context.Context) *ProductCate {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProductCateUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProductCateUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *ProductCateUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok && !pcuo.mutation.UpdatedAtCleared() {
		v := productcate.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

func (pcuo *ProductCateUpdateOne) sqlSave(ctx context.Context) (_node *ProductCate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcate.Table,
			Columns: productcate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productcate.FieldID,
			},
		},
	}
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductCate.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcate.FieldID)
		for _, f := range fields {
			if !productcate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productcate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcate.FieldCreatedAt,
		})
	}
	if pcuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productcate.FieldCreatedAt,
		})
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productcate.FieldUpdatedAt,
		})
	}
	if pcuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productcate.FieldUpdatedAt,
		})
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productcate.FieldName,
		})
	}
	if value, ok := pcuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productcate.FieldSort,
		})
	}
	if value, ok := pcuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productcate.FieldSort,
		})
	}
	if pcuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcate.ProductsTable,
			Columns: []string{productcate.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !pcuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcate.ProductsTable,
			Columns: []string{productcate.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcate.ProductsTable,
			Columns: []string{productcate.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductCate{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
