// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/ent/order"
	"saas/ent/orderpay"
	"saas/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderPayUpdate is the builder for updating OrderPay entities.
type OrderPayUpdate struct {
	config
	hooks    []Hook
	mutation *OrderPayMutation
}

// Where appends a list predicates to the OrderPayUpdate builder.
func (opu *OrderPayUpdate) Where(ps ...predicate.OrderPay) *OrderPayUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetCreatedAt sets the "created_at" field.
func (opu *OrderPayUpdate) SetCreatedAt(t time.Time) *OrderPayUpdate {
	opu.mutation.SetCreatedAt(t)
	return opu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opu *OrderPayUpdate) SetNillableCreatedAt(t *time.Time) *OrderPayUpdate {
	if t != nil {
		opu.SetCreatedAt(*t)
	}
	return opu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (opu *OrderPayUpdate) ClearCreatedAt() *OrderPayUpdate {
	opu.mutation.ClearCreatedAt()
	return opu
}

// SetUpdatedAt sets the "updated_at" field.
func (opu *OrderPayUpdate) SetUpdatedAt(t time.Time) *OrderPayUpdate {
	opu.mutation.SetUpdatedAt(t)
	return opu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (opu *OrderPayUpdate) ClearUpdatedAt() *OrderPayUpdate {
	opu.mutation.ClearUpdatedAt()
	return opu
}

// SetUserID sets the "user_id" field.
func (opu *OrderPayUpdate) SetUserID(i int) *OrderPayUpdate {
	opu.mutation.ResetUserID()
	opu.mutation.SetUserID(i)
	return opu
}

// AddUserID adds i to the "user_id" field.
func (opu *OrderPayUpdate) AddUserID(i int) *OrderPayUpdate {
	opu.mutation.AddUserID(i)
	return opu
}

// SetCreateID sets the "create_id" field.
func (opu *OrderPayUpdate) SetCreateID(i int) *OrderPayUpdate {
	opu.mutation.ResetCreateID()
	opu.mutation.SetCreateID(i)
	return opu
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (opu *OrderPayUpdate) SetNillableCreateID(i *int) *OrderPayUpdate {
	if i != nil {
		opu.SetCreateID(*i)
	}
	return opu
}

// AddCreateID adds i to the "create_id" field.
func (opu *OrderPayUpdate) AddCreateID(i int) *OrderPayUpdate {
	opu.mutation.AddCreateID(i)
	return opu
}

// ClearCreateID clears the value of the "create_id" field.
func (opu *OrderPayUpdate) ClearCreateID() *OrderPayUpdate {
	opu.mutation.ClearCreateID()
	return opu
}

// SetSn sets the "sn" field.
func (opu *OrderPayUpdate) SetSn(s string) *OrderPayUpdate {
	opu.mutation.SetSn(s)
	return opu
}

// SetPrice sets the "price" field.
func (opu *OrderPayUpdate) SetPrice(f float64) *OrderPayUpdate {
	opu.mutation.ResetPrice()
	opu.mutation.SetPrice(f)
	return opu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (opu *OrderPayUpdate) SetNillablePrice(f *float64) *OrderPayUpdate {
	if f != nil {
		opu.SetPrice(*f)
	}
	return opu
}

// AddPrice adds f to the "price" field.
func (opu *OrderPayUpdate) AddPrice(f float64) *OrderPayUpdate {
	opu.mutation.AddPrice(f)
	return opu
}

// SetPayMode sets the "pay_mode" field.
func (opu *OrderPayUpdate) SetPayMode(s string) *OrderPayUpdate {
	opu.mutation.SetPayMode(s)
	return opu
}

// SetNillablePayMode sets the "pay_mode" field if the given value is not nil.
func (opu *OrderPayUpdate) SetNillablePayMode(s *string) *OrderPayUpdate {
	if s != nil {
		opu.SetPayMode(*s)
	}
	return opu
}

// ClearPayMode clears the value of the "pay_mode" field.
func (opu *OrderPayUpdate) ClearPayMode() *OrderPayUpdate {
	opu.mutation.ClearPayMode()
	return opu
}

// SetOwnerID sets the "owner" edge to the Order entity by ID.
func (opu *OrderPayUpdate) SetOwnerID(id int) *OrderPayUpdate {
	opu.mutation.SetOwnerID(id)
	return opu
}

// SetOwner sets the "owner" edge to the Order entity.
func (opu *OrderPayUpdate) SetOwner(o *Order) *OrderPayUpdate {
	return opu.SetOwnerID(o.ID)
}

// Mutation returns the OrderPayMutation object of the builder.
func (opu *OrderPayUpdate) Mutation() *OrderPayMutation {
	return opu.mutation
}

// ClearOwner clears the "owner" edge to the Order entity.
func (opu *OrderPayUpdate) ClearOwner() *OrderPayUpdate {
	opu.mutation.ClearOwner()
	return opu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OrderPayUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	opu.defaults()
	if len(opu.hooks) == 0 {
		if err = opu.check(); err != nil {
			return 0, err
		}
		affected, err = opu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = opu.check(); err != nil {
				return 0, err
			}
			opu.mutation = mutation
			affected, err = opu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(opu.hooks) - 1; i >= 0; i-- {
			if opu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, opu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OrderPayUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OrderPayUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OrderPayUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opu *OrderPayUpdate) defaults() {
	if _, ok := opu.mutation.UpdatedAt(); !ok && !opu.mutation.UpdatedAtCleared() {
		v := orderpay.UpdateDefaultUpdatedAt()
		opu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opu *OrderPayUpdate) check() error {
	if _, ok := opu.mutation.OwnerID(); opu.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (opu *OrderPayUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpay.Table,
			Columns: orderpay.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderpay.FieldID,
			},
		},
	}
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpay.FieldCreatedAt,
		})
	}
	if opu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpay.FieldCreatedAt,
		})
	}
	if value, ok := opu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpay.FieldUpdatedAt,
		})
	}
	if opu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpay.FieldUpdatedAt,
		})
	}
	if value, ok := opu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpay.FieldUserID,
		})
	}
	if value, ok := opu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpay.FieldUserID,
		})
	}
	if value, ok := opu.mutation.CreateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpay.FieldCreateID,
		})
	}
	if value, ok := opu.mutation.AddedCreateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpay.FieldCreateID,
		})
	}
	if opu.mutation.CreateIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpay.FieldCreateID,
		})
	}
	if value, ok := opu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpay.FieldSn,
		})
	}
	if value, ok := opu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderpay.FieldPrice,
		})
	}
	if value, ok := opu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderpay.FieldPrice,
		})
	}
	if value, ok := opu.mutation.PayMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpay.FieldPayMode,
		})
	}
	if opu.mutation.PayModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpay.FieldPayMode,
		})
	}
	if opu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpay.OwnerTable,
			Columns: []string{orderpay.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpay.OwnerTable,
			Columns: []string{orderpay.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpay.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderPayUpdateOne is the builder for updating a single OrderPay entity.
type OrderPayUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderPayMutation
}

// SetCreatedAt sets the "created_at" field.
func (opuo *OrderPayUpdateOne) SetCreatedAt(t time.Time) *OrderPayUpdateOne {
	opuo.mutation.SetCreatedAt(t)
	return opuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opuo *OrderPayUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderPayUpdateOne {
	if t != nil {
		opuo.SetCreatedAt(*t)
	}
	return opuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (opuo *OrderPayUpdateOne) ClearCreatedAt() *OrderPayUpdateOne {
	opuo.mutation.ClearCreatedAt()
	return opuo
}

// SetUpdatedAt sets the "updated_at" field.
func (opuo *OrderPayUpdateOne) SetUpdatedAt(t time.Time) *OrderPayUpdateOne {
	opuo.mutation.SetUpdatedAt(t)
	return opuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (opuo *OrderPayUpdateOne) ClearUpdatedAt() *OrderPayUpdateOne {
	opuo.mutation.ClearUpdatedAt()
	return opuo
}

// SetUserID sets the "user_id" field.
func (opuo *OrderPayUpdateOne) SetUserID(i int) *OrderPayUpdateOne {
	opuo.mutation.ResetUserID()
	opuo.mutation.SetUserID(i)
	return opuo
}

// AddUserID adds i to the "user_id" field.
func (opuo *OrderPayUpdateOne) AddUserID(i int) *OrderPayUpdateOne {
	opuo.mutation.AddUserID(i)
	return opuo
}

// SetCreateID sets the "create_id" field.
func (opuo *OrderPayUpdateOne) SetCreateID(i int) *OrderPayUpdateOne {
	opuo.mutation.ResetCreateID()
	opuo.mutation.SetCreateID(i)
	return opuo
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (opuo *OrderPayUpdateOne) SetNillableCreateID(i *int) *OrderPayUpdateOne {
	if i != nil {
		opuo.SetCreateID(*i)
	}
	return opuo
}

// AddCreateID adds i to the "create_id" field.
func (opuo *OrderPayUpdateOne) AddCreateID(i int) *OrderPayUpdateOne {
	opuo.mutation.AddCreateID(i)
	return opuo
}

// ClearCreateID clears the value of the "create_id" field.
func (opuo *OrderPayUpdateOne) ClearCreateID() *OrderPayUpdateOne {
	opuo.mutation.ClearCreateID()
	return opuo
}

// SetSn sets the "sn" field.
func (opuo *OrderPayUpdateOne) SetSn(s string) *OrderPayUpdateOne {
	opuo.mutation.SetSn(s)
	return opuo
}

// SetPrice sets the "price" field.
func (opuo *OrderPayUpdateOne) SetPrice(f float64) *OrderPayUpdateOne {
	opuo.mutation.ResetPrice()
	opuo.mutation.SetPrice(f)
	return opuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (opuo *OrderPayUpdateOne) SetNillablePrice(f *float64) *OrderPayUpdateOne {
	if f != nil {
		opuo.SetPrice(*f)
	}
	return opuo
}

// AddPrice adds f to the "price" field.
func (opuo *OrderPayUpdateOne) AddPrice(f float64) *OrderPayUpdateOne {
	opuo.mutation.AddPrice(f)
	return opuo
}

// SetPayMode sets the "pay_mode" field.
func (opuo *OrderPayUpdateOne) SetPayMode(s string) *OrderPayUpdateOne {
	opuo.mutation.SetPayMode(s)
	return opuo
}

// SetNillablePayMode sets the "pay_mode" field if the given value is not nil.
func (opuo *OrderPayUpdateOne) SetNillablePayMode(s *string) *OrderPayUpdateOne {
	if s != nil {
		opuo.SetPayMode(*s)
	}
	return opuo
}

// ClearPayMode clears the value of the "pay_mode" field.
func (opuo *OrderPayUpdateOne) ClearPayMode() *OrderPayUpdateOne {
	opuo.mutation.ClearPayMode()
	return opuo
}

// SetOwnerID sets the "owner" edge to the Order entity by ID.
func (opuo *OrderPayUpdateOne) SetOwnerID(id int) *OrderPayUpdateOne {
	opuo.mutation.SetOwnerID(id)
	return opuo
}

// SetOwner sets the "owner" edge to the Order entity.
func (opuo *OrderPayUpdateOne) SetOwner(o *Order) *OrderPayUpdateOne {
	return opuo.SetOwnerID(o.ID)
}

// Mutation returns the OrderPayMutation object of the builder.
func (opuo *OrderPayUpdateOne) Mutation() *OrderPayMutation {
	return opuo.mutation
}

// ClearOwner clears the "owner" edge to the Order entity.
func (opuo *OrderPayUpdateOne) ClearOwner() *OrderPayUpdateOne {
	opuo.mutation.ClearOwner()
	return opuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OrderPayUpdateOne) Select(field string, fields ...string) *OrderPayUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OrderPay entity.
func (opuo *OrderPayUpdateOne) Save(ctx context.Context) (*OrderPay, error) {
	var (
		err  error
		node *OrderPay
	)
	opuo.defaults()
	if len(opuo.hooks) == 0 {
		if err = opuo.check(); err != nil {
			return nil, err
		}
		node, err = opuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = opuo.check(); err != nil {
				return nil, err
			}
			opuo.mutation = mutation
			node, err = opuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(opuo.hooks) - 1; i >= 0; i-- {
			if opuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, opuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OrderPayUpdateOne) SaveX(ctx context.Context) *OrderPay {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OrderPayUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OrderPayUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opuo *OrderPayUpdateOne) defaults() {
	if _, ok := opuo.mutation.UpdatedAt(); !ok && !opuo.mutation.UpdatedAtCleared() {
		v := orderpay.UpdateDefaultUpdatedAt()
		opuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opuo *OrderPayUpdateOne) check() error {
	if _, ok := opuo.mutation.OwnerID(); opuo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (opuo *OrderPayUpdateOne) sqlSave(ctx context.Context) (_node *OrderPay, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpay.Table,
			Columns: orderpay.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderpay.FieldID,
			},
		},
	}
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderPay.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderpay.FieldID)
		for _, f := range fields {
			if !orderpay.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderpay.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpay.FieldCreatedAt,
		})
	}
	if opuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpay.FieldCreatedAt,
		})
	}
	if value, ok := opuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpay.FieldUpdatedAt,
		})
	}
	if opuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpay.FieldUpdatedAt,
		})
	}
	if value, ok := opuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpay.FieldUserID,
		})
	}
	if value, ok := opuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpay.FieldUserID,
		})
	}
	if value, ok := opuo.mutation.CreateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpay.FieldCreateID,
		})
	}
	if value, ok := opuo.mutation.AddedCreateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpay.FieldCreateID,
		})
	}
	if opuo.mutation.CreateIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpay.FieldCreateID,
		})
	}
	if value, ok := opuo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpay.FieldSn,
		})
	}
	if value, ok := opuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderpay.FieldPrice,
		})
	}
	if value, ok := opuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderpay.FieldPrice,
		})
	}
	if value, ok := opuo.mutation.PayMode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpay.FieldPayMode,
		})
	}
	if opuo.mutation.PayModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpay.FieldPayMode,
		})
	}
	if opuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpay.OwnerTable,
			Columns: []string{orderpay.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpay.OwnerTable,
			Columns: []string{orderpay.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderPay{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpay.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
