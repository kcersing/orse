// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/menu"
	"orse/ent/predicate"
	"orse/ent/property"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetPid sets the "pid" field.
func (mu *MenuUpdate) SetPid(i int) *MenuUpdate {
	mu.mutation.ResetPid()
	mu.mutation.SetPid(i)
	return mu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (mu *MenuUpdate) SetNillablePid(i *int) *MenuUpdate {
	if i != nil {
		mu.SetPid(*i)
	}
	return mu
}

// AddPid adds i to the "pid" field.
func (mu *MenuUpdate) AddPid(i int) *MenuUpdate {
	mu.mutation.AddPid(i)
	return mu
}

// ClearPid clears the value of the "pid" field.
func (mu *MenuUpdate) ClearPid() *MenuUpdate {
	mu.mutation.ClearPid()
	return mu
}

// SetTree sets the "tree" field.
func (mu *MenuUpdate) SetTree(s string) *MenuUpdate {
	mu.mutation.SetTree(s)
	return mu
}

// SetNillableTree sets the "tree" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableTree(s *string) *MenuUpdate {
	if s != nil {
		mu.SetTree(*s)
	}
	return mu
}

// ClearTree clears the value of the "tree" field.
func (mu *MenuUpdate) ClearTree() *MenuUpdate {
	mu.mutation.ClearTree()
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MenuUpdate) SetCreatedAt(t time.Time) *MenuUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableCreatedAt(t *time.Time) *MenuUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (mu *MenuUpdate) ClearCreatedAt() *MenuUpdate {
	mu.mutation.ClearCreatedAt()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MenuUpdate) SetUpdatedAt(t time.Time) *MenuUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MenuUpdate) ClearUpdatedAt() *MenuUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// SetTitle sets the "title" field.
func (mu *MenuUpdate) SetTitle(s string) *MenuUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetName sets the "name" field.
func (mu *MenuUpdate) SetName(s string) *MenuUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableName(s *string) *MenuUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// ClearName clears the value of the "name" field.
func (mu *MenuUpdate) ClearName() *MenuUpdate {
	mu.mutation.ClearName()
	return mu
}

// SetURL sets the "url" field.
func (mu *MenuUpdate) SetURL(s string) *MenuUpdate {
	mu.mutation.SetURL(s)
	return mu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableURL(s *string) *MenuUpdate {
	if s != nil {
		mu.SetURL(*s)
	}
	return mu
}

// ClearURL clears the value of the "url" field.
func (mu *MenuUpdate) ClearURL() *MenuUpdate {
	mu.mutation.ClearURL()
	return mu
}

// SetLevel sets the "level" field.
func (mu *MenuUpdate) SetLevel(i int) *MenuUpdate {
	mu.mutation.ResetLevel()
	mu.mutation.SetLevel(i)
	return mu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableLevel(i *int) *MenuUpdate {
	if i != nil {
		mu.SetLevel(*i)
	}
	return mu
}

// AddLevel adds i to the "level" field.
func (mu *MenuUpdate) AddLevel(i int) *MenuUpdate {
	mu.mutation.AddLevel(i)
	return mu
}

// SetSort sets the "sort" field.
func (mu *MenuUpdate) SetSort(i int) *MenuUpdate {
	mu.mutation.ResetSort()
	mu.mutation.SetSort(i)
	return mu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableSort(i *int) *MenuUpdate {
	if i != nil {
		mu.SetSort(*i)
	}
	return mu
}

// AddSort adds i to the "sort" field.
func (mu *MenuUpdate) AddSort(i int) *MenuUpdate {
	mu.mutation.AddSort(i)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MenuUpdate) SetStatus(pr property.Status) *MenuUpdate {
	mu.mutation.SetStatus(pr)
	return mu
}

// SetIcon sets the "icon" field.
func (mu *MenuUpdate) SetIcon(s string) *MenuUpdate {
	mu.mutation.SetIcon(s)
	return mu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableIcon(s *string) *MenuUpdate {
	if s != nil {
		mu.SetIcon(*s)
	}
	return mu
}

// ClearIcon clears the value of the "icon" field.
func (mu *MenuUpdate) ClearIcon() *MenuUpdate {
	mu.mutation.ClearIcon()
	return mu
}

// SetHidden sets the "hidden" field.
func (mu *MenuUpdate) SetHidden(pr property.Status) *MenuUpdate {
	mu.mutation.SetHidden(pr)
	return mu
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableHidden(pr *property.Status) *MenuUpdate {
	if pr != nil {
		mu.SetHidden(*pr)
	}
	return mu
}

// ClearHidden clears the value of the "hidden" field.
func (mu *MenuUpdate) ClearHidden() *MenuUpdate {
	mu.mutation.ClearHidden()
	return mu
}

// SetDesc sets the "desc" field.
func (mu *MenuUpdate) SetDesc(s string) *MenuUpdate {
	mu.mutation.SetDesc(s)
	return mu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableDesc(s *string) *MenuUpdate {
	if s != nil {
		mu.SetDesc(*s)
	}
	return mu
}

// ClearDesc clears the value of the "desc" field.
func (mu *MenuUpdate) ClearDesc() *MenuUpdate {
	mu.mutation.ClearDesc()
	return mu
}

// SetNextID sets the "next" edge to the Menu entity by ID.
func (mu *MenuUpdate) SetNextID(id int) *MenuUpdate {
	mu.mutation.SetNextID(id)
	return mu
}

// SetNillableNextID sets the "next" edge to the Menu entity by ID if the given value is not nil.
func (mu *MenuUpdate) SetNillableNextID(id *int) *MenuUpdate {
	if id != nil {
		mu = mu.SetNextID(*id)
	}
	return mu
}

// SetNext sets the "next" edge to the Menu entity.
func (mu *MenuUpdate) SetNext(m *Menu) *MenuUpdate {
	return mu.SetNextID(m.ID)
}

// SetPrevID sets the "prev" edge to the Menu entity by ID.
func (mu *MenuUpdate) SetPrevID(id int) *MenuUpdate {
	mu.mutation.SetPrevID(id)
	return mu
}

// SetNillablePrevID sets the "prev" edge to the Menu entity by ID if the given value is not nil.
func (mu *MenuUpdate) SetNillablePrevID(id *int) *MenuUpdate {
	if id != nil {
		mu = mu.SetPrevID(*id)
	}
	return mu
}

// SetPrev sets the "prev" edge to the Menu entity.
func (mu *MenuUpdate) SetPrev(m *Menu) *MenuUpdate {
	return mu.SetPrevID(m.ID)
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// ClearNext clears the "next" edge to the Menu entity.
func (mu *MenuUpdate) ClearNext() *MenuUpdate {
	mu.mutation.ClearNext()
	return mu
}

// ClearPrev clears the "prev" edge to the Menu entity.
func (mu *MenuUpdate) ClearPrev() *MenuUpdate {
	mu.mutation.ClearPrev()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MenuUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := menu.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MenuUpdate) check() error {
	if v, ok := mu.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Hidden(); ok {
		if err := menu.HiddenValidator(v); err != nil {
			return &ValidationError{Name: "hidden", err: fmt.Errorf("ent: validator failed for field \"hidden\": %w", err)}
		}
	}
	return nil
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menu.Table,
			Columns: menu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menu.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldPid,
		})
	}
	if value, ok := mu.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldPid,
		})
	}
	if mu.mutation.PidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: menu.FieldPid,
		})
	}
	if value, ok := mu.mutation.Tree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldTree,
		})
	}
	if mu.mutation.TreeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldTree,
		})
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldCreatedAt,
		})
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: menu.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldUpdatedAt,
		})
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: menu.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldTitle,
		})
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldName,
		})
	}
	if mu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldName,
		})
	}
	if value, ok := mu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldURL,
		})
	}
	if mu.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldURL,
		})
	}
	if value, ok := mu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldLevel,
		})
	}
	if value, ok := mu.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldLevel,
		})
	}
	if value, ok := mu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldSort,
		})
	}
	if value, ok := mu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldSort,
		})
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: menu.FieldStatus,
		})
	}
	if value, ok := mu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldIcon,
		})
	}
	if mu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldIcon,
		})
	}
	if value, ok := mu.mutation.Hidden(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: menu.FieldHidden,
		})
	}
	if mu.mutation.HiddenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: menu.FieldHidden,
		})
	}
	if value, ok := mu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldDesc,
		})
	}
	if mu.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldDesc,
		})
	}
	if mu.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   menu.NextTable,
			Columns: []string{menu.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   menu.NextTable,
			Columns: []string{menu.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   menu.PrevTable,
			Columns: []string{menu.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   menu.PrevTable,
			Columns: []string{menu.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuMutation
}

// SetPid sets the "pid" field.
func (muo *MenuUpdateOne) SetPid(i int) *MenuUpdateOne {
	muo.mutation.ResetPid()
	muo.mutation.SetPid(i)
	return muo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillablePid(i *int) *MenuUpdateOne {
	if i != nil {
		muo.SetPid(*i)
	}
	return muo
}

// AddPid adds i to the "pid" field.
func (muo *MenuUpdateOne) AddPid(i int) *MenuUpdateOne {
	muo.mutation.AddPid(i)
	return muo
}

// ClearPid clears the value of the "pid" field.
func (muo *MenuUpdateOne) ClearPid() *MenuUpdateOne {
	muo.mutation.ClearPid()
	return muo
}

// SetTree sets the "tree" field.
func (muo *MenuUpdateOne) SetTree(s string) *MenuUpdateOne {
	muo.mutation.SetTree(s)
	return muo
}

// SetNillableTree sets the "tree" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableTree(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetTree(*s)
	}
	return muo
}

// ClearTree clears the value of the "tree" field.
func (muo *MenuUpdateOne) ClearTree() *MenuUpdateOne {
	muo.mutation.ClearTree()
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MenuUpdateOne) SetCreatedAt(t time.Time) *MenuUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableCreatedAt(t *time.Time) *MenuUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (muo *MenuUpdateOne) ClearCreatedAt() *MenuUpdateOne {
	muo.mutation.ClearCreatedAt()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MenuUpdateOne) SetUpdatedAt(t time.Time) *MenuUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MenuUpdateOne) ClearUpdatedAt() *MenuUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// SetTitle sets the "title" field.
func (muo *MenuUpdateOne) SetTitle(s string) *MenuUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetName sets the "name" field.
func (muo *MenuUpdateOne) SetName(s string) *MenuUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableName(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// ClearName clears the value of the "name" field.
func (muo *MenuUpdateOne) ClearName() *MenuUpdateOne {
	muo.mutation.ClearName()
	return muo
}

// SetURL sets the "url" field.
func (muo *MenuUpdateOne) SetURL(s string) *MenuUpdateOne {
	muo.mutation.SetURL(s)
	return muo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableURL(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetURL(*s)
	}
	return muo
}

// ClearURL clears the value of the "url" field.
func (muo *MenuUpdateOne) ClearURL() *MenuUpdateOne {
	muo.mutation.ClearURL()
	return muo
}

// SetLevel sets the "level" field.
func (muo *MenuUpdateOne) SetLevel(i int) *MenuUpdateOne {
	muo.mutation.ResetLevel()
	muo.mutation.SetLevel(i)
	return muo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableLevel(i *int) *MenuUpdateOne {
	if i != nil {
		muo.SetLevel(*i)
	}
	return muo
}

// AddLevel adds i to the "level" field.
func (muo *MenuUpdateOne) AddLevel(i int) *MenuUpdateOne {
	muo.mutation.AddLevel(i)
	return muo
}

// SetSort sets the "sort" field.
func (muo *MenuUpdateOne) SetSort(i int) *MenuUpdateOne {
	muo.mutation.ResetSort()
	muo.mutation.SetSort(i)
	return muo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableSort(i *int) *MenuUpdateOne {
	if i != nil {
		muo.SetSort(*i)
	}
	return muo
}

// AddSort adds i to the "sort" field.
func (muo *MenuUpdateOne) AddSort(i int) *MenuUpdateOne {
	muo.mutation.AddSort(i)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MenuUpdateOne) SetStatus(pr property.Status) *MenuUpdateOne {
	muo.mutation.SetStatus(pr)
	return muo
}

// SetIcon sets the "icon" field.
func (muo *MenuUpdateOne) SetIcon(s string) *MenuUpdateOne {
	muo.mutation.SetIcon(s)
	return muo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableIcon(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetIcon(*s)
	}
	return muo
}

// ClearIcon clears the value of the "icon" field.
func (muo *MenuUpdateOne) ClearIcon() *MenuUpdateOne {
	muo.mutation.ClearIcon()
	return muo
}

// SetHidden sets the "hidden" field.
func (muo *MenuUpdateOne) SetHidden(pr property.Status) *MenuUpdateOne {
	muo.mutation.SetHidden(pr)
	return muo
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableHidden(pr *property.Status) *MenuUpdateOne {
	if pr != nil {
		muo.SetHidden(*pr)
	}
	return muo
}

// ClearHidden clears the value of the "hidden" field.
func (muo *MenuUpdateOne) ClearHidden() *MenuUpdateOne {
	muo.mutation.ClearHidden()
	return muo
}

// SetDesc sets the "desc" field.
func (muo *MenuUpdateOne) SetDesc(s string) *MenuUpdateOne {
	muo.mutation.SetDesc(s)
	return muo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableDesc(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetDesc(*s)
	}
	return muo
}

// ClearDesc clears the value of the "desc" field.
func (muo *MenuUpdateOne) ClearDesc() *MenuUpdateOne {
	muo.mutation.ClearDesc()
	return muo
}

// SetNextID sets the "next" edge to the Menu entity by ID.
func (muo *MenuUpdateOne) SetNextID(id int) *MenuUpdateOne {
	muo.mutation.SetNextID(id)
	return muo
}

// SetNillableNextID sets the "next" edge to the Menu entity by ID if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableNextID(id *int) *MenuUpdateOne {
	if id != nil {
		muo = muo.SetNextID(*id)
	}
	return muo
}

// SetNext sets the "next" edge to the Menu entity.
func (muo *MenuUpdateOne) SetNext(m *Menu) *MenuUpdateOne {
	return muo.SetNextID(m.ID)
}

// SetPrevID sets the "prev" edge to the Menu entity by ID.
func (muo *MenuUpdateOne) SetPrevID(id int) *MenuUpdateOne {
	muo.mutation.SetPrevID(id)
	return muo
}

// SetNillablePrevID sets the "prev" edge to the Menu entity by ID if the given value is not nil.
func (muo *MenuUpdateOne) SetNillablePrevID(id *int) *MenuUpdateOne {
	if id != nil {
		muo = muo.SetPrevID(*id)
	}
	return muo
}

// SetPrev sets the "prev" edge to the Menu entity.
func (muo *MenuUpdateOne) SetPrev(m *Menu) *MenuUpdateOne {
	return muo.SetPrevID(m.ID)
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// ClearNext clears the "next" edge to the Menu entity.
func (muo *MenuUpdateOne) ClearNext() *MenuUpdateOne {
	muo.mutation.ClearNext()
	return muo
}

// ClearPrev clears the "prev" edge to the Menu entity.
func (muo *MenuUpdateOne) ClearPrev() *MenuUpdateOne {
	muo.mutation.ClearPrev()
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menu entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	var (
		err  error
		node *Menu
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MenuUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := menu.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MenuUpdateOne) check() error {
	if v, ok := muo.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Hidden(); ok {
		if err := menu.HiddenValidator(v); err != nil {
			return &ValidationError{Name: "hidden", err: fmt.Errorf("ent: validator failed for field \"hidden\": %w", err)}
		}
	}
	return nil
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menu.Table,
			Columns: menu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menu.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Menu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldPid,
		})
	}
	if value, ok := muo.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldPid,
		})
	}
	if muo.mutation.PidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: menu.FieldPid,
		})
	}
	if value, ok := muo.mutation.Tree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldTree,
		})
	}
	if muo.mutation.TreeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldTree,
		})
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldCreatedAt,
		})
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: menu.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menu.FieldUpdatedAt,
		})
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: menu.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldTitle,
		})
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldName,
		})
	}
	if muo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldName,
		})
	}
	if value, ok := muo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldURL,
		})
	}
	if muo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldURL,
		})
	}
	if value, ok := muo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldLevel,
		})
	}
	if value, ok := muo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldLevel,
		})
	}
	if value, ok := muo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldSort,
		})
	}
	if value, ok := muo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menu.FieldSort,
		})
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: menu.FieldStatus,
		})
	}
	if value, ok := muo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldIcon,
		})
	}
	if muo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldIcon,
		})
	}
	if value, ok := muo.mutation.Hidden(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: menu.FieldHidden,
		})
	}
	if muo.mutation.HiddenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: menu.FieldHidden,
		})
	}
	if value, ok := muo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menu.FieldDesc,
		})
	}
	if muo.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: menu.FieldDesc,
		})
	}
	if muo.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   menu.NextTable,
			Columns: []string{menu.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   menu.NextTable,
			Columns: []string{menu.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   menu.PrevTable,
			Columns: []string{menu.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   menu.PrevTable,
			Columns: []string{menu.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: menu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Menu{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
