// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"orse/ent/order"
	"orse/ent/orderamounts"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderAmountsCreate is the builder for creating a OrderAmounts entity.
type OrderAmountsCreate struct {
	config
	mutation *OrderAmountsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oac *OrderAmountsCreate) SetCreatedAt(t time.Time) *OrderAmountsCreate {
	oac.mutation.SetCreatedAt(t)
	return oac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillableCreatedAt(t *time.Time) *OrderAmountsCreate {
	if t != nil {
		oac.SetCreatedAt(*t)
	}
	return oac
}

// SetUpdatedAt sets the "updated_at" field.
func (oac *OrderAmountsCreate) SetUpdatedAt(t time.Time) *OrderAmountsCreate {
	oac.mutation.SetUpdatedAt(t)
	return oac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillableUpdatedAt(t *time.Time) *OrderAmountsCreate {
	if t != nil {
		oac.SetUpdatedAt(*t)
	}
	return oac
}

// SetOrderID sets the "order_id" field.
func (oac *OrderAmountsCreate) SetOrderID(i int) *OrderAmountsCreate {
	oac.mutation.SetOrderID(i)
	return oac
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillableOrderID(i *int) *OrderAmountsCreate {
	if i != nil {
		oac.SetOrderID(*i)
	}
	return oac
}

// SetTotalAmount sets the "total_amount" field.
func (oac *OrderAmountsCreate) SetTotalAmount(f float64) *OrderAmountsCreate {
	oac.mutation.SetTotalAmount(f)
	return oac
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillableTotalAmount(f *float64) *OrderAmountsCreate {
	if f != nil {
		oac.SetTotalAmount(*f)
	}
	return oac
}

// SetPayAmount sets the "pay_amount" field.
func (oac *OrderAmountsCreate) SetPayAmount(f float64) *OrderAmountsCreate {
	oac.mutation.SetPayAmount(f)
	return oac
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillablePayAmount(f *float64) *OrderAmountsCreate {
	if f != nil {
		oac.SetPayAmount(*f)
	}
	return oac
}

// SetFreightAmount sets the "freight_amount" field.
func (oac *OrderAmountsCreate) SetFreightAmount(f float64) *OrderAmountsCreate {
	oac.mutation.SetFreightAmount(f)
	return oac
}

// SetNillableFreightAmount sets the "freight_amount" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillableFreightAmount(f *float64) *OrderAmountsCreate {
	if f != nil {
		oac.SetFreightAmount(*f)
	}
	return oac
}

// SetPromotionAmount sets the "promotion_amount" field.
func (oac *OrderAmountsCreate) SetPromotionAmount(f float64) *OrderAmountsCreate {
	oac.mutation.SetPromotionAmount(f)
	return oac
}

// SetNillablePromotionAmount sets the "promotion_amount" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillablePromotionAmount(f *float64) *OrderAmountsCreate {
	if f != nil {
		oac.SetPromotionAmount(*f)
	}
	return oac
}

// SetIntegrationAmount sets the "integration_amount" field.
func (oac *OrderAmountsCreate) SetIntegrationAmount(f float64) *OrderAmountsCreate {
	oac.mutation.SetIntegrationAmount(f)
	return oac
}

// SetNillableIntegrationAmount sets the "integration_amount" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillableIntegrationAmount(f *float64) *OrderAmountsCreate {
	if f != nil {
		oac.SetIntegrationAmount(*f)
	}
	return oac
}

// SetCouponID sets the "coupon_id" field.
func (oac *OrderAmountsCreate) SetCouponID(i int) *OrderAmountsCreate {
	oac.mutation.SetCouponID(i)
	return oac
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillableCouponID(i *int) *OrderAmountsCreate {
	if i != nil {
		oac.SetCouponID(*i)
	}
	return oac
}

// SetCouponAmount sets the "coupon_amount" field.
func (oac *OrderAmountsCreate) SetCouponAmount(f float64) *OrderAmountsCreate {
	oac.mutation.SetCouponAmount(f)
	return oac
}

// SetNillableCouponAmount sets the "coupon_amount" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillableCouponAmount(f *float64) *OrderAmountsCreate {
	if f != nil {
		oac.SetCouponAmount(*f)
	}
	return oac
}

// SetDiscountAmount sets the "discount_amount" field.
func (oac *OrderAmountsCreate) SetDiscountAmount(f float64) *OrderAmountsCreate {
	oac.mutation.SetDiscountAmount(f)
	return oac
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (oac *OrderAmountsCreate) SetNillableDiscountAmount(f *float64) *OrderAmountsCreate {
	if f != nil {
		oac.SetDiscountAmount(*f)
	}
	return oac
}

// SetOrder sets the "order" edge to the Order entity.
func (oac *OrderAmountsCreate) SetOrder(o *Order) *OrderAmountsCreate {
	return oac.SetOrderID(o.ID)
}

// Mutation returns the OrderAmountsMutation object of the builder.
func (oac *OrderAmountsCreate) Mutation() *OrderAmountsMutation {
	return oac.mutation
}

// Save creates the OrderAmounts in the database.
func (oac *OrderAmountsCreate) Save(ctx context.Context) (*OrderAmounts, error) {
	var (
		err  error
		node *OrderAmounts
	)
	oac.defaults()
	if len(oac.hooks) == 0 {
		if err = oac.check(); err != nil {
			return nil, err
		}
		node, err = oac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderAmountsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oac.check(); err != nil {
				return nil, err
			}
			oac.mutation = mutation
			if node, err = oac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oac.hooks) - 1; i >= 0; i-- {
			if oac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oac *OrderAmountsCreate) SaveX(ctx context.Context) *OrderAmounts {
	v, err := oac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oac *OrderAmountsCreate) Exec(ctx context.Context) error {
	_, err := oac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oac *OrderAmountsCreate) ExecX(ctx context.Context) {
	if err := oac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oac *OrderAmountsCreate) defaults() {
	if _, ok := oac.mutation.CreatedAt(); !ok {
		v := orderamounts.DefaultCreatedAt()
		oac.mutation.SetCreatedAt(v)
	}
	if _, ok := oac.mutation.UpdatedAt(); !ok {
		v := orderamounts.DefaultUpdatedAt()
		oac.mutation.SetUpdatedAt(v)
	}
	if _, ok := oac.mutation.TotalAmount(); !ok {
		v := orderamounts.DefaultTotalAmount
		oac.mutation.SetTotalAmount(v)
	}
	if _, ok := oac.mutation.PayAmount(); !ok {
		v := orderamounts.DefaultPayAmount
		oac.mutation.SetPayAmount(v)
	}
	if _, ok := oac.mutation.FreightAmount(); !ok {
		v := orderamounts.DefaultFreightAmount
		oac.mutation.SetFreightAmount(v)
	}
	if _, ok := oac.mutation.PromotionAmount(); !ok {
		v := orderamounts.DefaultPromotionAmount
		oac.mutation.SetPromotionAmount(v)
	}
	if _, ok := oac.mutation.IntegrationAmount(); !ok {
		v := orderamounts.DefaultIntegrationAmount
		oac.mutation.SetIntegrationAmount(v)
	}
	if _, ok := oac.mutation.CouponAmount(); !ok {
		v := orderamounts.DefaultCouponAmount
		oac.mutation.SetCouponAmount(v)
	}
	if _, ok := oac.mutation.DiscountAmount(); !ok {
		v := orderamounts.DefaultDiscountAmount
		oac.mutation.SetDiscountAmount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oac *OrderAmountsCreate) check() error {
	if _, ok := oac.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`ent: missing required field "total_amount"`)}
	}
	if _, ok := oac.mutation.PayAmount(); !ok {
		return &ValidationError{Name: "pay_amount", err: errors.New(`ent: missing required field "pay_amount"`)}
	}
	if _, ok := oac.mutation.FreightAmount(); !ok {
		return &ValidationError{Name: "freight_amount", err: errors.New(`ent: missing required field "freight_amount"`)}
	}
	if _, ok := oac.mutation.PromotionAmount(); !ok {
		return &ValidationError{Name: "promotion_amount", err: errors.New(`ent: missing required field "promotion_amount"`)}
	}
	if _, ok := oac.mutation.IntegrationAmount(); !ok {
		return &ValidationError{Name: "integration_amount", err: errors.New(`ent: missing required field "integration_amount"`)}
	}
	if _, ok := oac.mutation.CouponAmount(); !ok {
		return &ValidationError{Name: "coupon_amount", err: errors.New(`ent: missing required field "coupon_amount"`)}
	}
	if _, ok := oac.mutation.DiscountAmount(); !ok {
		return &ValidationError{Name: "discount_amount", err: errors.New(`ent: missing required field "discount_amount"`)}
	}
	return nil
}

func (oac *OrderAmountsCreate) sqlSave(ctx context.Context) (*OrderAmounts, error) {
	_node, _spec := oac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oac *OrderAmountsCreate) createSpec() (*OrderAmounts, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderAmounts{config: oac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderamounts.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderamounts.FieldID,
			},
		}
	)
	if value, ok := oac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderamounts.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderamounts.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oac.mutation.TotalAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldTotalAmount,
		})
		_node.TotalAmount = value
	}
	if value, ok := oac.mutation.PayAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPayAmount,
		})
		_node.PayAmount = value
	}
	if value, ok := oac.mutation.FreightAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldFreightAmount,
		})
		_node.FreightAmount = value
	}
	if value, ok := oac.mutation.PromotionAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPromotionAmount,
		})
		_node.PromotionAmount = value
	}
	if value, ok := oac.mutation.IntegrationAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldIntegrationAmount,
		})
		_node.IntegrationAmount = value
	}
	if value, ok := oac.mutation.CouponID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderamounts.FieldCouponID,
		})
		_node.CouponID = value
	}
	if value, ok := oac.mutation.CouponAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldCouponAmount,
		})
		_node.CouponAmount = value
	}
	if value, ok := oac.mutation.DiscountAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldDiscountAmount,
		})
		_node.DiscountAmount = value
	}
	if nodes := oac.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderamounts.OrderTable,
			Columns: []string{orderamounts.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderAmountsCreateBulk is the builder for creating many OrderAmounts entities in bulk.
type OrderAmountsCreateBulk struct {
	config
	builders []*OrderAmountsCreate
}

// Save creates the OrderAmounts entities in the database.
func (oacb *OrderAmountsCreateBulk) Save(ctx context.Context) ([]*OrderAmounts, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oacb.builders))
	nodes := make([]*OrderAmounts, len(oacb.builders))
	mutators := make([]Mutator, len(oacb.builders))
	for i := range oacb.builders {
		func(i int, root context.Context) {
			builder := oacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderAmountsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oacb *OrderAmountsCreateBulk) SaveX(ctx context.Context) []*OrderAmounts {
	v, err := oacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacb *OrderAmountsCreateBulk) Exec(ctx context.Context) error {
	_, err := oacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacb *OrderAmountsCreateBulk) ExecX(ctx context.Context) {
	if err := oacb.Exec(ctx); err != nil {
		panic(err)
	}
}
