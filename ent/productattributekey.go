// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/productattributekey"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProductAttributeKey is the model entity for the ProductAttributeKey schema.
type ProductAttributeKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort int `json:"sort,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductAttributeKeyQuery when eager-loading is set.
	Edges ProductAttributeKeyEdges `json:"edges"`
}

// ProductAttributeKeyEdges holds the relations/edges for other nodes in the graph.
type ProductAttributeKeyEdges struct {
	// Values holds the value of the values edge.
	Values []*ProductAttributeValue `json:"values,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ValuesOrErr returns the Values value or an error if the edge
// was not loaded in eager-loading.
func (e ProductAttributeKeyEdges) ValuesOrErr() ([]*ProductAttributeValue, error) {
	if e.loadedTypes[0] {
		return e.Values, nil
	}
	return nil, &NotLoadedError{edge: "values"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductAttributeKey) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productattributekey.FieldID, productattributekey.FieldProductID, productattributekey.FieldSort:
			values[i] = new(sql.NullInt64)
		case productattributekey.FieldName:
			values[i] = new(sql.NullString)
		case productattributekey.FieldCreatedAt, productattributekey.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductAttributeKey", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductAttributeKey fields.
func (pak *ProductAttributeKey) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productattributekey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pak.ID = int(value.Int64)
		case productattributekey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pak.CreatedAt = value.Time
			}
		case productattributekey.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pak.UpdatedAt = value.Time
			}
		case productattributekey.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pak.ProductID = int(value.Int64)
			}
		case productattributekey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pak.Name = value.String
			}
		case productattributekey.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				pak.Sort = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryValues queries the "values" edge of the ProductAttributeKey entity.
func (pak *ProductAttributeKey) QueryValues() *ProductAttributeValueQuery {
	return (&ProductAttributeKeyClient{config: pak.config}).QueryValues(pak)
}

// Update returns a builder for updating this ProductAttributeKey.
// Note that you need to call ProductAttributeKey.Unwrap() before calling this method if this ProductAttributeKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (pak *ProductAttributeKey) Update() *ProductAttributeKeyUpdateOne {
	return (&ProductAttributeKeyClient{config: pak.config}).UpdateOne(pak)
}

// Unwrap unwraps the ProductAttributeKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pak *ProductAttributeKey) Unwrap() *ProductAttributeKey {
	tx, ok := pak.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductAttributeKey is not a transactional entity")
	}
	pak.config.driver = tx.drv
	return pak
}

// String implements the fmt.Stringer.
func (pak *ProductAttributeKey) String() string {
	var builder strings.Builder
	builder.WriteString("ProductAttributeKey(")
	builder.WriteString(fmt.Sprintf("id=%v", pak.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pak.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pak.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", product_id=")
	builder.WriteString(fmt.Sprintf("%v", pak.ProductID))
	builder.WriteString(", name=")
	builder.WriteString(pak.Name)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", pak.Sort))
	builder.WriteByte(')')
	return builder.String()
}

// ProductAttributeKeys is a parsable slice of ProductAttributeKey.
type ProductAttributeKeys []*ProductAttributeKey

func (pak ProductAttributeKeys) config(cfg config) {
	for _i := range pak {
		pak[_i].config = cfg
	}
}
