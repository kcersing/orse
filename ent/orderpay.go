// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/order"
	"orse/ent/orderpay"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// OrderPay is the model entity for the OrderPay schema.
type OrderPay struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CreateID holds the value of the "create_id" field.
	CreateID int `json:"create_id,omitempty"`
	// Sn holds the value of the "sn" field.
	Sn string `json:"sn,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// PayMode holds the value of the "pay_mode" field.
	PayMode string `json:"pay_mode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderPayQuery when eager-loading is set.
	Edges     OrderPayEdges `json:"edges"`
	order_pay *int
}

// OrderPayEdges holds the relations/edges for other nodes in the graph.
type OrderPayEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Order `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderPayEdges) OwnerOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderPay) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderpay.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case orderpay.FieldID, orderpay.FieldUserID, orderpay.FieldCreateID:
			values[i] = new(sql.NullInt64)
		case orderpay.FieldSn, orderpay.FieldPayMode:
			values[i] = new(sql.NullString)
		case orderpay.FieldCreatedAt, orderpay.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case orderpay.ForeignKeys[0]: // order_pay
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderPay", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderPay fields.
func (op *OrderPay) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderpay.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			op.ID = int(value.Int64)
		case orderpay.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				op.CreatedAt = value.Time
			}
		case orderpay.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				op.UpdatedAt = value.Time
			}
		case orderpay.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				op.UserID = int(value.Int64)
			}
		case orderpay.FieldCreateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_id", values[i])
			} else if value.Valid {
				op.CreateID = int(value.Int64)
			}
		case orderpay.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				op.Sn = value.String
			}
		case orderpay.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				op.Price = value.Float64
			}
		case orderpay.FieldPayMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_mode", values[i])
			} else if value.Valid {
				op.PayMode = value.String
			}
		case orderpay.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_pay", value)
			} else if value.Valid {
				op.order_pay = new(int)
				*op.order_pay = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the OrderPay entity.
func (op *OrderPay) QueryOwner() *OrderQuery {
	return (&OrderPayClient{config: op.config}).QueryOwner(op)
}

// Update returns a builder for updating this OrderPay.
// Note that you need to call OrderPay.Unwrap() before calling this method if this OrderPay
// was returned from a transaction, and the transaction was committed or rolled back.
func (op *OrderPay) Update() *OrderPayUpdateOne {
	return (&OrderPayClient{config: op.config}).UpdateOne(op)
}

// Unwrap unwraps the OrderPay entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (op *OrderPay) Unwrap() *OrderPay {
	tx, ok := op.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderPay is not a transactional entity")
	}
	op.config.driver = tx.drv
	return op
}

// String implements the fmt.Stringer.
func (op *OrderPay) String() string {
	var builder strings.Builder
	builder.WriteString("OrderPay(")
	builder.WriteString(fmt.Sprintf("id=%v", op.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(op.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(op.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", op.UserID))
	builder.WriteString(", create_id=")
	builder.WriteString(fmt.Sprintf("%v", op.CreateID))
	builder.WriteString(", sn=")
	builder.WriteString(op.Sn)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", op.Price))
	builder.WriteString(", pay_mode=")
	builder.WriteString(op.PayMode)
	builder.WriteByte(')')
	return builder.String()
}

// OrderPays is a parsable slice of OrderPay.
type OrderPays []*OrderPay

func (op OrderPays) config(cfg config) {
	for _i := range op {
		op[_i].config = cfg
	}
}
