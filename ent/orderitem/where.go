// Code generated by entc, DO NOT EDIT.

package orderitem

import (
	"orse/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// ProductCateID applies equality check predicate on the "product_cate_id" field. It's identical to ProductCateIDEQ.
func ProductCateID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductCateID), v))
	})
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductPic applies equality check predicate on the "product_pic" field. It's identical to ProductPicEQ.
func ProductPic(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPic), v))
	})
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// ProductSn applies equality check predicate on the "product_sn" field. It's identical to ProductSnEQ.
func ProductSn(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductSn), v))
	})
}

// ProductPrice applies equality check predicate on the "product_price" field. It's identical to ProductPriceEQ.
func ProductPrice(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPrice), v))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// ProductSpecsID applies equality check predicate on the "product_specs_id" field. It's identical to ProductSpecsIDEQ.
func ProductSpecsID(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductSpecsID), v))
	})
}

// ProductSpecsSn applies equality check predicate on the "product_specs_sn" field. It's identical to ProductSpecsSnEQ.
func ProductSpecsSn(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsAttr applies equality check predicate on the "product_specs_attr" field. It's identical to ProductSpecsAttrEQ.
func ProductSpecsAttr(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductSpecsAttr), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderID)))
	})
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderID)))
	})
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSn), v))
	})
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSn), v...))
	})
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSn), v...))
	})
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSn), v))
	})
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSn), v))
	})
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSn), v))
	})
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSn), v))
	})
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSn), v))
	})
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSn), v))
	})
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSn), v))
	})
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSn), v))
	})
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSn), v))
	})
}

// ProductCateIDEQ applies the EQ predicate on the "product_cate_id" field.
func ProductCateIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductCateID), v))
	})
}

// ProductCateIDNEQ applies the NEQ predicate on the "product_cate_id" field.
func ProductCateIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductCateID), v))
	})
}

// ProductCateIDIn applies the In predicate on the "product_cate_id" field.
func ProductCateIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductCateID), v...))
	})
}

// ProductCateIDNotIn applies the NotIn predicate on the "product_cate_id" field.
func ProductCateIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductCateID), v...))
	})
}

// ProductCateIDGT applies the GT predicate on the "product_cate_id" field.
func ProductCateIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductCateID), v))
	})
}

// ProductCateIDGTE applies the GTE predicate on the "product_cate_id" field.
func ProductCateIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductCateID), v))
	})
}

// ProductCateIDLT applies the LT predicate on the "product_cate_id" field.
func ProductCateIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductCateID), v))
	})
}

// ProductCateIDLTE applies the LTE predicate on the "product_cate_id" field.
func ProductCateIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductCateID), v))
	})
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductID), v))
	})
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductID), v))
	})
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductID), v...))
	})
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductID), v...))
	})
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductID), v))
	})
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductID), v))
	})
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductID), v))
	})
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductID), v))
	})
}

// ProductPicEQ applies the EQ predicate on the "product_pic" field.
func ProductPicEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPic), v))
	})
}

// ProductPicNEQ applies the NEQ predicate on the "product_pic" field.
func ProductPicNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPic), v))
	})
}

// ProductPicIn applies the In predicate on the "product_pic" field.
func ProductPicIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPic), v...))
	})
}

// ProductPicNotIn applies the NotIn predicate on the "product_pic" field.
func ProductPicNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPic), v...))
	})
}

// ProductPicGT applies the GT predicate on the "product_pic" field.
func ProductPicGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPic), v))
	})
}

// ProductPicGTE applies the GTE predicate on the "product_pic" field.
func ProductPicGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPic), v))
	})
}

// ProductPicLT applies the LT predicate on the "product_pic" field.
func ProductPicLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPic), v))
	})
}

// ProductPicLTE applies the LTE predicate on the "product_pic" field.
func ProductPicLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPic), v))
	})
}

// ProductPicContains applies the Contains predicate on the "product_pic" field.
func ProductPicContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductPic), v))
	})
}

// ProductPicHasPrefix applies the HasPrefix predicate on the "product_pic" field.
func ProductPicHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductPic), v))
	})
}

// ProductPicHasSuffix applies the HasSuffix predicate on the "product_pic" field.
func ProductPicHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductPic), v))
	})
}

// ProductPicEqualFold applies the EqualFold predicate on the "product_pic" field.
func ProductPicEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductPic), v))
	})
}

// ProductPicContainsFold applies the ContainsFold predicate on the "product_pic" field.
func ProductPicContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductPic), v))
	})
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductName), v))
	})
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductName), v...))
	})
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductName), v...))
	})
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductName), v))
	})
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductName), v))
	})
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductName), v))
	})
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductName), v))
	})
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductName), v))
	})
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductName), v))
	})
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductName), v))
	})
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductName), v))
	})
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductName), v))
	})
}

// ProductSnEQ applies the EQ predicate on the "product_sn" field.
func ProductSnEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductSn), v))
	})
}

// ProductSnNEQ applies the NEQ predicate on the "product_sn" field.
func ProductSnNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductSn), v))
	})
}

// ProductSnIn applies the In predicate on the "product_sn" field.
func ProductSnIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductSn), v...))
	})
}

// ProductSnNotIn applies the NotIn predicate on the "product_sn" field.
func ProductSnNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductSn), v...))
	})
}

// ProductSnGT applies the GT predicate on the "product_sn" field.
func ProductSnGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductSn), v))
	})
}

// ProductSnGTE applies the GTE predicate on the "product_sn" field.
func ProductSnGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductSn), v))
	})
}

// ProductSnLT applies the LT predicate on the "product_sn" field.
func ProductSnLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductSn), v))
	})
}

// ProductSnLTE applies the LTE predicate on the "product_sn" field.
func ProductSnLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductSn), v))
	})
}

// ProductPriceEQ applies the EQ predicate on the "product_price" field.
func ProductPriceEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPrice), v))
	})
}

// ProductPriceNEQ applies the NEQ predicate on the "product_price" field.
func ProductPriceNEQ(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPrice), v))
	})
}

// ProductPriceIn applies the In predicate on the "product_price" field.
func ProductPriceIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPrice), v...))
	})
}

// ProductPriceNotIn applies the NotIn predicate on the "product_price" field.
func ProductPriceNotIn(vs ...float64) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPrice), v...))
	})
}

// ProductPriceGT applies the GT predicate on the "product_price" field.
func ProductPriceGT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPrice), v))
	})
}

// ProductPriceGTE applies the GTE predicate on the "product_price" field.
func ProductPriceGTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPrice), v))
	})
}

// ProductPriceLT applies the LT predicate on the "product_price" field.
func ProductPriceLT(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPrice), v))
	})
}

// ProductPriceLTE applies the LTE predicate on the "product_price" field.
func ProductPriceLTE(v float64) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPrice), v))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// ProductSpecsIDEQ applies the EQ predicate on the "product_specs_id" field.
func ProductSpecsIDEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductSpecsID), v))
	})
}

// ProductSpecsIDNEQ applies the NEQ predicate on the "product_specs_id" field.
func ProductSpecsIDNEQ(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductSpecsID), v))
	})
}

// ProductSpecsIDIn applies the In predicate on the "product_specs_id" field.
func ProductSpecsIDIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductSpecsID), v...))
	})
}

// ProductSpecsIDNotIn applies the NotIn predicate on the "product_specs_id" field.
func ProductSpecsIDNotIn(vs ...int) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductSpecsID), v...))
	})
}

// ProductSpecsIDGT applies the GT predicate on the "product_specs_id" field.
func ProductSpecsIDGT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductSpecsID), v))
	})
}

// ProductSpecsIDGTE applies the GTE predicate on the "product_specs_id" field.
func ProductSpecsIDGTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductSpecsID), v))
	})
}

// ProductSpecsIDLT applies the LT predicate on the "product_specs_id" field.
func ProductSpecsIDLT(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductSpecsID), v))
	})
}

// ProductSpecsIDLTE applies the LTE predicate on the "product_specs_id" field.
func ProductSpecsIDLTE(v int) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductSpecsID), v))
	})
}

// ProductSpecsSnEQ applies the EQ predicate on the "product_specs_sn" field.
func ProductSpecsSnEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnNEQ applies the NEQ predicate on the "product_specs_sn" field.
func ProductSpecsSnNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnIn applies the In predicate on the "product_specs_sn" field.
func ProductSpecsSnIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductSpecsSn), v...))
	})
}

// ProductSpecsSnNotIn applies the NotIn predicate on the "product_specs_sn" field.
func ProductSpecsSnNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductSpecsSn), v...))
	})
}

// ProductSpecsSnGT applies the GT predicate on the "product_specs_sn" field.
func ProductSpecsSnGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnGTE applies the GTE predicate on the "product_specs_sn" field.
func ProductSpecsSnGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnLT applies the LT predicate on the "product_specs_sn" field.
func ProductSpecsSnLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnLTE applies the LTE predicate on the "product_specs_sn" field.
func ProductSpecsSnLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnContains applies the Contains predicate on the "product_specs_sn" field.
func ProductSpecsSnContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnHasPrefix applies the HasPrefix predicate on the "product_specs_sn" field.
func ProductSpecsSnHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnHasSuffix applies the HasSuffix predicate on the "product_specs_sn" field.
func ProductSpecsSnHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnEqualFold applies the EqualFold predicate on the "product_specs_sn" field.
func ProductSpecsSnEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsSnContainsFold applies the ContainsFold predicate on the "product_specs_sn" field.
func ProductSpecsSnContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductSpecsSn), v))
	})
}

// ProductSpecsAttrEQ applies the EQ predicate on the "product_specs_attr" field.
func ProductSpecsAttrEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrNEQ applies the NEQ predicate on the "product_specs_attr" field.
func ProductSpecsAttrNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrIn applies the In predicate on the "product_specs_attr" field.
func ProductSpecsAttrIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductSpecsAttr), v...))
	})
}

// ProductSpecsAttrNotIn applies the NotIn predicate on the "product_specs_attr" field.
func ProductSpecsAttrNotIn(vs ...string) predicate.OrderItem {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderItem(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductSpecsAttr), v...))
	})
}

// ProductSpecsAttrGT applies the GT predicate on the "product_specs_attr" field.
func ProductSpecsAttrGT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrGTE applies the GTE predicate on the "product_specs_attr" field.
func ProductSpecsAttrGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrLT applies the LT predicate on the "product_specs_attr" field.
func ProductSpecsAttrLT(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrLTE applies the LTE predicate on the "product_specs_attr" field.
func ProductSpecsAttrLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrContains applies the Contains predicate on the "product_specs_attr" field.
func ProductSpecsAttrContains(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrHasPrefix applies the HasPrefix predicate on the "product_specs_attr" field.
func ProductSpecsAttrHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrHasSuffix applies the HasSuffix predicate on the "product_specs_attr" field.
func ProductSpecsAttrHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrEqualFold applies the EqualFold predicate on the "product_specs_attr" field.
func ProductSpecsAttrEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductSpecsAttr), v))
	})
}

// ProductSpecsAttrContainsFold applies the ContainsFold predicate on the "product_specs_attr" field.
func ProductSpecsAttrContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductSpecsAttr), v))
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
