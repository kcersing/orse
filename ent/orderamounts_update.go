// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/order"
	"orse/ent/orderamounts"
	"orse/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderAmountsUpdate is the builder for updating OrderAmounts entities.
type OrderAmountsUpdate struct {
	config
	hooks    []Hook
	mutation *OrderAmountsMutation
}

// Where appends a list predicates to the OrderAmountsUpdate builder.
func (oau *OrderAmountsUpdate) Where(ps ...predicate.OrderAmounts) *OrderAmountsUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetCreatedAt sets the "created_at" field.
func (oau *OrderAmountsUpdate) SetCreatedAt(t time.Time) *OrderAmountsUpdate {
	oau.mutation.SetCreatedAt(t)
	return oau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillableCreatedAt(t *time.Time) *OrderAmountsUpdate {
	if t != nil {
		oau.SetCreatedAt(*t)
	}
	return oau
}

// ClearCreatedAt clears the value of the "created_at" field.
func (oau *OrderAmountsUpdate) ClearCreatedAt() *OrderAmountsUpdate {
	oau.mutation.ClearCreatedAt()
	return oau
}

// SetUpdatedAt sets the "updated_at" field.
func (oau *OrderAmountsUpdate) SetUpdatedAt(t time.Time) *OrderAmountsUpdate {
	oau.mutation.SetUpdatedAt(t)
	return oau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oau *OrderAmountsUpdate) ClearUpdatedAt() *OrderAmountsUpdate {
	oau.mutation.ClearUpdatedAt()
	return oau
}

// SetOrderID sets the "order_id" field.
func (oau *OrderAmountsUpdate) SetOrderID(i int) *OrderAmountsUpdate {
	oau.mutation.SetOrderID(i)
	return oau
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillableOrderID(i *int) *OrderAmountsUpdate {
	if i != nil {
		oau.SetOrderID(*i)
	}
	return oau
}

// ClearOrderID clears the value of the "order_id" field.
func (oau *OrderAmountsUpdate) ClearOrderID() *OrderAmountsUpdate {
	oau.mutation.ClearOrderID()
	return oau
}

// SetTotalAmount sets the "total_amount" field.
func (oau *OrderAmountsUpdate) SetTotalAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.ResetTotalAmount()
	oau.mutation.SetTotalAmount(f)
	return oau
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillableTotalAmount(f *float64) *OrderAmountsUpdate {
	if f != nil {
		oau.SetTotalAmount(*f)
	}
	return oau
}

// AddTotalAmount adds f to the "total_amount" field.
func (oau *OrderAmountsUpdate) AddTotalAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.AddTotalAmount(f)
	return oau
}

// SetPayAmount sets the "pay_amount" field.
func (oau *OrderAmountsUpdate) SetPayAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.ResetPayAmount()
	oau.mutation.SetPayAmount(f)
	return oau
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillablePayAmount(f *float64) *OrderAmountsUpdate {
	if f != nil {
		oau.SetPayAmount(*f)
	}
	return oau
}

// AddPayAmount adds f to the "pay_amount" field.
func (oau *OrderAmountsUpdate) AddPayAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.AddPayAmount(f)
	return oau
}

// SetFreightAmount sets the "freight_amount" field.
func (oau *OrderAmountsUpdate) SetFreightAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.ResetFreightAmount()
	oau.mutation.SetFreightAmount(f)
	return oau
}

// SetNillableFreightAmount sets the "freight_amount" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillableFreightAmount(f *float64) *OrderAmountsUpdate {
	if f != nil {
		oau.SetFreightAmount(*f)
	}
	return oau
}

// AddFreightAmount adds f to the "freight_amount" field.
func (oau *OrderAmountsUpdate) AddFreightAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.AddFreightAmount(f)
	return oau
}

// SetPromotionAmount sets the "promotion_amount" field.
func (oau *OrderAmountsUpdate) SetPromotionAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.ResetPromotionAmount()
	oau.mutation.SetPromotionAmount(f)
	return oau
}

// SetNillablePromotionAmount sets the "promotion_amount" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillablePromotionAmount(f *float64) *OrderAmountsUpdate {
	if f != nil {
		oau.SetPromotionAmount(*f)
	}
	return oau
}

// AddPromotionAmount adds f to the "promotion_amount" field.
func (oau *OrderAmountsUpdate) AddPromotionAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.AddPromotionAmount(f)
	return oau
}

// SetIntegrationAmount sets the "integration_amount" field.
func (oau *OrderAmountsUpdate) SetIntegrationAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.ResetIntegrationAmount()
	oau.mutation.SetIntegrationAmount(f)
	return oau
}

// SetNillableIntegrationAmount sets the "integration_amount" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillableIntegrationAmount(f *float64) *OrderAmountsUpdate {
	if f != nil {
		oau.SetIntegrationAmount(*f)
	}
	return oau
}

// AddIntegrationAmount adds f to the "integration_amount" field.
func (oau *OrderAmountsUpdate) AddIntegrationAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.AddIntegrationAmount(f)
	return oau
}

// SetCouponID sets the "coupon_id" field.
func (oau *OrderAmountsUpdate) SetCouponID(i int) *OrderAmountsUpdate {
	oau.mutation.ResetCouponID()
	oau.mutation.SetCouponID(i)
	return oau
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillableCouponID(i *int) *OrderAmountsUpdate {
	if i != nil {
		oau.SetCouponID(*i)
	}
	return oau
}

// AddCouponID adds i to the "coupon_id" field.
func (oau *OrderAmountsUpdate) AddCouponID(i int) *OrderAmountsUpdate {
	oau.mutation.AddCouponID(i)
	return oau
}

// ClearCouponID clears the value of the "coupon_id" field.
func (oau *OrderAmountsUpdate) ClearCouponID() *OrderAmountsUpdate {
	oau.mutation.ClearCouponID()
	return oau
}

// SetCouponAmount sets the "coupon_amount" field.
func (oau *OrderAmountsUpdate) SetCouponAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.ResetCouponAmount()
	oau.mutation.SetCouponAmount(f)
	return oau
}

// SetNillableCouponAmount sets the "coupon_amount" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillableCouponAmount(f *float64) *OrderAmountsUpdate {
	if f != nil {
		oau.SetCouponAmount(*f)
	}
	return oau
}

// AddCouponAmount adds f to the "coupon_amount" field.
func (oau *OrderAmountsUpdate) AddCouponAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.AddCouponAmount(f)
	return oau
}

// SetDiscountAmount sets the "discount_amount" field.
func (oau *OrderAmountsUpdate) SetDiscountAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.ResetDiscountAmount()
	oau.mutation.SetDiscountAmount(f)
	return oau
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (oau *OrderAmountsUpdate) SetNillableDiscountAmount(f *float64) *OrderAmountsUpdate {
	if f != nil {
		oau.SetDiscountAmount(*f)
	}
	return oau
}

// AddDiscountAmount adds f to the "discount_amount" field.
func (oau *OrderAmountsUpdate) AddDiscountAmount(f float64) *OrderAmountsUpdate {
	oau.mutation.AddDiscountAmount(f)
	return oau
}

// SetOrder sets the "order" edge to the Order entity.
func (oau *OrderAmountsUpdate) SetOrder(o *Order) *OrderAmountsUpdate {
	return oau.SetOrderID(o.ID)
}

// Mutation returns the OrderAmountsMutation object of the builder.
func (oau *OrderAmountsUpdate) Mutation() *OrderAmountsMutation {
	return oau.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oau *OrderAmountsUpdate) ClearOrder() *OrderAmountsUpdate {
	oau.mutation.ClearOrder()
	return oau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OrderAmountsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oau.defaults()
	if len(oau.hooks) == 0 {
		affected, err = oau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderAmountsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oau.mutation = mutation
			affected, err = oau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oau.hooks) - 1; i >= 0; i-- {
			if oau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OrderAmountsUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OrderAmountsUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OrderAmountsUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oau *OrderAmountsUpdate) defaults() {
	if _, ok := oau.mutation.UpdatedAt(); !ok && !oau.mutation.UpdatedAtCleared() {
		v := orderamounts.UpdateDefaultUpdatedAt()
		oau.mutation.SetUpdatedAt(v)
	}
}

func (oau *OrderAmountsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderamounts.Table,
			Columns: orderamounts.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderamounts.FieldID,
			},
		},
	}
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderamounts.FieldCreatedAt,
		})
	}
	if oau.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderamounts.FieldCreatedAt,
		})
	}
	if value, ok := oau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderamounts.FieldUpdatedAt,
		})
	}
	if oau.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderamounts.FieldUpdatedAt,
		})
	}
	if value, ok := oau.mutation.TotalAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldTotalAmount,
		})
	}
	if value, ok := oau.mutation.AddedTotalAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldTotalAmount,
		})
	}
	if value, ok := oau.mutation.PayAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPayAmount,
		})
	}
	if value, ok := oau.mutation.AddedPayAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPayAmount,
		})
	}
	if value, ok := oau.mutation.FreightAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldFreightAmount,
		})
	}
	if value, ok := oau.mutation.AddedFreightAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldFreightAmount,
		})
	}
	if value, ok := oau.mutation.PromotionAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPromotionAmount,
		})
	}
	if value, ok := oau.mutation.AddedPromotionAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPromotionAmount,
		})
	}
	if value, ok := oau.mutation.IntegrationAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldIntegrationAmount,
		})
	}
	if value, ok := oau.mutation.AddedIntegrationAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldIntegrationAmount,
		})
	}
	if value, ok := oau.mutation.CouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderamounts.FieldCouponID,
		})
	}
	if value, ok := oau.mutation.AddedCouponID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderamounts.FieldCouponID,
		})
	}
	if oau.mutation.CouponIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderamounts.FieldCouponID,
		})
	}
	if value, ok := oau.mutation.CouponAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldCouponAmount,
		})
	}
	if value, ok := oau.mutation.AddedCouponAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldCouponAmount,
		})
	}
	if value, ok := oau.mutation.DiscountAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldDiscountAmount,
		})
	}
	if value, ok := oau.mutation.AddedDiscountAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldDiscountAmount,
		})
	}
	if oau.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderamounts.OrderTable,
			Columns: []string{orderamounts.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderamounts.OrderTable,
			Columns: []string{orderamounts.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderamounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderAmountsUpdateOne is the builder for updating a single OrderAmounts entity.
type OrderAmountsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderAmountsMutation
}

// SetCreatedAt sets the "created_at" field.
func (oauo *OrderAmountsUpdateOne) SetCreatedAt(t time.Time) *OrderAmountsUpdateOne {
	oauo.mutation.SetCreatedAt(t)
	return oauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderAmountsUpdateOne {
	if t != nil {
		oauo.SetCreatedAt(*t)
	}
	return oauo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (oauo *OrderAmountsUpdateOne) ClearCreatedAt() *OrderAmountsUpdateOne {
	oauo.mutation.ClearCreatedAt()
	return oauo
}

// SetUpdatedAt sets the "updated_at" field.
func (oauo *OrderAmountsUpdateOne) SetUpdatedAt(t time.Time) *OrderAmountsUpdateOne {
	oauo.mutation.SetUpdatedAt(t)
	return oauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oauo *OrderAmountsUpdateOne) ClearUpdatedAt() *OrderAmountsUpdateOne {
	oauo.mutation.ClearUpdatedAt()
	return oauo
}

// SetOrderID sets the "order_id" field.
func (oauo *OrderAmountsUpdateOne) SetOrderID(i int) *OrderAmountsUpdateOne {
	oauo.mutation.SetOrderID(i)
	return oauo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillableOrderID(i *int) *OrderAmountsUpdateOne {
	if i != nil {
		oauo.SetOrderID(*i)
	}
	return oauo
}

// ClearOrderID clears the value of the "order_id" field.
func (oauo *OrderAmountsUpdateOne) ClearOrderID() *OrderAmountsUpdateOne {
	oauo.mutation.ClearOrderID()
	return oauo
}

// SetTotalAmount sets the "total_amount" field.
func (oauo *OrderAmountsUpdateOne) SetTotalAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.ResetTotalAmount()
	oauo.mutation.SetTotalAmount(f)
	return oauo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillableTotalAmount(f *float64) *OrderAmountsUpdateOne {
	if f != nil {
		oauo.SetTotalAmount(*f)
	}
	return oauo
}

// AddTotalAmount adds f to the "total_amount" field.
func (oauo *OrderAmountsUpdateOne) AddTotalAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.AddTotalAmount(f)
	return oauo
}

// SetPayAmount sets the "pay_amount" field.
func (oauo *OrderAmountsUpdateOne) SetPayAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.ResetPayAmount()
	oauo.mutation.SetPayAmount(f)
	return oauo
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillablePayAmount(f *float64) *OrderAmountsUpdateOne {
	if f != nil {
		oauo.SetPayAmount(*f)
	}
	return oauo
}

// AddPayAmount adds f to the "pay_amount" field.
func (oauo *OrderAmountsUpdateOne) AddPayAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.AddPayAmount(f)
	return oauo
}

// SetFreightAmount sets the "freight_amount" field.
func (oauo *OrderAmountsUpdateOne) SetFreightAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.ResetFreightAmount()
	oauo.mutation.SetFreightAmount(f)
	return oauo
}

// SetNillableFreightAmount sets the "freight_amount" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillableFreightAmount(f *float64) *OrderAmountsUpdateOne {
	if f != nil {
		oauo.SetFreightAmount(*f)
	}
	return oauo
}

// AddFreightAmount adds f to the "freight_amount" field.
func (oauo *OrderAmountsUpdateOne) AddFreightAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.AddFreightAmount(f)
	return oauo
}

// SetPromotionAmount sets the "promotion_amount" field.
func (oauo *OrderAmountsUpdateOne) SetPromotionAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.ResetPromotionAmount()
	oauo.mutation.SetPromotionAmount(f)
	return oauo
}

// SetNillablePromotionAmount sets the "promotion_amount" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillablePromotionAmount(f *float64) *OrderAmountsUpdateOne {
	if f != nil {
		oauo.SetPromotionAmount(*f)
	}
	return oauo
}

// AddPromotionAmount adds f to the "promotion_amount" field.
func (oauo *OrderAmountsUpdateOne) AddPromotionAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.AddPromotionAmount(f)
	return oauo
}

// SetIntegrationAmount sets the "integration_amount" field.
func (oauo *OrderAmountsUpdateOne) SetIntegrationAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.ResetIntegrationAmount()
	oauo.mutation.SetIntegrationAmount(f)
	return oauo
}

// SetNillableIntegrationAmount sets the "integration_amount" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillableIntegrationAmount(f *float64) *OrderAmountsUpdateOne {
	if f != nil {
		oauo.SetIntegrationAmount(*f)
	}
	return oauo
}

// AddIntegrationAmount adds f to the "integration_amount" field.
func (oauo *OrderAmountsUpdateOne) AddIntegrationAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.AddIntegrationAmount(f)
	return oauo
}

// SetCouponID sets the "coupon_id" field.
func (oauo *OrderAmountsUpdateOne) SetCouponID(i int) *OrderAmountsUpdateOne {
	oauo.mutation.ResetCouponID()
	oauo.mutation.SetCouponID(i)
	return oauo
}

// SetNillableCouponID sets the "coupon_id" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillableCouponID(i *int) *OrderAmountsUpdateOne {
	if i != nil {
		oauo.SetCouponID(*i)
	}
	return oauo
}

// AddCouponID adds i to the "coupon_id" field.
func (oauo *OrderAmountsUpdateOne) AddCouponID(i int) *OrderAmountsUpdateOne {
	oauo.mutation.AddCouponID(i)
	return oauo
}

// ClearCouponID clears the value of the "coupon_id" field.
func (oauo *OrderAmountsUpdateOne) ClearCouponID() *OrderAmountsUpdateOne {
	oauo.mutation.ClearCouponID()
	return oauo
}

// SetCouponAmount sets the "coupon_amount" field.
func (oauo *OrderAmountsUpdateOne) SetCouponAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.ResetCouponAmount()
	oauo.mutation.SetCouponAmount(f)
	return oauo
}

// SetNillableCouponAmount sets the "coupon_amount" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillableCouponAmount(f *float64) *OrderAmountsUpdateOne {
	if f != nil {
		oauo.SetCouponAmount(*f)
	}
	return oauo
}

// AddCouponAmount adds f to the "coupon_amount" field.
func (oauo *OrderAmountsUpdateOne) AddCouponAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.AddCouponAmount(f)
	return oauo
}

// SetDiscountAmount sets the "discount_amount" field.
func (oauo *OrderAmountsUpdateOne) SetDiscountAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.ResetDiscountAmount()
	oauo.mutation.SetDiscountAmount(f)
	return oauo
}

// SetNillableDiscountAmount sets the "discount_amount" field if the given value is not nil.
func (oauo *OrderAmountsUpdateOne) SetNillableDiscountAmount(f *float64) *OrderAmountsUpdateOne {
	if f != nil {
		oauo.SetDiscountAmount(*f)
	}
	return oauo
}

// AddDiscountAmount adds f to the "discount_amount" field.
func (oauo *OrderAmountsUpdateOne) AddDiscountAmount(f float64) *OrderAmountsUpdateOne {
	oauo.mutation.AddDiscountAmount(f)
	return oauo
}

// SetOrder sets the "order" edge to the Order entity.
func (oauo *OrderAmountsUpdateOne) SetOrder(o *Order) *OrderAmountsUpdateOne {
	return oauo.SetOrderID(o.ID)
}

// Mutation returns the OrderAmountsMutation object of the builder.
func (oauo *OrderAmountsUpdateOne) Mutation() *OrderAmountsMutation {
	return oauo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oauo *OrderAmountsUpdateOne) ClearOrder() *OrderAmountsUpdateOne {
	oauo.mutation.ClearOrder()
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OrderAmountsUpdateOne) Select(field string, fields ...string) *OrderAmountsUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OrderAmounts entity.
func (oauo *OrderAmountsUpdateOne) Save(ctx context.Context) (*OrderAmounts, error) {
	var (
		err  error
		node *OrderAmounts
	)
	oauo.defaults()
	if len(oauo.hooks) == 0 {
		node, err = oauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderAmountsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oauo.mutation = mutation
			node, err = oauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oauo.hooks) - 1; i >= 0; i-- {
			if oauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OrderAmountsUpdateOne) SaveX(ctx context.Context) *OrderAmounts {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OrderAmountsUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OrderAmountsUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oauo *OrderAmountsUpdateOne) defaults() {
	if _, ok := oauo.mutation.UpdatedAt(); !ok && !oauo.mutation.UpdatedAtCleared() {
		v := orderamounts.UpdateDefaultUpdatedAt()
		oauo.mutation.SetUpdatedAt(v)
	}
}

func (oauo *OrderAmountsUpdateOne) sqlSave(ctx context.Context) (_node *OrderAmounts, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderamounts.Table,
			Columns: orderamounts.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderamounts.FieldID,
			},
		},
	}
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderAmounts.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderamounts.FieldID)
		for _, f := range fields {
			if !orderamounts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderamounts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderamounts.FieldCreatedAt,
		})
	}
	if oauo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderamounts.FieldCreatedAt,
		})
	}
	if value, ok := oauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderamounts.FieldUpdatedAt,
		})
	}
	if oauo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderamounts.FieldUpdatedAt,
		})
	}
	if value, ok := oauo.mutation.TotalAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldTotalAmount,
		})
	}
	if value, ok := oauo.mutation.AddedTotalAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldTotalAmount,
		})
	}
	if value, ok := oauo.mutation.PayAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPayAmount,
		})
	}
	if value, ok := oauo.mutation.AddedPayAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPayAmount,
		})
	}
	if value, ok := oauo.mutation.FreightAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldFreightAmount,
		})
	}
	if value, ok := oauo.mutation.AddedFreightAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldFreightAmount,
		})
	}
	if value, ok := oauo.mutation.PromotionAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPromotionAmount,
		})
	}
	if value, ok := oauo.mutation.AddedPromotionAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldPromotionAmount,
		})
	}
	if value, ok := oauo.mutation.IntegrationAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldIntegrationAmount,
		})
	}
	if value, ok := oauo.mutation.AddedIntegrationAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldIntegrationAmount,
		})
	}
	if value, ok := oauo.mutation.CouponID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderamounts.FieldCouponID,
		})
	}
	if value, ok := oauo.mutation.AddedCouponID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderamounts.FieldCouponID,
		})
	}
	if oauo.mutation.CouponIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderamounts.FieldCouponID,
		})
	}
	if value, ok := oauo.mutation.CouponAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldCouponAmount,
		})
	}
	if value, ok := oauo.mutation.AddedCouponAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldCouponAmount,
		})
	}
	if value, ok := oauo.mutation.DiscountAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldDiscountAmount,
		})
	}
	if value, ok := oauo.mutation.AddedDiscountAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderamounts.FieldDiscountAmount,
		})
	}
	if oauo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderamounts.OrderTable,
			Columns: []string{orderamounts.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderamounts.OrderTable,
			Columns: []string{orderamounts.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderAmounts{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderamounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
