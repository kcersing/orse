// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/ordersetting"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderSettingCreate is the builder for creating a OrderSetting entity.
type OrderSettingCreate struct {
	config
	mutation *OrderSettingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (osc *OrderSettingCreate) SetCreatedAt(t time.Time) *OrderSettingCreate {
	osc.mutation.SetCreatedAt(t)
	return osc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osc *OrderSettingCreate) SetNillableCreatedAt(t *time.Time) *OrderSettingCreate {
	if t != nil {
		osc.SetCreatedAt(*t)
	}
	return osc
}

// SetUpdatedAt sets the "updated_at" field.
func (osc *OrderSettingCreate) SetUpdatedAt(t time.Time) *OrderSettingCreate {
	osc.mutation.SetUpdatedAt(t)
	return osc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (osc *OrderSettingCreate) SetNillableUpdatedAt(t *time.Time) *OrderSettingCreate {
	if t != nil {
		osc.SetUpdatedAt(*t)
	}
	return osc
}

// SetOrderOvertime sets the "order_overtime" field.
func (osc *OrderSettingCreate) SetOrderOvertime(i int) *OrderSettingCreate {
	osc.mutation.SetOrderOvertime(i)
	return osc
}

// SetNillableOrderOvertime sets the "order_overtime" field if the given value is not nil.
func (osc *OrderSettingCreate) SetNillableOrderOvertime(i *int) *OrderSettingCreate {
	if i != nil {
		osc.SetOrderOvertime(*i)
	}
	return osc
}

// SetConfirmOvertime sets the "confirm_overtime" field.
func (osc *OrderSettingCreate) SetConfirmOvertime(i int) *OrderSettingCreate {
	osc.mutation.SetConfirmOvertime(i)
	return osc
}

// SetNillableConfirmOvertime sets the "confirm_overtime" field if the given value is not nil.
func (osc *OrderSettingCreate) SetNillableConfirmOvertime(i *int) *OrderSettingCreate {
	if i != nil {
		osc.SetConfirmOvertime(*i)
	}
	return osc
}

// SetFinishOvertime sets the "finish_overtime" field.
func (osc *OrderSettingCreate) SetFinishOvertime(i int) *OrderSettingCreate {
	osc.mutation.SetFinishOvertime(i)
	return osc
}

// SetNillableFinishOvertime sets the "finish_overtime" field if the given value is not nil.
func (osc *OrderSettingCreate) SetNillableFinishOvertime(i *int) *OrderSettingCreate {
	if i != nil {
		osc.SetFinishOvertime(*i)
	}
	return osc
}

// SetCommentOvertime sets the "comment_overtime" field.
func (osc *OrderSettingCreate) SetCommentOvertime(i int) *OrderSettingCreate {
	osc.mutation.SetCommentOvertime(i)
	return osc
}

// SetNillableCommentOvertime sets the "comment_overtime" field if the given value is not nil.
func (osc *OrderSettingCreate) SetNillableCommentOvertime(i *int) *OrderSettingCreate {
	if i != nil {
		osc.SetCommentOvertime(*i)
	}
	return osc
}

// Mutation returns the OrderSettingMutation object of the builder.
func (osc *OrderSettingCreate) Mutation() *OrderSettingMutation {
	return osc.mutation
}

// Save creates the OrderSetting in the database.
func (osc *OrderSettingCreate) Save(ctx context.Context) (*OrderSetting, error) {
	var (
		err  error
		node *OrderSetting
	)
	osc.defaults()
	if len(osc.hooks) == 0 {
		if err = osc.check(); err != nil {
			return nil, err
		}
		node, err = osc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osc.check(); err != nil {
				return nil, err
			}
			osc.mutation = mutation
			if node, err = osc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(osc.hooks) - 1; i >= 0; i-- {
			if osc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = osc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, osc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OrderSettingCreate) SaveX(ctx context.Context) *OrderSetting {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OrderSettingCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OrderSettingCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OrderSettingCreate) defaults() {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		v := ordersetting.DefaultCreatedAt()
		osc.mutation.SetCreatedAt(v)
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		v := ordersetting.DefaultUpdatedAt()
		osc.mutation.SetUpdatedAt(v)
	}
	if _, ok := osc.mutation.OrderOvertime(); !ok {
		v := ordersetting.DefaultOrderOvertime
		osc.mutation.SetOrderOvertime(v)
	}
	if _, ok := osc.mutation.ConfirmOvertime(); !ok {
		v := ordersetting.DefaultConfirmOvertime
		osc.mutation.SetConfirmOvertime(v)
	}
	if _, ok := osc.mutation.FinishOvertime(); !ok {
		v := ordersetting.DefaultFinishOvertime
		osc.mutation.SetFinishOvertime(v)
	}
	if _, ok := osc.mutation.CommentOvertime(); !ok {
		v := ordersetting.DefaultCommentOvertime
		osc.mutation.SetCommentOvertime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OrderSettingCreate) check() error {
	return nil
}

func (osc *OrderSettingCreate) sqlSave(ctx context.Context) (*OrderSetting, error) {
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (osc *OrderSettingCreate) createSpec() (*OrderSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderSetting{config: osc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ordersetting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ordersetting.FieldID,
			},
		}
	)
	if value, ok := osc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordersetting.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := osc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordersetting.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := osc.mutation.OrderOvertime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldOrderOvertime,
		})
		_node.OrderOvertime = value
	}
	if value, ok := osc.mutation.ConfirmOvertime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldConfirmOvertime,
		})
		_node.ConfirmOvertime = value
	}
	if value, ok := osc.mutation.FinishOvertime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldFinishOvertime,
		})
		_node.FinishOvertime = value
	}
	if value, ok := osc.mutation.CommentOvertime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ordersetting.FieldCommentOvertime,
		})
		_node.CommentOvertime = value
	}
	return _node, _spec
}

// OrderSettingCreateBulk is the builder for creating many OrderSetting entities in bulk.
type OrderSettingCreateBulk struct {
	config
	builders []*OrderSettingCreate
}

// Save creates the OrderSetting entities in the database.
func (oscb *OrderSettingCreateBulk) Save(ctx context.Context) ([]*OrderSetting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OrderSetting, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OrderSettingCreateBulk) SaveX(ctx context.Context) []*OrderSetting {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OrderSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OrderSettingCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
