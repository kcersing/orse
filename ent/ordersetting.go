// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/ordersetting"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// OrderSetting is the model entity for the OrderSetting schema.
type OrderSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrderOvertime holds the value of the "order_overtime" field.
	// 订单超时关闭时间(分)
	OrderOvertime int `json:"order_overtime,omitempty"`
	// ConfirmOvertime holds the value of the "confirm_overtime" field.
	// 发货后自动确认收货时间（天）
	ConfirmOvertime int `json:"confirm_overtime,omitempty"`
	// FinishOvertime holds the value of the "finish_overtime" field.
	// 自动完成交易时间，不能申请售后（天）
	FinishOvertime int `json:"finish_overtime,omitempty"`
	// CommentOvertime holds the value of the "comment_overtime" field.
	// 订单完成后自动好评时间（天）
	CommentOvertime int `json:"comment_overtime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderSetting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ordersetting.FieldID, ordersetting.FieldOrderOvertime, ordersetting.FieldConfirmOvertime, ordersetting.FieldFinishOvertime, ordersetting.FieldCommentOvertime:
			values[i] = new(sql.NullInt64)
		case ordersetting.FieldCreatedAt, ordersetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderSetting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderSetting fields.
func (os *OrderSetting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ordersetting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			os.ID = int(value.Int64)
		case ordersetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				os.CreatedAt = value.Time
			}
		case ordersetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				os.UpdatedAt = value.Time
			}
		case ordersetting.FieldOrderOvertime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_overtime", values[i])
			} else if value.Valid {
				os.OrderOvertime = int(value.Int64)
			}
		case ordersetting.FieldConfirmOvertime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field confirm_overtime", values[i])
			} else if value.Valid {
				os.ConfirmOvertime = int(value.Int64)
			}
		case ordersetting.FieldFinishOvertime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field finish_overtime", values[i])
			} else if value.Valid {
				os.FinishOvertime = int(value.Int64)
			}
		case ordersetting.FieldCommentOvertime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_overtime", values[i])
			} else if value.Valid {
				os.CommentOvertime = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderSetting.
// Note that you need to call OrderSetting.Unwrap() before calling this method if this OrderSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrderSetting) Update() *OrderSettingUpdateOne {
	return (&OrderSettingClient{config: os.config}).UpdateOne(os)
}

// Unwrap unwraps the OrderSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrderSetting) Unwrap() *OrderSetting {
	tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderSetting is not a transactional entity")
	}
	os.config.driver = tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrderSetting) String() string {
	var builder strings.Builder
	builder.WriteString("OrderSetting(")
	builder.WriteString(fmt.Sprintf("id=%v", os.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(os.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(os.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", order_overtime=")
	builder.WriteString(fmt.Sprintf("%v", os.OrderOvertime))
	builder.WriteString(", confirm_overtime=")
	builder.WriteString(fmt.Sprintf("%v", os.ConfirmOvertime))
	builder.WriteString(", finish_overtime=")
	builder.WriteString(fmt.Sprintf("%v", os.FinishOvertime))
	builder.WriteString(", comment_overtime=")
	builder.WriteString(fmt.Sprintf("%v", os.CommentOvertime))
	builder.WriteByte(')')
	return builder.String()
}

// OrderSettings is a parsable slice of OrderSetting.
type OrderSettings []*OrderSetting

func (os OrderSettings) config(cfg config) {
	for _i := range os {
		os[_i].config = cfg
	}
}
