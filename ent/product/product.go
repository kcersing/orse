// Code generated by entc, DO NOT EDIT.

package product

import (
	"fmt"
	"orse/ent/property"
	"time"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCateID holds the string denoting the cate_id field in the database.
	FieldCateID = "cate_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreateID holds the string denoting the create_id field in the database.
	FieldCreateID = "create_id"
	// EdgeCate holds the string denoting the cate edge name in mutations.
	EdgeCate = "cate"
	// EdgeSpecs holds the string denoting the specs edge name in mutations.
	EdgeSpecs = "specs"
	// Table holds the table name of the product in the database.
	Table = "product"
	// CateTable is the table that holds the cate relation/edge.
	CateTable = "product"
	// CateInverseTable is the table name for the ProductCate entity.
	// It exists in this package in order to avoid circular dependency with the "productcate" package.
	CateInverseTable = "product_cate"
	// CateColumn is the table column denoting the cate relation/edge.
	CateColumn = "cate_id"
	// SpecsTable is the table that holds the specs relation/edge.
	SpecsTable = "product_specs"
	// SpecsInverseTable is the table name for the ProductSpecs entity.
	// It exists in this package in order to avoid circular dependency with the "productspecs" package.
	SpecsInverseTable = "product_specs"
	// SpecsColumn is the table column denoting the specs relation/edge.
	SpecsColumn = "product_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCateID,
	FieldName,
	FieldStatus,
	FieldCreateID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateID holds the default value on creation for the "create_id" field.
	DefaultCreateID int
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s property.Status) error {
	switch s {
	case "0", "1":
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for status field: %q", s)
	}
}
