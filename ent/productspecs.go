// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/product"
	"orse/ent/productspecs"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProductSpecs is the model entity for the ProductSpecs schema.
type ProductSpecs struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Sn holds the value of the "sn" field.
	Sn string `json:"sn,omitempty"`
	// Stock holds the value of the "stock" field.
	// 库存
	Stock int `json:"stock,omitempty"`
	// Sales holds the value of the "sales" field.
	// 销量
	Sales int `json:"sales,omitempty"`
	// Price holds the value of the "price" field.
	// 原价
	Price float64 `json:"price,omitempty"`
	// SalePrice holds the value of the "sale_price" field.
	// 售卖价
	SalePrice float64 `json:"sale_price,omitempty"`
	// CreateID holds the value of the "create_id" field.
	CreateID int `json:"create_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductSpecsQuery when eager-loading is set.
	Edges ProductSpecsEdges `json:"edges"`
}

// ProductSpecsEdges holds the relations/edges for other nodes in the graph.
type ProductSpecsEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// Items holds the value of the items edge.
	Items []*ProductSpecsItem `json:"items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductSpecsEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e ProductSpecsEdges) ItemsOrErr() ([]*ProductSpecsItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductSpecs) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productspecs.FieldPrice, productspecs.FieldSalePrice:
			values[i] = new(sql.NullFloat64)
		case productspecs.FieldID, productspecs.FieldProductID, productspecs.FieldStock, productspecs.FieldSales, productspecs.FieldCreateID:
			values[i] = new(sql.NullInt64)
		case productspecs.FieldName, productspecs.FieldSn:
			values[i] = new(sql.NullString)
		case productspecs.FieldCreatedAt, productspecs.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductSpecs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductSpecs fields.
func (ps *ProductSpecs) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productspecs.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case productspecs.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Time
			}
		case productspecs.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Time
			}
		case productspecs.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				ps.ProductID = int(value.Int64)
			}
		case productspecs.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ps.Name = value.String
			}
		case productspecs.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				ps.Sn = value.String
			}
		case productspecs.FieldStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				ps.Stock = int(value.Int64)
			}
		case productspecs.FieldSales:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sales", values[i])
			} else if value.Valid {
				ps.Sales = int(value.Int64)
			}
		case productspecs.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ps.Price = value.Float64
			}
		case productspecs.FieldSalePrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_price", values[i])
			} else if value.Valid {
				ps.SalePrice = value.Float64
			}
		case productspecs.FieldCreateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_id", values[i])
			} else if value.Valid {
				ps.CreateID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProduct queries the "product" edge of the ProductSpecs entity.
func (ps *ProductSpecs) QueryProduct() *ProductQuery {
	return (&ProductSpecsClient{config: ps.config}).QueryProduct(ps)
}

// QueryItems queries the "items" edge of the ProductSpecs entity.
func (ps *ProductSpecs) QueryItems() *ProductSpecsItemQuery {
	return (&ProductSpecsClient{config: ps.config}).QueryItems(ps)
}

// Update returns a builder for updating this ProductSpecs.
// Note that you need to call ProductSpecs.Unwrap() before calling this method if this ProductSpecs
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProductSpecs) Update() *ProductSpecsUpdateOne {
	return (&ProductSpecsClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the ProductSpecs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProductSpecs) Unwrap() *ProductSpecs {
	tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductSpecs is not a transactional entity")
	}
	ps.config.driver = tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProductSpecs) String() string {
	var builder strings.Builder
	builder.WriteString("ProductSpecs(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ps.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", product_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.ProductID))
	builder.WriteString(", name=")
	builder.WriteString(ps.Name)
	builder.WriteString(", sn=")
	builder.WriteString(ps.Sn)
	builder.WriteString(", stock=")
	builder.WriteString(fmt.Sprintf("%v", ps.Stock))
	builder.WriteString(", sales=")
	builder.WriteString(fmt.Sprintf("%v", ps.Sales))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", ps.Price))
	builder.WriteString(", sale_price=")
	builder.WriteString(fmt.Sprintf("%v", ps.SalePrice))
	builder.WriteString(", create_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.CreateID))
	builder.WriteByte(')')
	return builder.String()
}

// ProductSpecsSlice is a parsable slice of ProductSpecs.
type ProductSpecsSlice []*ProductSpecs

func (ps ProductSpecsSlice) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
