// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/product"
	"orse/ent/productcate"
	"orse/ent/property"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CateID holds the value of the "cate_id" field.
	CateID int `json:"cate_id,omitempty"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status property.Status `json:"status,omitempty"`
	// CreateID holds the value of the "create_id" field.
	CreateID int `json:"create_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges ProductEdges `json:"edges"`
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Cate holds the value of the cate edge.
	Cate *ProductCate `json:"cate,omitempty"`
	// Specs holds the value of the specs edge.
	Specs []*ProductSpecs `json:"specs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CateOrErr returns the Cate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) CateOrErr() (*ProductCate, error) {
	if e.loadedTypes[0] {
		if e.Cate == nil {
			// The edge cate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productcate.Label}
		}
		return e.Cate, nil
	}
	return nil, &NotLoadedError{edge: "cate"}
}

// SpecsOrErr returns the Specs value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) SpecsOrErr() ([]*ProductSpecs, error) {
	if e.loadedTypes[1] {
		return e.Specs, nil
	}
	return nil, &NotLoadedError{edge: "specs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID, product.FieldCateID, product.FieldCreateID:
			values[i] = new(sql.NullInt64)
		case product.FieldName, product.FieldStatus:
			values[i] = new(sql.NullString)
		case product.FieldCreatedAt, product.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case product.FieldCateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cate_id", values[i])
			} else if value.Valid {
				pr.CateID = int(value.Int64)
			}
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = property.Status(value.String)
			}
		case product.FieldCreateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_id", values[i])
			} else if value.Valid {
				pr.CreateID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCate queries the "cate" edge of the Product entity.
func (pr *Product) QueryCate() *ProductCateQuery {
	return (&ProductClient{config: pr.config}).QueryCate(pr)
}

// QuerySpecs queries the "specs" edge of the Product entity.
func (pr *Product) QuerySpecs() *ProductSpecsQuery {
	return (&ProductClient{config: pr.config}).QuerySpecs(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", cate_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.CateID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", create_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.CreateID))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
