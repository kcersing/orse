// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"orse/ent/product"
	"orse/ent/productspecs"
	"orse/ent/productspecsitem"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductSpecsCreate is the builder for creating a ProductSpecs entity.
type ProductSpecsCreate struct {
	config
	mutation *ProductSpecsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (psc *ProductSpecsCreate) SetCreatedAt(t time.Time) *ProductSpecsCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *ProductSpecsCreate) SetNillableCreatedAt(t *time.Time) *ProductSpecsCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *ProductSpecsCreate) SetUpdatedAt(t time.Time) *ProductSpecsCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *ProductSpecsCreate) SetNillableUpdatedAt(t *time.Time) *ProductSpecsCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// SetProductID sets the "product_id" field.
func (psc *ProductSpecsCreate) SetProductID(i int) *ProductSpecsCreate {
	psc.mutation.SetProductID(i)
	return psc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (psc *ProductSpecsCreate) SetNillableProductID(i *int) *ProductSpecsCreate {
	if i != nil {
		psc.SetProductID(*i)
	}
	return psc
}

// SetName sets the "name" field.
func (psc *ProductSpecsCreate) SetName(s string) *ProductSpecsCreate {
	psc.mutation.SetName(s)
	return psc
}

// SetSn sets the "sn" field.
func (psc *ProductSpecsCreate) SetSn(s string) *ProductSpecsCreate {
	psc.mutation.SetSn(s)
	return psc
}

// SetStock sets the "stock" field.
func (psc *ProductSpecsCreate) SetStock(i int) *ProductSpecsCreate {
	psc.mutation.SetStock(i)
	return psc
}

// SetSales sets the "sales" field.
func (psc *ProductSpecsCreate) SetSales(i int) *ProductSpecsCreate {
	psc.mutation.SetSales(i)
	return psc
}

// SetPrice sets the "price" field.
func (psc *ProductSpecsCreate) SetPrice(f float64) *ProductSpecsCreate {
	psc.mutation.SetPrice(f)
	return psc
}

// SetSalePrice sets the "sale_price" field.
func (psc *ProductSpecsCreate) SetSalePrice(f float64) *ProductSpecsCreate {
	psc.mutation.SetSalePrice(f)
	return psc
}

// SetCreateID sets the "create_id" field.
func (psc *ProductSpecsCreate) SetCreateID(i int) *ProductSpecsCreate {
	psc.mutation.SetCreateID(i)
	return psc
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (psc *ProductSpecsCreate) SetNillableCreateID(i *int) *ProductSpecsCreate {
	if i != nil {
		psc.SetCreateID(*i)
	}
	return psc
}

// SetProduct sets the "product" edge to the Product entity.
func (psc *ProductSpecsCreate) SetProduct(p *Product) *ProductSpecsCreate {
	return psc.SetProductID(p.ID)
}

// AddItemIDs adds the "items" edge to the ProductSpecsItem entity by IDs.
func (psc *ProductSpecsCreate) AddItemIDs(ids ...int) *ProductSpecsCreate {
	psc.mutation.AddItemIDs(ids...)
	return psc
}

// AddItems adds the "items" edges to the ProductSpecsItem entity.
func (psc *ProductSpecsCreate) AddItems(p ...*ProductSpecsItem) *ProductSpecsCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psc.AddItemIDs(ids...)
}

// Mutation returns the ProductSpecsMutation object of the builder.
func (psc *ProductSpecsCreate) Mutation() *ProductSpecsMutation {
	return psc.mutation
}

// Save creates the ProductSpecs in the database.
func (psc *ProductSpecsCreate) Save(ctx context.Context) (*ProductSpecs, error) {
	var (
		err  error
		node *ProductSpecs
	)
	psc.defaults()
	if len(psc.hooks) == 0 {
		if err = psc.check(); err != nil {
			return nil, err
		}
		node, err = psc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductSpecsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = psc.check(); err != nil {
				return nil, err
			}
			psc.mutation = mutation
			if node, err = psc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(psc.hooks) - 1; i >= 0; i-- {
			if psc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = psc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProductSpecsCreate) SaveX(ctx context.Context) *ProductSpecs {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *ProductSpecsCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *ProductSpecsCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *ProductSpecsCreate) defaults() {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		v := productspecs.DefaultCreatedAt()
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		v := productspecs.DefaultUpdatedAt()
		psc.mutation.SetUpdatedAt(v)
	}
	if _, ok := psc.mutation.CreateID(); !ok {
		v := productspecs.DefaultCreateID
		psc.mutation.SetCreateID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProductSpecsCreate) check() error {
	if _, ok := psc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := psc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "sn"`)}
	}
	if _, ok := psc.mutation.Stock(); !ok {
		return &ValidationError{Name: "stock", err: errors.New(`ent: missing required field "stock"`)}
	}
	if _, ok := psc.mutation.Sales(); !ok {
		return &ValidationError{Name: "sales", err: errors.New(`ent: missing required field "sales"`)}
	}
	if _, ok := psc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "price"`)}
	}
	if _, ok := psc.mutation.SalePrice(); !ok {
		return &ValidationError{Name: "sale_price", err: errors.New(`ent: missing required field "sale_price"`)}
	}
	return nil
}

func (psc *ProductSpecsCreate) sqlSave(ctx context.Context) (*ProductSpecs, error) {
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (psc *ProductSpecsCreate) createSpec() (*ProductSpecs, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductSpecs{config: psc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productspecs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productspecs.FieldID,
			},
		}
	)
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspecs.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productspecs.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := psc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspecs.FieldName,
		})
		_node.Name = value
	}
	if value, ok := psc.mutation.Sn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productspecs.FieldSn,
		})
		_node.Sn = value
	}
	if value, ok := psc.mutation.Stock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecs.FieldStock,
		})
		_node.Stock = value
	}
	if value, ok := psc.mutation.Sales(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecs.FieldSales,
		})
		_node.Sales = value
	}
	if value, ok := psc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productspecs.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := psc.mutation.SalePrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: productspecs.FieldSalePrice,
		})
		_node.SalePrice = value
	}
	if value, ok := psc.mutation.CreateID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productspecs.FieldCreateID,
		})
		_node.CreateID = value
	}
	if nodes := psc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productspecs.ProductTable,
			Columns: []string{productspecs.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productspecs.ItemsTable,
			Columns: []string{productspecs.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productspecsitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductSpecsCreateBulk is the builder for creating many ProductSpecs entities in bulk.
type ProductSpecsCreateBulk struct {
	config
	builders []*ProductSpecsCreate
}

// Save creates the ProductSpecs entities in the database.
func (pscb *ProductSpecsCreateBulk) Save(ctx context.Context) ([]*ProductSpecs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProductSpecs, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductSpecsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProductSpecsCreateBulk) SaveX(ctx context.Context) []*ProductSpecs {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *ProductSpecsCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *ProductSpecsCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
