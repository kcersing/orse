// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/order"
	"orse/ent/orderdelivery"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// OrderDelivery is the model entity for the OrderDelivery schema.
type OrderDelivery struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// Sn holds the value of the "sn" field.
	// 物流单号
	Sn string `json:"sn,omitempty"`
	// DeliveryCompany holds the value of the "delivery_company" field.
	// 配送方式
	DeliveryCompany string `json:"delivery_company,omitempty"`
	// DeliveryTime holds the value of the "delivery_time" field.
	// 发货时间
	DeliveryTime time.Time `json:"delivery_time,omitempty"`
	// ReceiverName holds the value of the "receiver_name" field.
	// 收货人姓名
	ReceiverName string `json:"receiver_name,omitempty"`
	// ReceiverPhone holds the value of the "receiver_phone" field.
	// 收货人电话
	ReceiverPhone string `json:"receiver_phone,omitempty"`
	// ReceiverPostCode holds the value of the "receiver_post_code" field.
	// 收货人邮编
	ReceiverPostCode string `json:"receiver_post_code,omitempty"`
	// ReceiverProvince holds the value of the "receiver_province" field.
	// 省份/直辖市
	ReceiverProvince string `json:"receiver_province,omitempty"`
	// ReceiverCity holds the value of the "receiver_city" field.
	// 城市
	ReceiverCity string `json:"receiver_city,omitempty"`
	// ReceiverRegion holds the value of the "receiver_region" field.
	// 区
	ReceiverRegion string `json:"receiver_region,omitempty"`
	// ReceiverDetailAddress holds the value of the "receiver_detail_address" field.
	// 详细地址
	ReceiverDetailAddress string `json:"receiver_detail_address,omitempty"`
	// ReceiveTime holds the value of the "receive_time" field.
	// 确认收货时间
	ReceiveTime time.Time `json:"receive_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderDeliveryQuery when eager-loading is set.
	Edges OrderDeliveryEdges `json:"edges"`
}

// OrderDeliveryEdges holds the relations/edges for other nodes in the graph.
type OrderDeliveryEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderDeliveryEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// The edge order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderDelivery) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderdelivery.FieldID, orderdelivery.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case orderdelivery.FieldSn, orderdelivery.FieldDeliveryCompany, orderdelivery.FieldReceiverName, orderdelivery.FieldReceiverPhone, orderdelivery.FieldReceiverPostCode, orderdelivery.FieldReceiverProvince, orderdelivery.FieldReceiverCity, orderdelivery.FieldReceiverRegion, orderdelivery.FieldReceiverDetailAddress:
			values[i] = new(sql.NullString)
		case orderdelivery.FieldCreatedAt, orderdelivery.FieldUpdatedAt, orderdelivery.FieldDeliveryTime, orderdelivery.FieldReceiveTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderDelivery", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderDelivery fields.
func (od *OrderDelivery) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderdelivery.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			od.ID = int(value.Int64)
		case orderdelivery.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				od.CreatedAt = value.Time
			}
		case orderdelivery.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				od.UpdatedAt = value.Time
			}
		case orderdelivery.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				od.OrderID = int(value.Int64)
			}
		case orderdelivery.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				od.Sn = value.String
			}
		case orderdelivery.FieldDeliveryCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_company", values[i])
			} else if value.Valid {
				od.DeliveryCompany = value.String
			}
		case orderdelivery.FieldDeliveryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_time", values[i])
			} else if value.Valid {
				od.DeliveryTime = value.Time
			}
		case orderdelivery.FieldReceiverName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_name", values[i])
			} else if value.Valid {
				od.ReceiverName = value.String
			}
		case orderdelivery.FieldReceiverPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_phone", values[i])
			} else if value.Valid {
				od.ReceiverPhone = value.String
			}
		case orderdelivery.FieldReceiverPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_post_code", values[i])
			} else if value.Valid {
				od.ReceiverPostCode = value.String
			}
		case orderdelivery.FieldReceiverProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_province", values[i])
			} else if value.Valid {
				od.ReceiverProvince = value.String
			}
		case orderdelivery.FieldReceiverCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_city", values[i])
			} else if value.Valid {
				od.ReceiverCity = value.String
			}
		case orderdelivery.FieldReceiverRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_region", values[i])
			} else if value.Valid {
				od.ReceiverRegion = value.String
			}
		case orderdelivery.FieldReceiverDetailAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_detail_address", values[i])
			} else if value.Valid {
				od.ReceiverDetailAddress = value.String
			}
		case orderdelivery.FieldReceiveTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field receive_time", values[i])
			} else if value.Valid {
				od.ReceiveTime = value.Time
			}
		}
	}
	return nil
}

// QueryOrder queries the "order" edge of the OrderDelivery entity.
func (od *OrderDelivery) QueryOrder() *OrderQuery {
	return (&OrderDeliveryClient{config: od.config}).QueryOrder(od)
}

// Update returns a builder for updating this OrderDelivery.
// Note that you need to call OrderDelivery.Unwrap() before calling this method if this OrderDelivery
// was returned from a transaction, and the transaction was committed or rolled back.
func (od *OrderDelivery) Update() *OrderDeliveryUpdateOne {
	return (&OrderDeliveryClient{config: od.config}).UpdateOne(od)
}

// Unwrap unwraps the OrderDelivery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (od *OrderDelivery) Unwrap() *OrderDelivery {
	tx, ok := od.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderDelivery is not a transactional entity")
	}
	od.config.driver = tx.drv
	return od
}

// String implements the fmt.Stringer.
func (od *OrderDelivery) String() string {
	var builder strings.Builder
	builder.WriteString("OrderDelivery(")
	builder.WriteString(fmt.Sprintf("id=%v", od.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(od.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(od.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", od.OrderID))
	builder.WriteString(", sn=")
	builder.WriteString(od.Sn)
	builder.WriteString(", delivery_company=")
	builder.WriteString(od.DeliveryCompany)
	builder.WriteString(", delivery_time=")
	builder.WriteString(od.DeliveryTime.Format(time.ANSIC))
	builder.WriteString(", receiver_name=")
	builder.WriteString(od.ReceiverName)
	builder.WriteString(", receiver_phone=")
	builder.WriteString(od.ReceiverPhone)
	builder.WriteString(", receiver_post_code=")
	builder.WriteString(od.ReceiverPostCode)
	builder.WriteString(", receiver_province=")
	builder.WriteString(od.ReceiverProvince)
	builder.WriteString(", receiver_city=")
	builder.WriteString(od.ReceiverCity)
	builder.WriteString(", receiver_region=")
	builder.WriteString(od.ReceiverRegion)
	builder.WriteString(", receiver_detail_address=")
	builder.WriteString(od.ReceiverDetailAddress)
	builder.WriteString(", receive_time=")
	builder.WriteString(od.ReceiveTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderDeliveries is a parsable slice of OrderDelivery.
type OrderDeliveries []*OrderDelivery

func (od OrderDeliveries) config(cfg config) {
	for _i := range od {
		od[_i].config = cfg
	}
}
