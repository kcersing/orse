// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/productcate"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProductCate is the model entity for the ProductCate schema.
type ProductCate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort int `json:"sort,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductCateQuery when eager-loading is set.
	Edges ProductCateEdges `json:"edges"`
}

// ProductCateEdges holds the relations/edges for other nodes in the graph.
type ProductCateEdges struct {
	// Products holds the value of the products edge.
	Products []*Product `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e ProductCateEdges) ProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductCate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productcate.FieldID, productcate.FieldSort:
			values[i] = new(sql.NullInt64)
		case productcate.FieldName:
			values[i] = new(sql.NullString)
		case productcate.FieldCreatedAt, productcate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductCate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductCate fields.
func (pc *ProductCate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productcate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case productcate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Time
			}
		case productcate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		case productcate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case productcate.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				pc.Sort = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProducts queries the "products" edge of the ProductCate entity.
func (pc *ProductCate) QueryProducts() *ProductQuery {
	return (&ProductCateClient{config: pc.config}).QueryProducts(pc)
}

// Update returns a builder for updating this ProductCate.
// Note that you need to call ProductCate.Unwrap() before calling this method if this ProductCate
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ProductCate) Update() *ProductCateUpdateOne {
	return (&ProductCateClient{config: pc.config}).UpdateOne(pc)
}

// Unwrap unwraps the ProductCate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *ProductCate) Unwrap() *ProductCate {
	tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductCate is not a transactional entity")
	}
	pc.config.driver = tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ProductCate) String() string {
	var builder strings.Builder
	builder.WriteString("ProductCate(")
	builder.WriteString(fmt.Sprintf("id=%v", pc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", pc.Sort))
	builder.WriteByte(')')
	return builder.String()
}

// ProductCates is a parsable slice of ProductCate.
type ProductCates []*ProductCate

func (pc ProductCates) config(cfg config) {
	for _i := range pc {
		pc[_i].config = cfg
	}
}
