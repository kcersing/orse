// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"orse/ent/order"
	"orse/ent/orderdelivery"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderDeliveryCreate is the builder for creating a OrderDelivery entity.
type OrderDeliveryCreate struct {
	config
	mutation *OrderDeliveryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (odc *OrderDeliveryCreate) SetCreatedAt(t time.Time) *OrderDeliveryCreate {
	odc.mutation.SetCreatedAt(t)
	return odc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableCreatedAt(t *time.Time) *OrderDeliveryCreate {
	if t != nil {
		odc.SetCreatedAt(*t)
	}
	return odc
}

// SetUpdatedAt sets the "updated_at" field.
func (odc *OrderDeliveryCreate) SetUpdatedAt(t time.Time) *OrderDeliveryCreate {
	odc.mutation.SetUpdatedAt(t)
	return odc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableUpdatedAt(t *time.Time) *OrderDeliveryCreate {
	if t != nil {
		odc.SetUpdatedAt(*t)
	}
	return odc
}

// SetOrderID sets the "order_id" field.
func (odc *OrderDeliveryCreate) SetOrderID(i int) *OrderDeliveryCreate {
	odc.mutation.SetOrderID(i)
	return odc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableOrderID(i *int) *OrderDeliveryCreate {
	if i != nil {
		odc.SetOrderID(*i)
	}
	return odc
}

// SetSn sets the "sn" field.
func (odc *OrderDeliveryCreate) SetSn(s string) *OrderDeliveryCreate {
	odc.mutation.SetSn(s)
	return odc
}

// SetDeliveryCompany sets the "delivery_company" field.
func (odc *OrderDeliveryCreate) SetDeliveryCompany(s string) *OrderDeliveryCreate {
	odc.mutation.SetDeliveryCompany(s)
	return odc
}

// SetNillableDeliveryCompany sets the "delivery_company" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableDeliveryCompany(s *string) *OrderDeliveryCreate {
	if s != nil {
		odc.SetDeliveryCompany(*s)
	}
	return odc
}

// SetDeliveryTime sets the "delivery_time" field.
func (odc *OrderDeliveryCreate) SetDeliveryTime(t time.Time) *OrderDeliveryCreate {
	odc.mutation.SetDeliveryTime(t)
	return odc
}

// SetNillableDeliveryTime sets the "delivery_time" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableDeliveryTime(t *time.Time) *OrderDeliveryCreate {
	if t != nil {
		odc.SetDeliveryTime(*t)
	}
	return odc
}

// SetReceiverName sets the "receiver_name" field.
func (odc *OrderDeliveryCreate) SetReceiverName(s string) *OrderDeliveryCreate {
	odc.mutation.SetReceiverName(s)
	return odc
}

// SetNillableReceiverName sets the "receiver_name" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableReceiverName(s *string) *OrderDeliveryCreate {
	if s != nil {
		odc.SetReceiverName(*s)
	}
	return odc
}

// SetReceiverPhone sets the "receiver_phone" field.
func (odc *OrderDeliveryCreate) SetReceiverPhone(s string) *OrderDeliveryCreate {
	odc.mutation.SetReceiverPhone(s)
	return odc
}

// SetNillableReceiverPhone sets the "receiver_phone" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableReceiverPhone(s *string) *OrderDeliveryCreate {
	if s != nil {
		odc.SetReceiverPhone(*s)
	}
	return odc
}

// SetReceiverPostCode sets the "receiver_post_code" field.
func (odc *OrderDeliveryCreate) SetReceiverPostCode(s string) *OrderDeliveryCreate {
	odc.mutation.SetReceiverPostCode(s)
	return odc
}

// SetNillableReceiverPostCode sets the "receiver_post_code" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableReceiverPostCode(s *string) *OrderDeliveryCreate {
	if s != nil {
		odc.SetReceiverPostCode(*s)
	}
	return odc
}

// SetReceiverProvince sets the "receiver_province" field.
func (odc *OrderDeliveryCreate) SetReceiverProvince(s string) *OrderDeliveryCreate {
	odc.mutation.SetReceiverProvince(s)
	return odc
}

// SetNillableReceiverProvince sets the "receiver_province" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableReceiverProvince(s *string) *OrderDeliveryCreate {
	if s != nil {
		odc.SetReceiverProvince(*s)
	}
	return odc
}

// SetReceiverCity sets the "receiver_city" field.
func (odc *OrderDeliveryCreate) SetReceiverCity(s string) *OrderDeliveryCreate {
	odc.mutation.SetReceiverCity(s)
	return odc
}

// SetNillableReceiverCity sets the "receiver_city" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableReceiverCity(s *string) *OrderDeliveryCreate {
	if s != nil {
		odc.SetReceiverCity(*s)
	}
	return odc
}

// SetReceiverRegion sets the "receiver_region" field.
func (odc *OrderDeliveryCreate) SetReceiverRegion(s string) *OrderDeliveryCreate {
	odc.mutation.SetReceiverRegion(s)
	return odc
}

// SetNillableReceiverRegion sets the "receiver_region" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableReceiverRegion(s *string) *OrderDeliveryCreate {
	if s != nil {
		odc.SetReceiverRegion(*s)
	}
	return odc
}

// SetReceiverDetailAddress sets the "receiver_detail_address" field.
func (odc *OrderDeliveryCreate) SetReceiverDetailAddress(s string) *OrderDeliveryCreate {
	odc.mutation.SetReceiverDetailAddress(s)
	return odc
}

// SetNillableReceiverDetailAddress sets the "receiver_detail_address" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableReceiverDetailAddress(s *string) *OrderDeliveryCreate {
	if s != nil {
		odc.SetReceiverDetailAddress(*s)
	}
	return odc
}

// SetReceiveTime sets the "receive_time" field.
func (odc *OrderDeliveryCreate) SetReceiveTime(t time.Time) *OrderDeliveryCreate {
	odc.mutation.SetReceiveTime(t)
	return odc
}

// SetNillableReceiveTime sets the "receive_time" field if the given value is not nil.
func (odc *OrderDeliveryCreate) SetNillableReceiveTime(t *time.Time) *OrderDeliveryCreate {
	if t != nil {
		odc.SetReceiveTime(*t)
	}
	return odc
}

// SetOrder sets the "order" edge to the Order entity.
func (odc *OrderDeliveryCreate) SetOrder(o *Order) *OrderDeliveryCreate {
	return odc.SetOrderID(o.ID)
}

// Mutation returns the OrderDeliveryMutation object of the builder.
func (odc *OrderDeliveryCreate) Mutation() *OrderDeliveryMutation {
	return odc.mutation
}

// Save creates the OrderDelivery in the database.
func (odc *OrderDeliveryCreate) Save(ctx context.Context) (*OrderDelivery, error) {
	var (
		err  error
		node *OrderDelivery
	)
	odc.defaults()
	if len(odc.hooks) == 0 {
		if err = odc.check(); err != nil {
			return nil, err
		}
		node, err = odc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderDeliveryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = odc.check(); err != nil {
				return nil, err
			}
			odc.mutation = mutation
			if node, err = odc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(odc.hooks) - 1; i >= 0; i-- {
			if odc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = odc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, odc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (odc *OrderDeliveryCreate) SaveX(ctx context.Context) *OrderDelivery {
	v, err := odc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odc *OrderDeliveryCreate) Exec(ctx context.Context) error {
	_, err := odc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odc *OrderDeliveryCreate) ExecX(ctx context.Context) {
	if err := odc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (odc *OrderDeliveryCreate) defaults() {
	if _, ok := odc.mutation.CreatedAt(); !ok {
		v := orderdelivery.DefaultCreatedAt()
		odc.mutation.SetCreatedAt(v)
	}
	if _, ok := odc.mutation.UpdatedAt(); !ok {
		v := orderdelivery.DefaultUpdatedAt()
		odc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (odc *OrderDeliveryCreate) check() error {
	if _, ok := odc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "sn"`)}
	}
	return nil
}

func (odc *OrderDeliveryCreate) sqlSave(ctx context.Context) (*OrderDelivery, error) {
	_node, _spec := odc.createSpec()
	if err := sqlgraph.CreateNode(ctx, odc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (odc *OrderDeliveryCreate) createSpec() (*OrderDelivery, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderDelivery{config: odc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderdelivery.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderdelivery.FieldID,
			},
		}
	)
	if value, ok := odc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := odc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := odc.mutation.Sn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldSn,
		})
		_node.Sn = value
	}
	if value, ok := odc.mutation.DeliveryCompany(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldDeliveryCompany,
		})
		_node.DeliveryCompany = value
	}
	if value, ok := odc.mutation.DeliveryTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldDeliveryTime,
		})
		_node.DeliveryTime = value
	}
	if value, ok := odc.mutation.ReceiverName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverName,
		})
		_node.ReceiverName = value
	}
	if value, ok := odc.mutation.ReceiverPhone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverPhone,
		})
		_node.ReceiverPhone = value
	}
	if value, ok := odc.mutation.ReceiverPostCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverPostCode,
		})
		_node.ReceiverPostCode = value
	}
	if value, ok := odc.mutation.ReceiverProvince(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverProvince,
		})
		_node.ReceiverProvince = value
	}
	if value, ok := odc.mutation.ReceiverCity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverCity,
		})
		_node.ReceiverCity = value
	}
	if value, ok := odc.mutation.ReceiverRegion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverRegion,
		})
		_node.ReceiverRegion = value
	}
	if value, ok := odc.mutation.ReceiverDetailAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderdelivery.FieldReceiverDetailAddress,
		})
		_node.ReceiverDetailAddress = value
	}
	if value, ok := odc.mutation.ReceiveTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderdelivery.FieldReceiveTime,
		})
		_node.ReceiveTime = value
	}
	if nodes := odc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdelivery.OrderTable,
			Columns: []string{orderdelivery.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderDeliveryCreateBulk is the builder for creating many OrderDelivery entities in bulk.
type OrderDeliveryCreateBulk struct {
	config
	builders []*OrderDeliveryCreate
}

// Save creates the OrderDelivery entities in the database.
func (odcb *OrderDeliveryCreateBulk) Save(ctx context.Context) ([]*OrderDelivery, error) {
	specs := make([]*sqlgraph.CreateSpec, len(odcb.builders))
	nodes := make([]*OrderDelivery, len(odcb.builders))
	mutators := make([]Mutator, len(odcb.builders))
	for i := range odcb.builders {
		func(i int, root context.Context) {
			builder := odcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderDeliveryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, odcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, odcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, odcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (odcb *OrderDeliveryCreateBulk) SaveX(ctx context.Context) []*OrderDelivery {
	v, err := odcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odcb *OrderDeliveryCreateBulk) Exec(ctx context.Context) error {
	_, err := odcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odcb *OrderDeliveryCreateBulk) ExecX(ctx context.Context) {
	if err := odcb.Exec(ctx); err != nil {
		panic(err)
	}
}
