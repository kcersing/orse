// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/predicate"
	"orse/ent/productattributekey"
	"orse/ent/productattributevalue"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductAttributeKeyUpdate is the builder for updating ProductAttributeKey entities.
type ProductAttributeKeyUpdate struct {
	config
	hooks    []Hook
	mutation *ProductAttributeKeyMutation
}

// Where appends a list predicates to the ProductAttributeKeyUpdate builder.
func (paku *ProductAttributeKeyUpdate) Where(ps ...predicate.ProductAttributeKey) *ProductAttributeKeyUpdate {
	paku.mutation.Where(ps...)
	return paku
}

// SetCreatedAt sets the "created_at" field.
func (paku *ProductAttributeKeyUpdate) SetCreatedAt(t time.Time) *ProductAttributeKeyUpdate {
	paku.mutation.SetCreatedAt(t)
	return paku
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (paku *ProductAttributeKeyUpdate) SetNillableCreatedAt(t *time.Time) *ProductAttributeKeyUpdate {
	if t != nil {
		paku.SetCreatedAt(*t)
	}
	return paku
}

// ClearCreatedAt clears the value of the "created_at" field.
func (paku *ProductAttributeKeyUpdate) ClearCreatedAt() *ProductAttributeKeyUpdate {
	paku.mutation.ClearCreatedAt()
	return paku
}

// SetUpdatedAt sets the "updated_at" field.
func (paku *ProductAttributeKeyUpdate) SetUpdatedAt(t time.Time) *ProductAttributeKeyUpdate {
	paku.mutation.SetUpdatedAt(t)
	return paku
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (paku *ProductAttributeKeyUpdate) ClearUpdatedAt() *ProductAttributeKeyUpdate {
	paku.mutation.ClearUpdatedAt()
	return paku
}

// SetProductID sets the "product_id" field.
func (paku *ProductAttributeKeyUpdate) SetProductID(i int) *ProductAttributeKeyUpdate {
	paku.mutation.ResetProductID()
	paku.mutation.SetProductID(i)
	return paku
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (paku *ProductAttributeKeyUpdate) SetNillableProductID(i *int) *ProductAttributeKeyUpdate {
	if i != nil {
		paku.SetProductID(*i)
	}
	return paku
}

// AddProductID adds i to the "product_id" field.
func (paku *ProductAttributeKeyUpdate) AddProductID(i int) *ProductAttributeKeyUpdate {
	paku.mutation.AddProductID(i)
	return paku
}

// ClearProductID clears the value of the "product_id" field.
func (paku *ProductAttributeKeyUpdate) ClearProductID() *ProductAttributeKeyUpdate {
	paku.mutation.ClearProductID()
	return paku
}

// SetName sets the "name" field.
func (paku *ProductAttributeKeyUpdate) SetName(s string) *ProductAttributeKeyUpdate {
	paku.mutation.SetName(s)
	return paku
}

// SetNillableName sets the "name" field if the given value is not nil.
func (paku *ProductAttributeKeyUpdate) SetNillableName(s *string) *ProductAttributeKeyUpdate {
	if s != nil {
		paku.SetName(*s)
	}
	return paku
}

// ClearName clears the value of the "name" field.
func (paku *ProductAttributeKeyUpdate) ClearName() *ProductAttributeKeyUpdate {
	paku.mutation.ClearName()
	return paku
}

// SetSort sets the "sort" field.
func (paku *ProductAttributeKeyUpdate) SetSort(i int) *ProductAttributeKeyUpdate {
	paku.mutation.ResetSort()
	paku.mutation.SetSort(i)
	return paku
}

// AddSort adds i to the "sort" field.
func (paku *ProductAttributeKeyUpdate) AddSort(i int) *ProductAttributeKeyUpdate {
	paku.mutation.AddSort(i)
	return paku
}

// AddValueIDs adds the "values" edge to the ProductAttributeValue entity by IDs.
func (paku *ProductAttributeKeyUpdate) AddValueIDs(ids ...int) *ProductAttributeKeyUpdate {
	paku.mutation.AddValueIDs(ids...)
	return paku
}

// AddValues adds the "values" edges to the ProductAttributeValue entity.
func (paku *ProductAttributeKeyUpdate) AddValues(p ...*ProductAttributeValue) *ProductAttributeKeyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paku.AddValueIDs(ids...)
}

// Mutation returns the ProductAttributeKeyMutation object of the builder.
func (paku *ProductAttributeKeyUpdate) Mutation() *ProductAttributeKeyMutation {
	return paku.mutation
}

// ClearValues clears all "values" edges to the ProductAttributeValue entity.
func (paku *ProductAttributeKeyUpdate) ClearValues() *ProductAttributeKeyUpdate {
	paku.mutation.ClearValues()
	return paku
}

// RemoveValueIDs removes the "values" edge to ProductAttributeValue entities by IDs.
func (paku *ProductAttributeKeyUpdate) RemoveValueIDs(ids ...int) *ProductAttributeKeyUpdate {
	paku.mutation.RemoveValueIDs(ids...)
	return paku
}

// RemoveValues removes "values" edges to ProductAttributeValue entities.
func (paku *ProductAttributeKeyUpdate) RemoveValues(p ...*ProductAttributeValue) *ProductAttributeKeyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return paku.RemoveValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (paku *ProductAttributeKeyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	paku.defaults()
	if len(paku.hooks) == 0 {
		affected, err = paku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAttributeKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			paku.mutation = mutation
			affected, err = paku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(paku.hooks) - 1; i >= 0; i-- {
			if paku.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = paku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, paku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (paku *ProductAttributeKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := paku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (paku *ProductAttributeKeyUpdate) Exec(ctx context.Context) error {
	_, err := paku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (paku *ProductAttributeKeyUpdate) ExecX(ctx context.Context) {
	if err := paku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (paku *ProductAttributeKeyUpdate) defaults() {
	if _, ok := paku.mutation.UpdatedAt(); !ok && !paku.mutation.UpdatedAtCleared() {
		v := productattributekey.UpdateDefaultUpdatedAt()
		paku.mutation.SetUpdatedAt(v)
	}
}

func (paku *ProductAttributeKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productattributekey.Table,
			Columns: productattributekey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productattributekey.FieldID,
			},
		},
	}
	if ps := paku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := paku.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productattributekey.FieldCreatedAt,
		})
	}
	if paku.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productattributekey.FieldCreatedAt,
		})
	}
	if value, ok := paku.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productattributekey.FieldUpdatedAt,
		})
	}
	if paku.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productattributekey.FieldUpdatedAt,
		})
	}
	if value, ok := paku.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productattributekey.FieldProductID,
		})
	}
	if value, ok := paku.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productattributekey.FieldProductID,
		})
	}
	if paku.mutation.ProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productattributekey.FieldProductID,
		})
	}
	if value, ok := paku.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productattributekey.FieldName,
		})
	}
	if paku.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productattributekey.FieldName,
		})
	}
	if value, ok := paku.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productattributekey.FieldSort,
		})
	}
	if value, ok := paku.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productattributekey.FieldSort,
		})
	}
	if paku.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productattributekey.ValuesTable,
			Columns: []string{productattributekey.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paku.mutation.RemovedValuesIDs(); len(nodes) > 0 && !paku.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productattributekey.ValuesTable,
			Columns: []string{productattributekey.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := paku.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productattributekey.ValuesTable,
			Columns: []string{productattributekey.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, paku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productattributekey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProductAttributeKeyUpdateOne is the builder for updating a single ProductAttributeKey entity.
type ProductAttributeKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductAttributeKeyMutation
}

// SetCreatedAt sets the "created_at" field.
func (pakuo *ProductAttributeKeyUpdateOne) SetCreatedAt(t time.Time) *ProductAttributeKeyUpdateOne {
	pakuo.mutation.SetCreatedAt(t)
	return pakuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pakuo *ProductAttributeKeyUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductAttributeKeyUpdateOne {
	if t != nil {
		pakuo.SetCreatedAt(*t)
	}
	return pakuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (pakuo *ProductAttributeKeyUpdateOne) ClearCreatedAt() *ProductAttributeKeyUpdateOne {
	pakuo.mutation.ClearCreatedAt()
	return pakuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pakuo *ProductAttributeKeyUpdateOne) SetUpdatedAt(t time.Time) *ProductAttributeKeyUpdateOne {
	pakuo.mutation.SetUpdatedAt(t)
	return pakuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pakuo *ProductAttributeKeyUpdateOne) ClearUpdatedAt() *ProductAttributeKeyUpdateOne {
	pakuo.mutation.ClearUpdatedAt()
	return pakuo
}

// SetProductID sets the "product_id" field.
func (pakuo *ProductAttributeKeyUpdateOne) SetProductID(i int) *ProductAttributeKeyUpdateOne {
	pakuo.mutation.ResetProductID()
	pakuo.mutation.SetProductID(i)
	return pakuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (pakuo *ProductAttributeKeyUpdateOne) SetNillableProductID(i *int) *ProductAttributeKeyUpdateOne {
	if i != nil {
		pakuo.SetProductID(*i)
	}
	return pakuo
}

// AddProductID adds i to the "product_id" field.
func (pakuo *ProductAttributeKeyUpdateOne) AddProductID(i int) *ProductAttributeKeyUpdateOne {
	pakuo.mutation.AddProductID(i)
	return pakuo
}

// ClearProductID clears the value of the "product_id" field.
func (pakuo *ProductAttributeKeyUpdateOne) ClearProductID() *ProductAttributeKeyUpdateOne {
	pakuo.mutation.ClearProductID()
	return pakuo
}

// SetName sets the "name" field.
func (pakuo *ProductAttributeKeyUpdateOne) SetName(s string) *ProductAttributeKeyUpdateOne {
	pakuo.mutation.SetName(s)
	return pakuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pakuo *ProductAttributeKeyUpdateOne) SetNillableName(s *string) *ProductAttributeKeyUpdateOne {
	if s != nil {
		pakuo.SetName(*s)
	}
	return pakuo
}

// ClearName clears the value of the "name" field.
func (pakuo *ProductAttributeKeyUpdateOne) ClearName() *ProductAttributeKeyUpdateOne {
	pakuo.mutation.ClearName()
	return pakuo
}

// SetSort sets the "sort" field.
func (pakuo *ProductAttributeKeyUpdateOne) SetSort(i int) *ProductAttributeKeyUpdateOne {
	pakuo.mutation.ResetSort()
	pakuo.mutation.SetSort(i)
	return pakuo
}

// AddSort adds i to the "sort" field.
func (pakuo *ProductAttributeKeyUpdateOne) AddSort(i int) *ProductAttributeKeyUpdateOne {
	pakuo.mutation.AddSort(i)
	return pakuo
}

// AddValueIDs adds the "values" edge to the ProductAttributeValue entity by IDs.
func (pakuo *ProductAttributeKeyUpdateOne) AddValueIDs(ids ...int) *ProductAttributeKeyUpdateOne {
	pakuo.mutation.AddValueIDs(ids...)
	return pakuo
}

// AddValues adds the "values" edges to the ProductAttributeValue entity.
func (pakuo *ProductAttributeKeyUpdateOne) AddValues(p ...*ProductAttributeValue) *ProductAttributeKeyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pakuo.AddValueIDs(ids...)
}

// Mutation returns the ProductAttributeKeyMutation object of the builder.
func (pakuo *ProductAttributeKeyUpdateOne) Mutation() *ProductAttributeKeyMutation {
	return pakuo.mutation
}

// ClearValues clears all "values" edges to the ProductAttributeValue entity.
func (pakuo *ProductAttributeKeyUpdateOne) ClearValues() *ProductAttributeKeyUpdateOne {
	pakuo.mutation.ClearValues()
	return pakuo
}

// RemoveValueIDs removes the "values" edge to ProductAttributeValue entities by IDs.
func (pakuo *ProductAttributeKeyUpdateOne) RemoveValueIDs(ids ...int) *ProductAttributeKeyUpdateOne {
	pakuo.mutation.RemoveValueIDs(ids...)
	return pakuo
}

// RemoveValues removes "values" edges to ProductAttributeValue entities.
func (pakuo *ProductAttributeKeyUpdateOne) RemoveValues(p ...*ProductAttributeValue) *ProductAttributeKeyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pakuo.RemoveValueIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pakuo *ProductAttributeKeyUpdateOne) Select(field string, fields ...string) *ProductAttributeKeyUpdateOne {
	pakuo.fields = append([]string{field}, fields...)
	return pakuo
}

// Save executes the query and returns the updated ProductAttributeKey entity.
func (pakuo *ProductAttributeKeyUpdateOne) Save(ctx context.Context) (*ProductAttributeKey, error) {
	var (
		err  error
		node *ProductAttributeKey
	)
	pakuo.defaults()
	if len(pakuo.hooks) == 0 {
		node, err = pakuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductAttributeKeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pakuo.mutation = mutation
			node, err = pakuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pakuo.hooks) - 1; i >= 0; i-- {
			if pakuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pakuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pakuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pakuo *ProductAttributeKeyUpdateOne) SaveX(ctx context.Context) *ProductAttributeKey {
	node, err := pakuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pakuo *ProductAttributeKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := pakuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pakuo *ProductAttributeKeyUpdateOne) ExecX(ctx context.Context) {
	if err := pakuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pakuo *ProductAttributeKeyUpdateOne) defaults() {
	if _, ok := pakuo.mutation.UpdatedAt(); !ok && !pakuo.mutation.UpdatedAtCleared() {
		v := productattributekey.UpdateDefaultUpdatedAt()
		pakuo.mutation.SetUpdatedAt(v)
	}
}

func (pakuo *ProductAttributeKeyUpdateOne) sqlSave(ctx context.Context) (_node *ProductAttributeKey, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productattributekey.Table,
			Columns: productattributekey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productattributekey.FieldID,
			},
		},
	}
	id, ok := pakuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProductAttributeKey.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pakuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productattributekey.FieldID)
		for _, f := range fields {
			if !productattributekey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productattributekey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pakuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pakuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productattributekey.FieldCreatedAt,
		})
	}
	if pakuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productattributekey.FieldCreatedAt,
		})
	}
	if value, ok := pakuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: productattributekey.FieldUpdatedAt,
		})
	}
	if pakuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: productattributekey.FieldUpdatedAt,
		})
	}
	if value, ok := pakuo.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productattributekey.FieldProductID,
		})
	}
	if value, ok := pakuo.mutation.AddedProductID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productattributekey.FieldProductID,
		})
	}
	if pakuo.mutation.ProductIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: productattributekey.FieldProductID,
		})
	}
	if value, ok := pakuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: productattributekey.FieldName,
		})
	}
	if pakuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: productattributekey.FieldName,
		})
	}
	if value, ok := pakuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productattributekey.FieldSort,
		})
	}
	if value, ok := pakuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: productattributekey.FieldSort,
		})
	}
	if pakuo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productattributekey.ValuesTable,
			Columns: []string{productattributekey.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pakuo.mutation.RemovedValuesIDs(); len(nodes) > 0 && !pakuo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productattributekey.ValuesTable,
			Columns: []string{productattributekey.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pakuo.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productattributekey.ValuesTable,
			Columns: []string{productattributekey.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productattributevalue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductAttributeKey{config: pakuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pakuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productattributekey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
