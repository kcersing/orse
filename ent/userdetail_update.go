// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"orse/ent/predicate"
	"orse/ent/user"
	"orse/ent/userdetail"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDetailUpdate is the builder for updating UserDetail entities.
type UserDetailUpdate struct {
	config
	hooks    []Hook
	mutation *UserDetailMutation
}

// Where appends a list predicates to the UserDetailUpdate builder.
func (udu *UserDetailUpdate) Where(ps ...predicate.UserDetail) *UserDetailUpdate {
	udu.mutation.Where(ps...)
	return udu
}

// SetUserID sets the "user_id" field.
func (udu *UserDetailUpdate) SetUserID(i int) *UserDetailUpdate {
	udu.mutation.SetUserID(i)
	return udu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (udu *UserDetailUpdate) SetNillableUserID(i *int) *UserDetailUpdate {
	if i != nil {
		udu.SetUserID(*i)
	}
	return udu
}

// ClearUserID clears the value of the "user_id" field.
func (udu *UserDetailUpdate) ClearUserID() *UserDetailUpdate {
	udu.mutation.ClearUserID()
	return udu
}

// SetName sets the "name" field.
func (udu *UserDetailUpdate) SetName(s string) *UserDetailUpdate {
	udu.mutation.SetName(s)
	return udu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (udu *UserDetailUpdate) SetNillableName(s *string) *UserDetailUpdate {
	if s != nil {
		udu.SetName(*s)
	}
	return udu
}

// ClearName clears the value of the "name" field.
func (udu *UserDetailUpdate) ClearName() *UserDetailUpdate {
	udu.mutation.ClearName()
	return udu
}

// SetAge sets the "age" field.
func (udu *UserDetailUpdate) SetAge(i int) *UserDetailUpdate {
	udu.mutation.ResetAge()
	udu.mutation.SetAge(i)
	return udu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (udu *UserDetailUpdate) SetNillableAge(i *int) *UserDetailUpdate {
	if i != nil {
		udu.SetAge(*i)
	}
	return udu
}

// AddAge adds i to the "age" field.
func (udu *UserDetailUpdate) AddAge(i int) *UserDetailUpdate {
	udu.mutation.AddAge(i)
	return udu
}

// ClearAge clears the value of the "age" field.
func (udu *UserDetailUpdate) ClearAge() *UserDetailUpdate {
	udu.mutation.ClearAge()
	return udu
}

// SetRank sets the "rank" field.
func (udu *UserDetailUpdate) SetRank(f float64) *UserDetailUpdate {
	udu.mutation.ResetRank()
	udu.mutation.SetRank(f)
	return udu
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (udu *UserDetailUpdate) SetNillableRank(f *float64) *UserDetailUpdate {
	if f != nil {
		udu.SetRank(*f)
	}
	return udu
}

// AddRank adds f to the "rank" field.
func (udu *UserDetailUpdate) AddRank(f float64) *UserDetailUpdate {
	udu.mutation.AddRank(f)
	return udu
}

// ClearRank clears the value of the "rank" field.
func (udu *UserDetailUpdate) ClearRank() *UserDetailUpdate {
	udu.mutation.ClearRank()
	return udu
}

// SetPic sets the "pic" field.
func (udu *UserDetailUpdate) SetPic(s string) *UserDetailUpdate {
	udu.mutation.SetPic(s)
	return udu
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (udu *UserDetailUpdate) SetNillablePic(s *string) *UserDetailUpdate {
	if s != nil {
		udu.SetPic(*s)
	}
	return udu
}

// ClearPic clears the value of the "pic" field.
func (udu *UserDetailUpdate) ClearPic() *UserDetailUpdate {
	udu.mutation.ClearPic()
	return udu
}

// SetUser sets the "user" edge to the User entity.
func (udu *UserDetailUpdate) SetUser(u *User) *UserDetailUpdate {
	return udu.SetUserID(u.ID)
}

// Mutation returns the UserDetailMutation object of the builder.
func (udu *UserDetailUpdate) Mutation() *UserDetailMutation {
	return udu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (udu *UserDetailUpdate) ClearUser() *UserDetailUpdate {
	udu.mutation.ClearUser()
	return udu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udu *UserDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(udu.hooks) == 0 {
		if err = udu.check(); err != nil {
			return 0, err
		}
		affected, err = udu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = udu.check(); err != nil {
				return 0, err
			}
			udu.mutation = mutation
			affected, err = udu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(udu.hooks) - 1; i >= 0; i-- {
			if udu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = udu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, udu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (udu *UserDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := udu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udu *UserDetailUpdate) Exec(ctx context.Context) error {
	_, err := udu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udu *UserDetailUpdate) ExecX(ctx context.Context) {
	if err := udu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udu *UserDetailUpdate) check() error {
	if v, ok := udu.mutation.Age(); ok {
		if err := userdetail.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	return nil
}

func (udu *UserDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userdetail.Table,
			Columns: userdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userdetail.FieldID,
			},
		},
	}
	if ps := udu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldName,
		})
	}
	if udu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userdetail.FieldName,
		})
	}
	if value, ok := udu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldAge,
		})
	}
	if value, ok := udu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldAge,
		})
	}
	if udu.mutation.AgeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userdetail.FieldAge,
		})
	}
	if value, ok := udu.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdetail.FieldRank,
		})
	}
	if value, ok := udu.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdetail.FieldRank,
		})
	}
	if udu.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: userdetail.FieldRank,
		})
	}
	if value, ok := udu.mutation.Pic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldPic,
		})
	}
	if udu.mutation.PicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userdetail.FieldPic,
		})
	}
	if udu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdetail.UserTable,
			Columns: []string{userdetail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := udu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdetail.UserTable,
			Columns: []string{userdetail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserDetailUpdateOne is the builder for updating a single UserDetail entity.
type UserDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDetailMutation
}

// SetUserID sets the "user_id" field.
func (uduo *UserDetailUpdateOne) SetUserID(i int) *UserDetailUpdateOne {
	uduo.mutation.SetUserID(i)
	return uduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uduo *UserDetailUpdateOne) SetNillableUserID(i *int) *UserDetailUpdateOne {
	if i != nil {
		uduo.SetUserID(*i)
	}
	return uduo
}

// ClearUserID clears the value of the "user_id" field.
func (uduo *UserDetailUpdateOne) ClearUserID() *UserDetailUpdateOne {
	uduo.mutation.ClearUserID()
	return uduo
}

// SetName sets the "name" field.
func (uduo *UserDetailUpdateOne) SetName(s string) *UserDetailUpdateOne {
	uduo.mutation.SetName(s)
	return uduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uduo *UserDetailUpdateOne) SetNillableName(s *string) *UserDetailUpdateOne {
	if s != nil {
		uduo.SetName(*s)
	}
	return uduo
}

// ClearName clears the value of the "name" field.
func (uduo *UserDetailUpdateOne) ClearName() *UserDetailUpdateOne {
	uduo.mutation.ClearName()
	return uduo
}

// SetAge sets the "age" field.
func (uduo *UserDetailUpdateOne) SetAge(i int) *UserDetailUpdateOne {
	uduo.mutation.ResetAge()
	uduo.mutation.SetAge(i)
	return uduo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (uduo *UserDetailUpdateOne) SetNillableAge(i *int) *UserDetailUpdateOne {
	if i != nil {
		uduo.SetAge(*i)
	}
	return uduo
}

// AddAge adds i to the "age" field.
func (uduo *UserDetailUpdateOne) AddAge(i int) *UserDetailUpdateOne {
	uduo.mutation.AddAge(i)
	return uduo
}

// ClearAge clears the value of the "age" field.
func (uduo *UserDetailUpdateOne) ClearAge() *UserDetailUpdateOne {
	uduo.mutation.ClearAge()
	return uduo
}

// SetRank sets the "rank" field.
func (uduo *UserDetailUpdateOne) SetRank(f float64) *UserDetailUpdateOne {
	uduo.mutation.ResetRank()
	uduo.mutation.SetRank(f)
	return uduo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (uduo *UserDetailUpdateOne) SetNillableRank(f *float64) *UserDetailUpdateOne {
	if f != nil {
		uduo.SetRank(*f)
	}
	return uduo
}

// AddRank adds f to the "rank" field.
func (uduo *UserDetailUpdateOne) AddRank(f float64) *UserDetailUpdateOne {
	uduo.mutation.AddRank(f)
	return uduo
}

// ClearRank clears the value of the "rank" field.
func (uduo *UserDetailUpdateOne) ClearRank() *UserDetailUpdateOne {
	uduo.mutation.ClearRank()
	return uduo
}

// SetPic sets the "pic" field.
func (uduo *UserDetailUpdateOne) SetPic(s string) *UserDetailUpdateOne {
	uduo.mutation.SetPic(s)
	return uduo
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (uduo *UserDetailUpdateOne) SetNillablePic(s *string) *UserDetailUpdateOne {
	if s != nil {
		uduo.SetPic(*s)
	}
	return uduo
}

// ClearPic clears the value of the "pic" field.
func (uduo *UserDetailUpdateOne) ClearPic() *UserDetailUpdateOne {
	uduo.mutation.ClearPic()
	return uduo
}

// SetUser sets the "user" edge to the User entity.
func (uduo *UserDetailUpdateOne) SetUser(u *User) *UserDetailUpdateOne {
	return uduo.SetUserID(u.ID)
}

// Mutation returns the UserDetailMutation object of the builder.
func (uduo *UserDetailUpdateOne) Mutation() *UserDetailMutation {
	return uduo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uduo *UserDetailUpdateOne) ClearUser() *UserDetailUpdateOne {
	uduo.mutation.ClearUser()
	return uduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uduo *UserDetailUpdateOne) Select(field string, fields ...string) *UserDetailUpdateOne {
	uduo.fields = append([]string{field}, fields...)
	return uduo
}

// Save executes the query and returns the updated UserDetail entity.
func (uduo *UserDetailUpdateOne) Save(ctx context.Context) (*UserDetail, error) {
	var (
		err  error
		node *UserDetail
	)
	if len(uduo.hooks) == 0 {
		if err = uduo.check(); err != nil {
			return nil, err
		}
		node, err = uduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uduo.check(); err != nil {
				return nil, err
			}
			uduo.mutation = mutation
			node, err = uduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uduo.hooks) - 1; i >= 0; i-- {
			if uduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uduo *UserDetailUpdateOne) SaveX(ctx context.Context) *UserDetail {
	node, err := uduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uduo *UserDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := uduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uduo *UserDetailUpdateOne) ExecX(ctx context.Context) {
	if err := uduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uduo *UserDetailUpdateOne) check() error {
	if v, ok := uduo.mutation.Age(); ok {
		if err := userdetail.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	return nil
}

func (uduo *UserDetailUpdateOne) sqlSave(ctx context.Context) (_node *UserDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userdetail.Table,
			Columns: userdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userdetail.FieldID,
			},
		},
	}
	id, ok := uduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserDetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdetail.FieldID)
		for _, f := range fields {
			if !userdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uduo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldName,
		})
	}
	if uduo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userdetail.FieldName,
		})
	}
	if value, ok := uduo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldAge,
		})
	}
	if value, ok := uduo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userdetail.FieldAge,
		})
	}
	if uduo.mutation.AgeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: userdetail.FieldAge,
		})
	}
	if value, ok := uduo.mutation.Rank(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdetail.FieldRank,
		})
	}
	if value, ok := uduo.mutation.AddedRank(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userdetail.FieldRank,
		})
	}
	if uduo.mutation.RankCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: userdetail.FieldRank,
		})
	}
	if value, ok := uduo.mutation.Pic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userdetail.FieldPic,
		})
	}
	if uduo.mutation.PicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userdetail.FieldPic,
		})
	}
	if uduo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdetail.UserTable,
			Columns: []string{userdetail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uduo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userdetail.UserTable,
			Columns: []string{userdetail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserDetail{config: uduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
