// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"orse/ent/productattributekey"
	"orse/ent/productattributevalue"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProductAttributeValue is the model entity for the ProductAttributeValue schema.
type ProductAttributeValue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// KeyID holds the value of the "key_id" field.
	KeyID int `json:"key_id,omitempty"`
	// Value holds the value of the "value" field.
	// 键值
	Value string `json:"value,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort int `json:"sort,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductAttributeValueQuery when eager-loading is set.
	Edges ProductAttributeValueEdges `json:"edges"`
}

// ProductAttributeValueEdges holds the relations/edges for other nodes in the graph.
type ProductAttributeValueEdges struct {
	// Key holds the value of the key edge.
	Key *ProductAttributeKey `json:"key,omitempty"`
	// Items holds the value of the items edge.
	Items []*ProductSpecsItem `json:"items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KeyOrErr returns the Key value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductAttributeValueEdges) KeyOrErr() (*ProductAttributeKey, error) {
	if e.loadedTypes[0] {
		if e.Key == nil {
			// The edge key was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: productattributekey.Label}
		}
		return e.Key, nil
	}
	return nil, &NotLoadedError{edge: "key"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e ProductAttributeValueEdges) ItemsOrErr() ([]*ProductSpecsItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductAttributeValue) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case productattributevalue.FieldID, productattributevalue.FieldKeyID, productattributevalue.FieldSort:
			values[i] = new(sql.NullInt64)
		case productattributevalue.FieldValue:
			values[i] = new(sql.NullString)
		case productattributevalue.FieldCreatedAt, productattributevalue.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductAttributeValue", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductAttributeValue fields.
func (pav *ProductAttributeValue) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productattributevalue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pav.ID = int(value.Int64)
		case productattributevalue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pav.CreatedAt = value.Time
			}
		case productattributevalue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pav.UpdatedAt = value.Time
			}
		case productattributevalue.FieldKeyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field key_id", values[i])
			} else if value.Valid {
				pav.KeyID = int(value.Int64)
			}
		case productattributevalue.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				pav.Value = value.String
			}
		case productattributevalue.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				pav.Sort = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryKey queries the "key" edge of the ProductAttributeValue entity.
func (pav *ProductAttributeValue) QueryKey() *ProductAttributeKeyQuery {
	return (&ProductAttributeValueClient{config: pav.config}).QueryKey(pav)
}

// QueryItems queries the "items" edge of the ProductAttributeValue entity.
func (pav *ProductAttributeValue) QueryItems() *ProductSpecsItemQuery {
	return (&ProductAttributeValueClient{config: pav.config}).QueryItems(pav)
}

// Update returns a builder for updating this ProductAttributeValue.
// Note that you need to call ProductAttributeValue.Unwrap() before calling this method if this ProductAttributeValue
// was returned from a transaction, and the transaction was committed or rolled back.
func (pav *ProductAttributeValue) Update() *ProductAttributeValueUpdateOne {
	return (&ProductAttributeValueClient{config: pav.config}).UpdateOne(pav)
}

// Unwrap unwraps the ProductAttributeValue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pav *ProductAttributeValue) Unwrap() *ProductAttributeValue {
	tx, ok := pav.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductAttributeValue is not a transactional entity")
	}
	pav.config.driver = tx.drv
	return pav
}

// String implements the fmt.Stringer.
func (pav *ProductAttributeValue) String() string {
	var builder strings.Builder
	builder.WriteString("ProductAttributeValue(")
	builder.WriteString(fmt.Sprintf("id=%v", pav.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pav.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pav.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", key_id=")
	builder.WriteString(fmt.Sprintf("%v", pav.KeyID))
	builder.WriteString(", value=")
	builder.WriteString(pav.Value)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", pav.Sort))
	builder.WriteByte(')')
	return builder.String()
}

// ProductAttributeValues is a parsable slice of ProductAttributeValue.
type ProductAttributeValues []*ProductAttributeValue

func (pav ProductAttributeValues) config(cfg config) {
	for _i := range pav {
		pav[_i].config = cfg
	}
}
