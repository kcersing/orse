// Code generated by entc, DO NOT EDIT.

package orderdelivery

import (
	"orse/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// DeliveryCompany applies equality check predicate on the "delivery_company" field. It's identical to DeliveryCompanyEQ.
func DeliveryCompany(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryTime applies equality check predicate on the "delivery_time" field. It's identical to DeliveryTimeEQ.
func DeliveryTime(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryTime), v))
	})
}

// ReceiverName applies equality check predicate on the "receiver_name" field. It's identical to ReceiverNameEQ.
func ReceiverName(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverName), v))
	})
}

// ReceiverPhone applies equality check predicate on the "receiver_phone" field. It's identical to ReceiverPhoneEQ.
func ReceiverPhone(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPostCode applies equality check predicate on the "receiver_post_code" field. It's identical to ReceiverPostCodeEQ.
func ReceiverPostCode(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverProvince applies equality check predicate on the "receiver_province" field. It's identical to ReceiverProvinceEQ.
func ReceiverProvince(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverCity applies equality check predicate on the "receiver_city" field. It's identical to ReceiverCityEQ.
func ReceiverCity(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverCity), v))
	})
}

// ReceiverRegion applies equality check predicate on the "receiver_region" field. It's identical to ReceiverRegionEQ.
func ReceiverRegion(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverDetailAddress applies equality check predicate on the "receiver_detail_address" field. It's identical to ReceiverDetailAddressEQ.
func ReceiverDetailAddress(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiveTime applies equality check predicate on the "receive_time" field. It's identical to ReceiveTimeEQ.
func ReceiveTime(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v int) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...int) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...int) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderID)))
	})
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderID)))
	})
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSn), v))
	})
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSn), v...))
	})
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSn), v...))
	})
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSn), v))
	})
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSn), v))
	})
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSn), v))
	})
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSn), v))
	})
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSn), v))
	})
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSn), v))
	})
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSn), v))
	})
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSn), v))
	})
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSn), v))
	})
}

// DeliveryCompanyEQ applies the EQ predicate on the "delivery_company" field.
func DeliveryCompanyEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyNEQ applies the NEQ predicate on the "delivery_company" field.
func DeliveryCompanyNEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyIn applies the In predicate on the "delivery_company" field.
func DeliveryCompanyIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeliveryCompany), v...))
	})
}

// DeliveryCompanyNotIn applies the NotIn predicate on the "delivery_company" field.
func DeliveryCompanyNotIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeliveryCompany), v...))
	})
}

// DeliveryCompanyGT applies the GT predicate on the "delivery_company" field.
func DeliveryCompanyGT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyGTE applies the GTE predicate on the "delivery_company" field.
func DeliveryCompanyGTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyLT applies the LT predicate on the "delivery_company" field.
func DeliveryCompanyLT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyLTE applies the LTE predicate on the "delivery_company" field.
func DeliveryCompanyLTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyContains applies the Contains predicate on the "delivery_company" field.
func DeliveryCompanyContains(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyHasPrefix applies the HasPrefix predicate on the "delivery_company" field.
func DeliveryCompanyHasPrefix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyHasSuffix applies the HasSuffix predicate on the "delivery_company" field.
func DeliveryCompanyHasSuffix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyIsNil applies the IsNil predicate on the "delivery_company" field.
func DeliveryCompanyIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeliveryCompany)))
	})
}

// DeliveryCompanyNotNil applies the NotNil predicate on the "delivery_company" field.
func DeliveryCompanyNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeliveryCompany)))
	})
}

// DeliveryCompanyEqualFold applies the EqualFold predicate on the "delivery_company" field.
func DeliveryCompanyEqualFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryCompanyContainsFold applies the ContainsFold predicate on the "delivery_company" field.
func DeliveryCompanyContainsFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeliveryCompany), v))
	})
}

// DeliveryTimeEQ applies the EQ predicate on the "delivery_time" field.
func DeliveryTimeEQ(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeNEQ applies the NEQ predicate on the "delivery_time" field.
func DeliveryTimeNEQ(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeIn applies the In predicate on the "delivery_time" field.
func DeliveryTimeIn(vs ...time.Time) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeliveryTime), v...))
	})
}

// DeliveryTimeNotIn applies the NotIn predicate on the "delivery_time" field.
func DeliveryTimeNotIn(vs ...time.Time) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeliveryTime), v...))
	})
}

// DeliveryTimeGT applies the GT predicate on the "delivery_time" field.
func DeliveryTimeGT(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeGTE applies the GTE predicate on the "delivery_time" field.
func DeliveryTimeGTE(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeLT applies the LT predicate on the "delivery_time" field.
func DeliveryTimeLT(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeLTE applies the LTE predicate on the "delivery_time" field.
func DeliveryTimeLTE(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeIsNil applies the IsNil predicate on the "delivery_time" field.
func DeliveryTimeIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeliveryTime)))
	})
}

// DeliveryTimeNotNil applies the NotNil predicate on the "delivery_time" field.
func DeliveryTimeNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeliveryTime)))
	})
}

// ReceiverNameEQ applies the EQ predicate on the "receiver_name" field.
func ReceiverNameEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameNEQ applies the NEQ predicate on the "receiver_name" field.
func ReceiverNameNEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameIn applies the In predicate on the "receiver_name" field.
func ReceiverNameIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiverName), v...))
	})
}

// ReceiverNameNotIn applies the NotIn predicate on the "receiver_name" field.
func ReceiverNameNotIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiverName), v...))
	})
}

// ReceiverNameGT applies the GT predicate on the "receiver_name" field.
func ReceiverNameGT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameGTE applies the GTE predicate on the "receiver_name" field.
func ReceiverNameGTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameLT applies the LT predicate on the "receiver_name" field.
func ReceiverNameLT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameLTE applies the LTE predicate on the "receiver_name" field.
func ReceiverNameLTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameContains applies the Contains predicate on the "receiver_name" field.
func ReceiverNameContains(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameHasPrefix applies the HasPrefix predicate on the "receiver_name" field.
func ReceiverNameHasPrefix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameHasSuffix applies the HasSuffix predicate on the "receiver_name" field.
func ReceiverNameHasSuffix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameIsNil applies the IsNil predicate on the "receiver_name" field.
func ReceiverNameIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiverName)))
	})
}

// ReceiverNameNotNil applies the NotNil predicate on the "receiver_name" field.
func ReceiverNameNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiverName)))
	})
}

// ReceiverNameEqualFold applies the EqualFold predicate on the "receiver_name" field.
func ReceiverNameEqualFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameContainsFold applies the ContainsFold predicate on the "receiver_name" field.
func ReceiverNameContainsFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverName), v))
	})
}

// ReceiverPhoneEQ applies the EQ predicate on the "receiver_phone" field.
func ReceiverPhoneEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneNEQ applies the NEQ predicate on the "receiver_phone" field.
func ReceiverPhoneNEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneIn applies the In predicate on the "receiver_phone" field.
func ReceiverPhoneIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiverPhone), v...))
	})
}

// ReceiverPhoneNotIn applies the NotIn predicate on the "receiver_phone" field.
func ReceiverPhoneNotIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiverPhone), v...))
	})
}

// ReceiverPhoneGT applies the GT predicate on the "receiver_phone" field.
func ReceiverPhoneGT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneGTE applies the GTE predicate on the "receiver_phone" field.
func ReceiverPhoneGTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneLT applies the LT predicate on the "receiver_phone" field.
func ReceiverPhoneLT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneLTE applies the LTE predicate on the "receiver_phone" field.
func ReceiverPhoneLTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneContains applies the Contains predicate on the "receiver_phone" field.
func ReceiverPhoneContains(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneHasPrefix applies the HasPrefix predicate on the "receiver_phone" field.
func ReceiverPhoneHasPrefix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneHasSuffix applies the HasSuffix predicate on the "receiver_phone" field.
func ReceiverPhoneHasSuffix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneIsNil applies the IsNil predicate on the "receiver_phone" field.
func ReceiverPhoneIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiverPhone)))
	})
}

// ReceiverPhoneNotNil applies the NotNil predicate on the "receiver_phone" field.
func ReceiverPhoneNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiverPhone)))
	})
}

// ReceiverPhoneEqualFold applies the EqualFold predicate on the "receiver_phone" field.
func ReceiverPhoneEqualFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPhoneContainsFold applies the ContainsFold predicate on the "receiver_phone" field.
func ReceiverPhoneContainsFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverPhone), v))
	})
}

// ReceiverPostCodeEQ applies the EQ predicate on the "receiver_post_code" field.
func ReceiverPostCodeEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeNEQ applies the NEQ predicate on the "receiver_post_code" field.
func ReceiverPostCodeNEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeIn applies the In predicate on the "receiver_post_code" field.
func ReceiverPostCodeIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiverPostCode), v...))
	})
}

// ReceiverPostCodeNotIn applies the NotIn predicate on the "receiver_post_code" field.
func ReceiverPostCodeNotIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiverPostCode), v...))
	})
}

// ReceiverPostCodeGT applies the GT predicate on the "receiver_post_code" field.
func ReceiverPostCodeGT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeGTE applies the GTE predicate on the "receiver_post_code" field.
func ReceiverPostCodeGTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeLT applies the LT predicate on the "receiver_post_code" field.
func ReceiverPostCodeLT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeLTE applies the LTE predicate on the "receiver_post_code" field.
func ReceiverPostCodeLTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeContains applies the Contains predicate on the "receiver_post_code" field.
func ReceiverPostCodeContains(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeHasPrefix applies the HasPrefix predicate on the "receiver_post_code" field.
func ReceiverPostCodeHasPrefix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeHasSuffix applies the HasSuffix predicate on the "receiver_post_code" field.
func ReceiverPostCodeHasSuffix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeIsNil applies the IsNil predicate on the "receiver_post_code" field.
func ReceiverPostCodeIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiverPostCode)))
	})
}

// ReceiverPostCodeNotNil applies the NotNil predicate on the "receiver_post_code" field.
func ReceiverPostCodeNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiverPostCode)))
	})
}

// ReceiverPostCodeEqualFold applies the EqualFold predicate on the "receiver_post_code" field.
func ReceiverPostCodeEqualFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverPostCodeContainsFold applies the ContainsFold predicate on the "receiver_post_code" field.
func ReceiverPostCodeContainsFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverPostCode), v))
	})
}

// ReceiverProvinceEQ applies the EQ predicate on the "receiver_province" field.
func ReceiverProvinceEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceNEQ applies the NEQ predicate on the "receiver_province" field.
func ReceiverProvinceNEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceIn applies the In predicate on the "receiver_province" field.
func ReceiverProvinceIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiverProvince), v...))
	})
}

// ReceiverProvinceNotIn applies the NotIn predicate on the "receiver_province" field.
func ReceiverProvinceNotIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiverProvince), v...))
	})
}

// ReceiverProvinceGT applies the GT predicate on the "receiver_province" field.
func ReceiverProvinceGT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceGTE applies the GTE predicate on the "receiver_province" field.
func ReceiverProvinceGTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceLT applies the LT predicate on the "receiver_province" field.
func ReceiverProvinceLT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceLTE applies the LTE predicate on the "receiver_province" field.
func ReceiverProvinceLTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceContains applies the Contains predicate on the "receiver_province" field.
func ReceiverProvinceContains(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceHasPrefix applies the HasPrefix predicate on the "receiver_province" field.
func ReceiverProvinceHasPrefix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceHasSuffix applies the HasSuffix predicate on the "receiver_province" field.
func ReceiverProvinceHasSuffix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceIsNil applies the IsNil predicate on the "receiver_province" field.
func ReceiverProvinceIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiverProvince)))
	})
}

// ReceiverProvinceNotNil applies the NotNil predicate on the "receiver_province" field.
func ReceiverProvinceNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiverProvince)))
	})
}

// ReceiverProvinceEqualFold applies the EqualFold predicate on the "receiver_province" field.
func ReceiverProvinceEqualFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverProvinceContainsFold applies the ContainsFold predicate on the "receiver_province" field.
func ReceiverProvinceContainsFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverProvince), v))
	})
}

// ReceiverCityEQ applies the EQ predicate on the "receiver_city" field.
func ReceiverCityEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityNEQ applies the NEQ predicate on the "receiver_city" field.
func ReceiverCityNEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityIn applies the In predicate on the "receiver_city" field.
func ReceiverCityIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiverCity), v...))
	})
}

// ReceiverCityNotIn applies the NotIn predicate on the "receiver_city" field.
func ReceiverCityNotIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiverCity), v...))
	})
}

// ReceiverCityGT applies the GT predicate on the "receiver_city" field.
func ReceiverCityGT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityGTE applies the GTE predicate on the "receiver_city" field.
func ReceiverCityGTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityLT applies the LT predicate on the "receiver_city" field.
func ReceiverCityLT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityLTE applies the LTE predicate on the "receiver_city" field.
func ReceiverCityLTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityContains applies the Contains predicate on the "receiver_city" field.
func ReceiverCityContains(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityHasPrefix applies the HasPrefix predicate on the "receiver_city" field.
func ReceiverCityHasPrefix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityHasSuffix applies the HasSuffix predicate on the "receiver_city" field.
func ReceiverCityHasSuffix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityIsNil applies the IsNil predicate on the "receiver_city" field.
func ReceiverCityIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiverCity)))
	})
}

// ReceiverCityNotNil applies the NotNil predicate on the "receiver_city" field.
func ReceiverCityNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiverCity)))
	})
}

// ReceiverCityEqualFold applies the EqualFold predicate on the "receiver_city" field.
func ReceiverCityEqualFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverCity), v))
	})
}

// ReceiverCityContainsFold applies the ContainsFold predicate on the "receiver_city" field.
func ReceiverCityContainsFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverCity), v))
	})
}

// ReceiverRegionEQ applies the EQ predicate on the "receiver_region" field.
func ReceiverRegionEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionNEQ applies the NEQ predicate on the "receiver_region" field.
func ReceiverRegionNEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionIn applies the In predicate on the "receiver_region" field.
func ReceiverRegionIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiverRegion), v...))
	})
}

// ReceiverRegionNotIn applies the NotIn predicate on the "receiver_region" field.
func ReceiverRegionNotIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiverRegion), v...))
	})
}

// ReceiverRegionGT applies the GT predicate on the "receiver_region" field.
func ReceiverRegionGT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionGTE applies the GTE predicate on the "receiver_region" field.
func ReceiverRegionGTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionLT applies the LT predicate on the "receiver_region" field.
func ReceiverRegionLT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionLTE applies the LTE predicate on the "receiver_region" field.
func ReceiverRegionLTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionContains applies the Contains predicate on the "receiver_region" field.
func ReceiverRegionContains(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionHasPrefix applies the HasPrefix predicate on the "receiver_region" field.
func ReceiverRegionHasPrefix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionHasSuffix applies the HasSuffix predicate on the "receiver_region" field.
func ReceiverRegionHasSuffix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionIsNil applies the IsNil predicate on the "receiver_region" field.
func ReceiverRegionIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiverRegion)))
	})
}

// ReceiverRegionNotNil applies the NotNil predicate on the "receiver_region" field.
func ReceiverRegionNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiverRegion)))
	})
}

// ReceiverRegionEqualFold applies the EqualFold predicate on the "receiver_region" field.
func ReceiverRegionEqualFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverRegionContainsFold applies the ContainsFold predicate on the "receiver_region" field.
func ReceiverRegionContainsFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverRegion), v))
	})
}

// ReceiverDetailAddressEQ applies the EQ predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressNEQ applies the NEQ predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressNEQ(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressIn applies the In predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiverDetailAddress), v...))
	})
}

// ReceiverDetailAddressNotIn applies the NotIn predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressNotIn(vs ...string) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiverDetailAddress), v...))
	})
}

// ReceiverDetailAddressGT applies the GT predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressGT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressGTE applies the GTE predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressGTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressLT applies the LT predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressLT(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressLTE applies the LTE predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressLTE(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressContains applies the Contains predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressContains(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressHasPrefix applies the HasPrefix predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressHasPrefix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressHasSuffix applies the HasSuffix predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressHasSuffix(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressIsNil applies the IsNil predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiverDetailAddress)))
	})
}

// ReceiverDetailAddressNotNil applies the NotNil predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiverDetailAddress)))
	})
}

// ReceiverDetailAddressEqualFold applies the EqualFold predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressEqualFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiverDetailAddressContainsFold applies the ContainsFold predicate on the "receiver_detail_address" field.
func ReceiverDetailAddressContainsFold(v string) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverDetailAddress), v))
	})
}

// ReceiveTimeEQ applies the EQ predicate on the "receive_time" field.
func ReceiveTimeEQ(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiveTime), v))
	})
}

// ReceiveTimeNEQ applies the NEQ predicate on the "receive_time" field.
func ReceiveTimeNEQ(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiveTime), v))
	})
}

// ReceiveTimeIn applies the In predicate on the "receive_time" field.
func ReceiveTimeIn(vs ...time.Time) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiveTime), v...))
	})
}

// ReceiveTimeNotIn applies the NotIn predicate on the "receive_time" field.
func ReceiveTimeNotIn(vs ...time.Time) predicate.OrderDelivery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDelivery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiveTime), v...))
	})
}

// ReceiveTimeGT applies the GT predicate on the "receive_time" field.
func ReceiveTimeGT(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiveTime), v))
	})
}

// ReceiveTimeGTE applies the GTE predicate on the "receive_time" field.
func ReceiveTimeGTE(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiveTime), v))
	})
}

// ReceiveTimeLT applies the LT predicate on the "receive_time" field.
func ReceiveTimeLT(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiveTime), v))
	})
}

// ReceiveTimeLTE applies the LTE predicate on the "receive_time" field.
func ReceiveTimeLTE(v time.Time) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiveTime), v))
	})
}

// ReceiveTimeIsNil applies the IsNil predicate on the "receive_time" field.
func ReceiveTimeIsNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceiveTime)))
	})
}

// ReceiveTimeNotNil applies the NotNil predicate on the "receive_time" field.
func ReceiveTimeNotNil() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceiveTime)))
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderDelivery) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderDelivery) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderDelivery) predicate.OrderDelivery {
	return predicate.OrderDelivery(func(s *sql.Selector) {
		p(s.Not())
	})
}
